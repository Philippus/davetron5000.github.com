<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2016-12-07T10:29:54-05:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[On Being On Call]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/12/07/on-call.html"/>
    
    <updated>2016-12-07T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/12/07/on-call</id>
    <content type="html"><![CDATA[<p>There was a conversation on Twitter about developers being on call, started (I think) from <a href="https://twitter.com/as_w/status/806169588161544192">this tweet</a>:</p>

<blockquote>
  <table>
    <tbody>
      <tr>
        <td>Put your developers on-call. You’ll be surprised what stops breaking.— Aaron</td>
        <td>אהרן (@as_w)</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<p>I 100% agree with this (for a particular interpretation of “put”—see below).</p>

<!-- more -->

<h2 id="what-you-learn-on-call">What You Learn On Call</h2>

<p>I’ve observed, both in myself and others, that being on call leads to honing skills that are otherwise difficult to gain <em>and</em> are useful in writing software.</p>

<p>As I said in <a href="http://naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html">Production is All That Matters</a>:</p>

<blockquote>
  <p>How your software runs in production is <strong>all that matters</strong>. The most amazing abstractions, cleanest code, or beautiful algorithms are meaningless if your code doesn’t run well on production.</p>
</blockquote>

<p>Where I’ve grown as a developer in relation to being on call is in seeing how my code works in production and what happens when it breaks down.  When code I
wrote experiences a problem, I get very valuable feedback about my code.  Was it really as simple as I thought when I was writing it?  Do I regret omitting
comments?  How happy am I to see a Git commit message of “updated”?  Did that failure case that “should” never happen actually happen?  Did a think through the user experience as well I thought I had?</p>

<p>These are hard questions to answer, but being directly responsible for your code in production helps answer them.</p>

<p>Putting developers on call also fosters a DevOps culture that avoids an us-vs-them mentality with the technical operations team.  In fact, a great reason to use a service like <a href="https://heroku.com">Heroku</a> is that you don’t (initially) <em>need</em> an ops team, and developers <em>have</em> to be on call. Heroku is a really powerful tool for a developer to learn what it’s like to be on call, because the scope of your responsibility is greatly reduced as compared to a more classic hosting setup.</p>

<p>But, being on call should not be assumed to be part of your job.</p>

<h2 id="on-call-must-be-an-explicit-requirement">“On Call” Must be an Explicit Requirement</h2>

<p>If you are hiring developers, mention the on-call requirements.  If you are looking for a job, ask about it.  You need a sense of the frequency of when you’ll
be on call, and a baseline for how often you’ll be woken up while you are on call (this is also a great question to reveal the actual quality of the software
you’ll be working on).</p>

<p>The reason for this is that not everyone can actually <em>be</em> on call.  Not everyone actually <em>wants</em> to be on call either, and that’s OK.  You aren’t a bad
developer for not wanting to be on call.</p>

<p>But, if your job requires it, then it requires it.  That’s why it’s better to explicit up front.</p>

<p>It also makes it hard to suddenly put developers into an on-call rotation when the expectation has been set that this is not a job requirement.  While it’s
perfectly normal for a company’s needs to change as the company changes, you have to be cognizant of the people who now have a new job requirement being
thrust upon them.</p>

<p>If you decided that your Ruby shop is now going to write 100% Go, you’ll need to accommodate the team during that transition.  Adding an on-call requirement is an even more drastic change.  You have to prepare yourself for people that are unable (or unwilling) to take on this new requirement.  Whatever gain you feel you may get from adding an on-call rotation must be weighed against the downsides.</p>

<h2 id="conclusion">Conclusion</h2>

<p>If you have the opportunity to be on call, and have the bandwidth in your life to do it, I highly recommend it.  You might hate it, but I’ll bet you’ll learn
things about software development, and you won’t always be in a place in your life to do it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration Design is User Experience Design…and it's hard]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/12/06/configuration-is-user-experience.html"/>
    
    <updated>2016-12-06T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/12/06/configuration-is-user-experience</id>
    <content type="html"><![CDATA[<p>In exploring the modern front-end ecosystem for my <a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">new book</a>, I’ve gotten to experience some truly difficult configuration formats (Webpack) and to work around aspects of Rails that aren’t configurable (Sprockets).  Configuration is hard, and it’s an overlooked part of the user experience often designed to make the software library author’s job easier at the expense of ease-of-use.</p>

<p>It doesn’t have to be this way.</p>

<!-- more -->

<p>Rails is famous for popularizing “convention over configuration”, which boils down to two things:</p>

<ul>
  <li>Don’t make everything configurable.</li>
  <li>Set sensible defaults for everything that <em>is</em> configurable.</li>
</ul>

<p>This is often referred to as “opinionated software”, but it’s really “software that is easy to use”.  This is because I strongly feel developers should be
spending time solving problems for their users and not making pointless decisions like where files go, how to name database tables, or what HTML templating language to use.  No project failed because the developers didn’t think long and hard enough about the merits of HAML vs Slim.</p>

<p>But, this concern is orthogonal to the <em>user experience</em> of configuring software.  Software configuration is, on a whole, a total nightmare.  Rails shields
itself from some criticism because it doesn’t make you actually configure things very often, but when you do, it’s needlessly complex.</p>

<p>Here’s how to configure the JavaScript minifier in Sprockets:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">environment</span><span class="p">.</span><span class="nf">js_compressor</span>  <span class="o">=</span> <span class="ss">:uglify</span>
</code></pre>
</div>

<p>What does the symbol <code class="highlighter-rouge">:uglify</code> mean?  What does it do?  The documentation for <code class="highlighter-rouge">js_compressor</code> is:</p>

<blockquote>
  <p>Assign a compressor to run on <code class="highlighter-rouge">application/javascript</code> assets.  The compressor object must respond to <code class="highlighter-rouge">compress</code>.</p>
</blockquote>

<p>Although you can make a <code class="highlighter-rouge">Symbol</code> respond to <code class="highlighter-rouge">compress</code>, that’s clearly that’s not what happening here. Turns out there is a lookup table in the code that maps
that symbol to the actual compressor, <code class="highlighter-rouge">Sprockets::UglifierCompressor</code> (which, strangely, does not respond to <code class="highlighter-rouge">compress</code>; the docs are out of date and the
object must actually respond to <code class="highlighter-rouge">call</code>).  So, to specify another value than the default, you have to <em>configure the configuration</em>.</p>

<p>A UI like this isn’t learnable.  You can’t simply figure out what other options are available.  It’s also not predictable, because you have no way to know
what different values will do (without reading the source code and even then it’s not clear—what’s being passed to <code class="highlighter-rouge">call</code>?).</p>

<p>Typically, a UI or API has to trade-off learnability with usability.  <a href="http://naildrivin5.com/blog/2013/04/24/how-to-switch-to-vim.html">vim</a> is a classic
example of leaning toward usability.  It’s very difficult to learn, but once you do learn it, you’re more efficient than with most other editors.</p>

<p>Configuration APIs <em>must</em> lean toward learnability, because there is no steady-state where you are editing configuration every day.  The <em>usability</em> of
configuration doesn’t matter nearly as much as its learnability.</p>

<p>And, because Ruby uses code for configuration, I would argue it makes the framework developer’s life easier.  Consider if <em>this</em> were the way to configure the
JS compressor:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">environment</span><span class="p">.</span><span class="nf">js_compressor_class</span> <span class="o">=</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">UglifierCompressor</span>
</code></pre>
</div>

<p>This is eminently more learnable.  We know that we’re expected to provide a class.  We can also see that the default value is…a class!  We can much more
easily locate that class than we could a symbol.  In fact, if we’re lucky, that class has documentation that we can consult instead of looking at the source.</p>

<p>I should note that you <em>can</em> pass a class to <code class="highlighter-rouge">js_compressor=</code>.  There’s just all this extra code in Sprockets to handle a Symbol.  I can’t understand why.
It’s more work for the library maintainer and more difficult in every way for the user.</p>

<p>But, there is a strong culture in Rails for playing code golf at every turn.  Anything verbose is “ugly” and not “clean” and therefore must be eliminated.
This is not in the interest of users.</p>

<p>The way configuration is used is different than, say, Active Support.  I would argue that Rails is right to create APIs like <code class="highlighter-rouge">3.days.ago</code>.  But, these opaque
and undiscoverable affordances have no place in configuration.</p>

<p>Configuration should be explicit, and if making it more verbose is required to make it explicit, so be it. Note that explicit doesn’t require being verbose.</p>

<p>An explicit configuration is more learnable and readable.  It also makes the library author’s job simpler, meaning they can provide more help to the user in
properly configuring the library.</p>

<p>For example, what if <code class="highlighter-rouge">js_compressor_class=</code> worked like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">js_compressor_class</span><span class="o">=</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
  <span class="nb">method</span> <span class="o">=</span> <span class="n">klass</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
  <span class="k">if</span> <span class="nb">method</span> <span class="o">&amp;&amp;</span> <span class="nb">method</span><span class="p">.</span><span class="nf">arity</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="vi">@js_compressor_class</span> <span class="o">=</span> <span class="n">klass</span>
  <span class="k">elsif</span> <span class="nb">method</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2"> does not implement `call`"</span>
  <span class="k">else</span>
    <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2"> implements call, but it takes </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">arity</span><span class="si">}</span><span class="s2"> "</span> <span class="o">+</span>
          <span class="s2">"arguments.  It should take exactly 1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>How helpful would that be?  A lot more so than being able to specify a Symbol to save a few seconds of typing.  I know that Ruby and Rails eschew this sort
of safety net, but, again, users aren’t in the configuration very often and won’t ever really learn the subtleties of how it works.  They <em>need</em> safety checks and helpful error messages far more than in the “regular” Rails API.</p>

<p>Leaving Rails, it’s all downhill, but I think the same lessons could be applied.</p>

<p>Let’s look at Webpack, the current asset-pipeline-du-jour.</p>

<p>Webpack is highly powerful and eminently functional.  But its configuration is bordering on performance art.  Here’s how the docs recommend you get CSS into
your asset bundle:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">loaders</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span> 
      <span class="p">},</span>
      <span class="c1">// ...</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>This is impossible for a newcomer to derive, and pretty difficult to retain.  Even if you understand the concept of loaders (which are, roughly, a way to
tell Webpack how to handle a file given to <code class="highlighter-rouge">require()</code>), this is still incredibly opaque and error-prone.  It doesn’t have to be and, honestly, a
better format would likely make the code that manages this easier to write and maintain.</p>

<p>So, what is this configuration doing?  It says that if someone <code class="highlighter-rouge">require()</code>s a file whose name ends in <code class="highlighter-rouge">.css</code>, then to run it through some code attached to the string
“css-loader” and then run <em>that</em> result through some code attached to the string “style-loader”.</p>

<p>Where did “css-loader” and “style-loader” come from?  And how do we know we can combine them in this way?  We have only documentation to tell us that this
could possibly work and is correct.</p>

<p>That the configuration requires a mini-language embedded in a string is telling us that there’s a lot of room for improvement.</p>

<p>Whatever “style-loader” and “css-loader” mean, they eventualy lead to some piece of code we’ve brought down from NPM.  Why not use that piece of code as the
configuration?  Further, why are we hiding the idea of multiple loaders?  And why bury the ordering inside a string?  And why order the backwards from how
both UNIX and English-speakers read?</p>

<p>Instead, what if we were more honest about what’s being configured.  We want to configure a pipeline of loaders, which are functions that we pull in from a
dependency:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">CssLoader</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"css-loader"</span><span class="p">);</span>   <span class="err">#</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">from</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
<span class="kd">var</span> <span class="nx">StyleLoader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"style-loader"</span><span class="p">);</span> <span class="err">#</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">from</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>

<span class="nl">module</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">loaders</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
      <span class="na">loaderPipeline</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">CssLoader</span><span class="p">,</span>
        <span class="nx">StyleLoader</span>
      <span class="p">]</span>
    <span class="p">},</span>
</code></pre>
</div>

<p>This requires much less context to get right.  If we assume some knowledge of what a loader is as well as some basics of JavaScript, we can not only quickly
understand this configuration, but we can modify it more easily.  I can dig into the css-loader package and see what it exports.  I can also easily see the
ordering of how my loaders will be used, because we’re using a data structure for ordering things: an array.</p>

<p>Notice how much more clear this actually is.  I would also be willing to bet that the code that interprets this configuration would be much simpler,
because it’s being handed the actual pieces of code to execute and doesn’t have parse out that ridiculous exclamation point or look up “style-loader” in
some internal data structure to find the actual code.</p>

<p>Designing a configuration system is like designing an API, but it’s even harder, because it’s an API that is crucially important to use properly, and
something that by definition developers will not be using very frequently.  It’s one of the few cases where <em>learnability</em> matters.</p>

<p>But, it could be worse.  Here’s how to specify a project dependency in SBT, the Scala Build Tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">"org.apache.derby"</span> <span class="o">%</span> <span class="s">"derby"</span> <span class="o">%</span> <span class="s">"10.4.1.3"</span>
<span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">"org.scala-tools"</span> <span class="o">%%</span> <span class="s">"scala-stm"</span> <span class="o">%</span> <span class="s">"0.3"</span>
</code></pre>
</div>

<p>Any ideas what those strings are?  Or why the first line uses single percent-signs and the second line uses one double-one?  Good luck googling that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing even more legible SQL]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/11/04/more-more-legible-sql.html"/>
    
    <updated>2016-11-04T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/11/04/more-more-legible-sql</id>
    <content type="html"><![CDATA[<p><a href="http://www.craigkerstiens.com">Craig Kerstiens</a> wrote a great short blog post about <a href="http://www.craigkerstiens.com/2016/01/08/writing-better-sql/">writing more legible
SQL</a>.  It’s a great read on an important topic—SQL can be very hard to read
and modify—but I don’t think he goes far enough about “one thing per line”, so I’d like to show how <em>I</em> write SQL.</p>

<!-- more -->

<h2 id="rules-of-thumb">Rules of Thumb</h2>

<p>I’m kind of a nut for <a href="http://naildrivin5.com/blog/2013/05/17/source-code-typography.html">code typography</a>, but I think it’s important enough to get right and almost always worth going a bit farther than
you’d think so code <em>looks</em> great.</p>

<ul>
  <li>Write your SQL to be understood and read, even at the cost of modification (no leading commas FFS).</li>
  <li>Keywords in all-caps.</li>
  <li>Align, align, align, align.</li>
  <li>Don’t use table aliases unless required for disambiguation.</li>
  <li>Be consistent to a degree you never thought possible.</li>
  <li>Almost always one thing per line.  Exceptions are <code class="highlighter-rouge">AND</code> and not much else.</li>
</ul>

<h2 id="example">Example</h2>

<p>Craig writes:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">foo</span><span class="p">,</span>
       <span class="n">bar</span>
<span class="k">FROM</span> <span class="n">baz</span>
</code></pre>
</div>

<p>This is not one thing per line.  This is (and is how I wold write that statement):</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="n">foo</span><span class="p">,</span>
  <span class="n">bar</span>
<span class="k">FROM</span>
  <span class="n">baz</span>
</code></pre>
</div>

<p>I treat each part of a statement like a scoping block:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="err">«</span><span class="n">fields</span><span class="err">»</span>
<span class="k">FROM</span>
  <span class="err">«</span><span class="n">tables</span><span class="err">»</span>
<span class="k">WHERE</span>
  <span class="err">«</span><span class="k">where</span> <span class="n">clauses</span><span class="err">»</span>
<span class="k">ORDER</span> <span class="k">BY</span>
  <span class="err">«</span><span class="n">ordering</span> <span class="n">fields</span><span class="err">»</span>
<span class="k">GROUP</span> <span class="k">BY</span>
  <span class="err">«</span><span class="k">grouping</span> <span class="err">»</span>
<span class="k">HAVING</span>
  <span class="err">«</span><span class="n">good</span> <span class="n">ole</span> <span class="k">HAVING</span> <span class="p">:)</span><span class="err">»</span>
<span class="p">;</span> <span class="c1">-- semi on the last line only if needed; usually I 
</span>  <span class="c1">-- omit this since it's not needed in code
</span></code></pre>
</div>

<p>Let’s take a more extreme case, because when I say “align, align, align, align”, and “be consistent to a degree you never thought possible” I’m not kidding.</p>

<h2 id="a-realer-example">A Realer Example</h2>

<p>Suppose we have a table <code class="highlighter-rouge">transactions</code> that contains credit card transactions, <code class="highlighter-rouge">users</code> containing, well, users and <code class="highlighter-rouge">addresses</code> containing
addresses (to which a user has a shipping address).  We want to get a report of transactions that includes pre-tax amount, tax amount, username, and shipping zipcode. We only want to show successful transactions and only those that used PayPal and only for users who signed up recently.</p>

<p>Here’s how I would write this query:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">id</span>     <span class="k">AS</span> <span class="n">transaction_id</span><span class="p">,</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">amount</span> <span class="k">AS</span> <span class="n">pre_tax_amount</span><span class="p">,</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">tax</span>    <span class="k">AS</span> <span class="n">tax</span><span class="p">,</span>
  <span class="n">users</span><span class="p">.</span><span class="n">username</span>      <span class="k">AS</span> <span class="n">username</span><span class="p">,</span>
  <span class="n">addresses</span><span class="p">.</span><span class="n">zip</span>       <span class="k">AS</span> <span class="n">shipping_zip</span>
<span class="k">FROM</span>
  <span class="n">transactions</span>
<span class="k">JOIN</span>
  <span class="n">users</span>             <span class="k">ON</span> <span class="k">user</span><span class="p">.</span><span class="n">id</span>              <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">user_id</span>
<span class="k">JOIN</span>
  <span class="n">addresses</span>         <span class="k">ON</span> <span class="n">addresses</span><span class="p">.</span><span class="n">id</span>         <span class="o">=</span> <span class="k">user</span><span class="p">.</span><span class="n">shipping_address_id</span>
<span class="k">JOIN</span>
  <span class="n">transaction_types</span> <span class="k">ON</span> <span class="n">transaction_types</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">type_id</span>
<span class="k">WHERE</span>
  <span class="n">users</span><span class="p">.</span><span class="n">signed_up_at</span>    <span class="o">&gt;</span> <span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">interval</span> <span class="s1">'1 month'</span> <span class="k">AND</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">success</span>  <span class="o">=</span> <span class="k">true</span>                       <span class="k">AND</span>
  <span class="n">transaction_type</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">'PayPal'</span>
<span class="k">ORDER</span> <span class="k">BY</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">created_at</span>
<span class="p">;</span>
</code></pre>
</div>

<p>Here’s some great things about the way this SQL is typeset:</p>

<ul>
  <li>Each line has a lot of context since we aren’t using aliases.</li>
  <li>The <code class="highlighter-rouge">FROM</code> and <code class="highlighter-rouge">WHERE</code> clauses are easy to take-in as a whole, since we’ve used aggressive typography to line things up.</li>
  <li>Similarly, the <code class="highlighter-rouge">SELECT</code>’s use of <code class="highlighter-rouge">AS</code> even for fields whose names we aren’t changing means you can easily see all the column names in one
place.</li>
  <li>The trailing <code class="highlighter-rouge">AND</code> means an errant copy/paste will cause a syntax error, not an incorrect execution.</li>
  <li>In the <code class="highlighter-rouge">JOIN</code> clauses, the table with the <code class="highlighter-rouge">.id</code> is always on the left, creating a nice rhythm when reading the statement.</li>
</ul>

<p>When you have a lot of SQL to maintain—and you will if your application does anything complex—extra care toward formatting is crucial.  SQL is
notoriously hard to test, and the general lack of abstractions available make it hard to organize in any other way.</p>

<p>Also, let’s be honest, it’s fun as hell to bikeshed other people’s coding style :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, Angular, Postgres, Bootrap Second Edition in Beta!]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/10/19/angular-rails-postgres-bootstrap-second-edition.html"/>
    
    <updated>2016-10-19T08:09:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/10/19/angular-rails-postgres-bootstrap-second-edition</id>
    <content type="html"><![CDATA[<p>The second edition of <a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">Rails, Angular, Postgres, Bootstrap is in beta</a>.</p>

<p>There’s a lot of new content, mostly around Angular 2.</p>

<p>Of particular interest is that we aren’t using the Asset Pipeline, but are using Webpack.  I tried hard to get Angular 2 working with Sprockets, but as <a href="http://gilesbowkett.blogspot.com/2016/10/let-asset-pipeline-die.html">Giles
Bowkett</a> points out in a recent post, Sprockets is not a modern tool for modern
JavaScript.</p>

<p>The current beta is about 75% complete and includes:</p>

<ul>
  <li>Rails
    <ul>
      <li>End-to-end unit testing with PhantomJS</li>
      <li>Making your end-to-end tests work with Webpack</li>
    </ul>
  </li>
  <li>Angular 2
    <ul>
      <li>Setting up Webpack to serve CSS and JS</li>
      <li>Intro to Angular 2, including routing <em>and unit testing</em>.</li>
    </ul>
  </li>
  <li>Postgres
    <ul>
      <li>Using and testing Postgres check constraints</li>
      <li>Content-specific indexed (e.g. index on a lower-cased version of a field)</li>
      <li>Materialized Views</li>
    </ul>
  </li>
  <li>Bootstrap
    <ul>
      <li>Simple styling with Bootstrap</li>
      <li>Grid-based design with Bootstrap</li>
    </ul>
  </li>
</ul>

<p>Angular 2’s setup was painful, but it’s a much nicer framework than Angular 1, and requires a lot less plumbing and decision-making than React (based on my
limited experience with React).</p>

<p>The skills you learn in this book will let you solve a <em>wide</em> variety of problems quickly, cleanly, and efficiently, using modern and powerful tools.</p>

<p><a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">Buy the beta now!</a></p>

<p><em>Note: if you bought the first edition, stay tuned—I’m not sure what accomodations will be made</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: Why A Service Layer?]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/16/imagined-rails-6-active-service.html"/>
    
    <updated>2016-06-16T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/16/imagined-rails-6-active-service</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I think having explicit support for creating non-model service objects would be a good thing.</p>

<!-- more -->

<p>I hypothesized ActiveService, which is a lightweight library that basically allows you to specify the dependencies of an object to other objects.</p>

<p>For example, if you have code to charge a customer some money, that code depends on your payment processor’s Ruby library and also on your Rails mailer (to email a receipt).  Rather than simply use those two classes directly, you’d use Active Service’s imagined DSL:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Purchaser</span> <span class="o">&lt;</span> <span class="no">ActiveService</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">needs</span> <span class="ss">:braintree</span>
  <span class="n">needs</span> <span class="ss">:receipt_mailer</span>

  <span class="k">def</span> <span class="nf">purchase!</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">braintree</span><span class="p">.</span><span class="nf">charge_card</span><span class="p">(</span><span class="n">order</span><span class="p">.</span><span class="nf">customer</span><span class="p">,</span><span class="n">order</span><span class="p">.</span><span class="nf">amount</span><span class="p">)</span>
      <span class="n">receipt_mailer</span><span class="p">.</span><span class="nf">receipt</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="nf">deliver!</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This is admittedly not very Ruby and <em>definitely</em> not very Rails.  I also think this part of my imagined keynote has the weakest evidence to justify it.  But, I did want to talk about why I think this is useful, despite this not being very idiomatic Ruby.</p>

<p>Rails (and Ruby) code tends to involved hard-coding inter-object dependencies, usually by directly referencing global symbols.  In theory, this is bad because if you need to modify those dependencies it’s difficult to do.  It’s also bad, in theory, because it makes testing more difficult.</p>

<p>In practice, neither of these are real problems.  Ruby allows you to easily mock/stub/replace hard-coded dependencies in tests, and I’ve rarely encountered a case where the primary problem in making a change was in modifying a dependency on another class.</p>

<p>As a way to author classes, I don’t think Active Service is super-compelling.  I think it has some small benefits, and I would use it if it existed, but generally for the production code, it’s not a big win.</p>

<p>Where I think it <em>could</em> be a big win is for testing.</p>

<p>Because our class’ dependencies are made explicit, the testing framework can examine them and set up mocks/stubs/doubles/whatevers.</p>

<p>In theory, the test support included with ActiveService would be able to example a class’ dependent objects, look at their type, and stub out all their methods.  It could then allow the test author to make assertions about how those methods were called (and, of course, control what they do to orchestrate a test).</p>

<p>This should be a superior experience to using a mocking framework, since it would be baked into Rails and would be default behavior.  It would also encourage test isolation, basically by making it really hard to write an integration test-masquerading-as-a-unit test.</p>

<p>This somewhat flies in the face of what I had discussed about resource-orientation.  The existence of Active Serivce sends the message “code doesn’t go in model objects”.  I believe this very strongly, but it’s not The Rails Way.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: Doubling-down on Resource-based Design]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/15/imagined-rails-6-doubling-down-on-resource-based-design.html"/>
    
    <updated>2016-06-15T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/15/imagined-rails-6-doubling-down-on-resource-based-design</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended changes that encourage a more resource-based design.</p>

<!-- more -->

<h2 id="resourceful-design-is-cleaner">Resourceful Design is Cleaner</h2>

<p>I agree with DHH that <a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/">if you firmly stick to a resource-based design, and avoid RPC-style routes, you will have cleaner code and cleaner controllers</a>.  Because of this, It’s surprising to me that Rails requires you to use <code class="highlighter-rouge">config/routes.rb</code> for basic, resourceful routing.</p>

<p>To my mind, creating a class named <code class="highlighter-rouge">WidgetsController</code> in <code class="highlighter-rouge">app/controllers</code> that inherits from <code class="highlighter-rouge">ApplicationController</code> and contains a method <code class="highlighter-rouge">index</code> is a pretty strong and unambiguous message from a developer that they want the route <code class="highlighter-rouge">/widgets</code> to respond to an HTTP <code class="highlighter-rouge">GET</code>.</p>

<p>The way I see a lot of developers deal with this (admittedly tiny) boilerplate is to declare that a resource responds to all verbs, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>

<span class="n">resources</span> <span class="ss">:widgets</span>

<span class="c1"># app/controllers/widgets_controller.rb</span>
<span class="k">class</span> <span class="nc">WidgetsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@widget</span> <span class="o">=</span> <span class="no">Widgets</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="c1"># that's it</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This tells Rails that your application responds to all the magic seven routes for a widget, yet implements only one of them.  It makes <code class="highlighter-rouge">rake routes</code> confusing.  Developers do it because doing <code class="highlighter-rouge">resources :widgets, only: [ :show ]</code> is a pain in the ass.</p>

<p>I also see developers rush through their controller design and add RPC-style endpoints.  For example, if we wanted to
distinguish archiving a widget from deleting it, most developers would make an <code class="highlighter-rouge">archive</code> method.  If, instead, you created a
resource called <code class="highlighter-rouge">ArchivedWidgets</code> and accepted a POST, that would be more resourceful and likely much cleaner design.</p>

<p>If resourceful routes were derived from controllers, it would also make it very easy to spot deviations and have conversations around them.  In an ideal Rails application, <code class="highlighter-rouge">config/routes.rb</code> wouldn’t change that often, so if it did, it’s a big red flag to talk about the design of the feature that changed it.</p>

<p>One hard part about doing this is if your resource isn’t an ActiveRecord, there is a bit of friction you have to fight through.</p>

<h2 id="encouraging-non-activerecord-resources">Encouraging Non-ActiveRecord Resources</h2>

<p>If it were just as easy to create non-ActiveRecord resources as it were ActiveRecord-based ones, this would further encourage resource-based design.  There are two problems to solve here.</p>

<p>The first is how to provide a non-ActiveRecord object all the needed functionality that Rails’ form and URL helpers expect.  This can be achieved with Active Model, though Active Model is a pretty large interface.</p>

<p>The second problem is how to properly assemble such a resource using possibly disparate bits of Active Records.  In my post, I listed an “Account” resource as an example.  In our hypothetical application, the account view shows some user information, such as their name and email, but also information about their most recent order.</p>

<p>This is typically solved via some sort of presenter framework, and there are a <strong>lot</strong> of them.  Their existence says to me that Rails developers want such a framework, and Rails could greatly help us by providing one that was easy to use and full-featured.</p>

<p>The “presenter” situation in real Rails apps isn’t good.  Where I work, across our Rails apps, we have:</p>

<ul>
  <li>Hand-created presenters just using <code class="highlighter-rouge">class</code></li>
  <li>Presenters using our <a href="http://github.com/stitchfix/immutable-struct">immutable-struct</a> library</li>
  <li>View Models created by hand</li>
  <li>Mixins that add view-specific methods to ActiveRecords</li>
  <li>Methods in ActiveRecords only for displaying derived or formatted data in a view</li>
  <li>Classes that mix in some of Active Model’s modules (these were created before Rails 4 added a single ActiveModel mixin)</li>
  <li>A base presenter that delegates to a wrapped ActiveRecord using <code class="highlighter-rouge">method_missing</code>.</li>
</ul>

<p>My team has done a good job of keeping things consistent in many other areas, but none of these solutions are great, which is probably why we have used so many.</p>

<p>My post postulated a DSL to create these resources.  I’m not hooked on that, but I think the general needs developers have are:</p>

<ul>
  <li>works with form and URL helpers</li>
  <li>allows delegation of methods directly to other objects</li>
  <li>easily use Rails helpers to implement methods for derived or formatted values</li>
</ul>

<p>I don’t think ActiveModel is this.  ActiveModel is both too much and not enough, and I think it fails at encouraging both
resource-based design as well as another Rails-ism that most people ignore: model-driven design.</p>

<p>Up until Rails 4.2, a model was a database table was a model.  With ActiveModel this isn’t the case, however Rails has totally
failed at helping developers adopt model-driven design.</p>

<p>But, encouraging resource-oriented design for controllers, and providing a simple framework for creating non-ActiveRecord
models, I think this could be saved.</p>

<p>Taking our account example, suppose that the account screen wants to allow users to modify some of those details.  Suppose further that we show a user’s subscription frequency on this page, too, and that it is modifiable.</p>

<p>Most Rails developers would solve this in one of these ways:</p>

<ul>
  <li>Put the update logic in the controller - call into the <code class="highlighter-rouge">User</code> and then the <code class="highlighter-rouge">Subscription</code>.</li>
  <li>Create a service object or command object that does the work</li>
  <li>Put it all into either <code class="highlighter-rouge">User</code> or <code class="highlighter-rouge">Subscription</code></li>
</ul>

<p>The Rails way is to put the logic on a model, and if we could create an <code class="highlighter-rouge">Account</code> model just as easily as we created our <code class="highlighter-rouge">User</code>
and <code class="highlighter-rouge">Subscription</code> models, we could do this the Rails way, but without bloating our ActiveRecords:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActionResource</span>
  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
      <span class="n">user</span><span class="p">.</span><span class="nf">email</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:email</span><span class="p">]</span>
      <span class="n">subscription</span><span class="p">.</span><span class="nf">cadence</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:subscription_cadence</span><span class="p">]</span>
      <span class="k">if</span> <span class="n">valid?</span> <span class="c1"># provided by ActionResource</span>
        <span class="n">user</span><span class="p">.</span><span class="nf">save</span>
        <span class="n">subscription</span><span class="p">.</span><span class="nf">save</span>
      <span class="k">end</span>
    <span class="k">end</span>    
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This very much follows the Rails Way of “model-driven design” and/or Rails’ interpretation of what OO is.</p>

<p>To be clear, I don’t think this is necessarily the best way to write code in a Rails app, but this is <em>much</em> better than just throwing everything into your User model.  In fact, if a complex Rails app aggressively pursued this sort of design, it might result in fairly clean code, comprised of objects that don’t do all that much (which is what we’re all after by making services).</p>

<p>I can only assume this is the sort of thing DHH has in mind and why he tends to eschew any “blessing” of objects that aren’t models.  It’s too bad that there hasn’t been clearer instruction and explanation as to how it would work for non-trivial cases.  But, by encouraging a resource-based view of controllers and making it dead-simple to create non-ActiveRecord models, Rails might more naturally encourage the type of design it seems to favor.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: Out with JQuery, in With ES6]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6.html"/>
    
    <updated>2016-06-14T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended the removal of jQuery, and the change from CoffeeScript to ES6.</p>

<!-- more -->

<h2 id="es6-is-where-its-at">ES6 is Where It’s At</h2>

<p>I see the appeal of CoffeeScript.  I advocated hard for it on my team and we have a lot of code using it.  JavaScript ES5 is a very verbose language, wrought with easy-to-make errors.  CoffeeScript takes a lot of the pain away.  But, so does ES6.</p>

<p>ES6 has the virtue of being somewhat standard and supportable in modern browsers without compiling down to ES5, but it compiles down to ES5 just fine.  It’s the state of the art.  The reasons to use CoffeeScript all apply to ES6, but ES6 is more standard and has support for modules.  CoffeeScript (and the Rails asset pipeline) do not support modules in any direct way.</p>

<p>Modules in JavaScript are roughly equivalent to Ruby classes or perhaps gems, depending on how much you put in them.</p>

<p>Currently, Rails produces per-view CoffeeScript files similar to what it does with CSS.  So, for a widgets resource, we get <code class="highlighter-rouge">widgets.coffee</code>.  This does not create any artifact in JavaScript code related to widgets.  Similar to the sibling <code class="highlighter-rouge">.css</code> file, these files are compiled into one <code class="highlighter-rouge">application.js</code> at runtime and included <em>and executed</em> on every single page, not just the widgets pages.</p>

<p>Since it’s run on every page, you have to be careful that any code that’s executed and grabs DOM elements does so in a way that doesn’t inadvertenly grab slimilar DOM elements that might exist elsewhere in your application.  The bigger your app gets, the harder it is to be sure you’ve done this right.  The only way to be sure is to maintain extensive browser-based tests—something Rails provides no support for out of the box.</p>

<p>Where I work, we solve this by doing two things:</p>

<ul>
  <li>All code to be run on a controller action gets put into a shared namespace rather than executed, e.g. <code class="highlighter-rouge">window.StitchFix.widgets.show</code> is the function to run when the <code class="highlighter-rouge">show</code> page is rendered.</li>
  <li>We have boilerplate that sets up the necessary jQuery handlers to execute that function at the right time.</li>
</ul>

<p>But that’s not all!  Since the code gets wrapped in an immediately-invoked function, if you want to create library code to share, you have to put your code into <code class="highlighter-rouge">window</code>, which is global.  You have to be careful you don’t squash something else.  Typically, you create a namespace.  We use <code class="highlighter-rouge">window.StitchFix.lib</code> where I work.</p>

<p>ES6 modules would solve these problems much more cleanly, and are the way most front-enders are solving it.  Modules are the state-of-the-art, and ES6’s version is the standard.  Rails developers would benefit from this, and it would remove a source of bugs as well as several decisions to make about managing ap app’s JavaScript.</p>

<p>I’m also advocated removing jQuery and a new library to interact with the Rails back-end.</p>

<h2 id="jquery-out-railsjs-in">jQuery out, <code class="highlighter-rouge">rails.js</code> in</h2>

<p><strong>Note</strong>: Rails 5.1 will allegedly <a href="https://github.com/rails/rails/issues/25208">ship without jQuery</a>.  This is great news!  No word yet if the replacement will have user-facing features or will just implement Rails-provided features.</p>

<p>jQuery was great, and while it’s powerful, it is not very Rails-like, and requires developers to make a lot of unnecessary decisions when used in earnest.  It also encourages a style of coding where view logic is intermixed with DOM manipulation and event attachment.  It’s the equivalent of the “SQL statements in your <code class="highlighter-rouge">.php</code> files” that Rails got people away from.</p>

<p>It’s also hard to unit test jQuery code, because you must either do a full end-to-end browser test, or a <a href="http://naildrivin5.com/blog/2013/04/10/the-painful-world-of-javascript-testing.html">JavaScript unit test using duplicative markup fixtures</a>.  Rails provides no facilities for either of these types of tests.</p>

<p>With the removal of jQuery, Rails could reasonably ship a simple <code class="highlighter-rouge">rails.js</code> library to allow interacting with Rails endpoints in a Rails-like fashion.</p>

<p>Instead of requiring developers to use <code class="highlighter-rouge">$.ajax()</code>, <code class="highlighter-rouge">rails.js</code> could have a simple and straightforward mechanism to trigger Rails endpoints:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nx">Rails</span><span class="p">.</span><span class="nx">widgets</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">widgetId</span><span class="p">,</span> <span class="p">(</span><span class="nx">widget</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do whatever with widget</span>
<span class="p">});</span>

<span class="nx">Rails</span><span class="p">.</span><span class="nx">frobnosticators</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">frobnosticatorId</span><span class="p">,</span> <span class="p">(</span><span class="nx">frobnosticator</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// whatever</span>
<span class="p">});</span>
</code></pre>
</div>

<p>This would have a lot of advantages.  First, it’s a better API to Rails than jQuery’s <code class="highlighter-rouge">$ajax</code> function.  Second, it would be lightweight and dependency free, thus easily usable with other front-end frameworks if that meets the developer’s needs.  It could work easily with React, Angular, or Ember, if a developer chose to use those frameworks.  Finally, it defines the AJAX interface to a Rails app the same way <code class="highlighter-rouge">config/routes.rb</code> defines the HTTP interface.</p>

<p>This would remove a decision developers have to make, and simplify a very common interaction.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: No More Per-View CSS]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/13/imagined-rails-6-no-more-per-view-css.html"/>
    
    <updated>2016-06-13T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/13/imagined-rails-6-no-more-per-view-css</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended the removal of per-view CSS and the inclusion of an “OOCSS”-style framework.</p>

<!-- more -->

<p>When you create a new resource/controller/scaffold with Rails, say one called “widgets”, Rails creates a lot of files.  One of them is <code class="highlighter-rouge">widgets.css</code> and, because of how the asset pipeline works, this file is included in the CSS bundle.</p>

<p>This gives a very false sense of encapsulation.  In no way are the CSS classes in that file encapsulated and in no way are they applied only to “widgets”.  This is unlike the Ruby artifacts the generator produces, which <em>do</em> have encapsulation: the methods in <code class="highlighter-rouge">WidgetsControllers</code> are not global to all of your app, nor are the methods in <code class="highlighter-rouge">Widget</code>.  Even the stuff in <code class="highlighter-rouge">WidgetsHelper</code> isn’t global.</p>

<p>There are ways to do modular CSS.  They are nasty, but Rails could bake in support for them if it truly believed that modular CSS was the way developers should be working.</p>

<p>Modular CSS isn’t quite the state of the art, though perhaps it will be some day.  Instead, many front-end developers are using something called “Object-Oriented CSS” or OOCSS.  While the technique has nothing to do with objects and bears no resemblance to “object-oriented programming”, this is the term that’s been adopted.  And, it’s a vast depature from what many of us learned about how write CSS.</p>

<p>Instead of creating single classes per thing-you-want-to-style and then adding CSS to that class, you create single-purpose re-usable classes and apply them to your HTML.  Let me demonstrate.</p>

<p>Suppose we are styling the <code class="highlighter-rouge">widgets/show.html.erb</code> template.  We know that it will show the widget’s name as the most important thing on the page outside of the general application layout.  That’s enough to write some HTML.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>Since we’ll consider this content “self-contained”, we use <code class="highlighter-rouge">article</code>, and the correct tag for the most important header in an <code class="highlighter-rouge">article</code> is an <code class="highlighter-rouge">h1</code>, so we use that for the widget’s name.</p>

<p>Note that this completely describes the semantics of our content.  No additional markup is needed.</p>

<p>Now, suppose our designer (which is a role—we could be the designer, too) wants this displayed in bold, all uppercase, and using the second-biggest font in our <a href="http://alistapart.com/article/more-meaningful-typography">type scale</a>.</p>

<p>In “semantic” CSS (the type I’m discouraging in this post), we give our <code class="highlighter-rouge">h1</code> a single class, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"widget-name"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>We then use that class to attach our needed styles:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.widget-name</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span>     <span class="err">$</span><span class="n">font-size-2</span><span class="p">;</span>
  <span class="nl">font-weight</span><span class="p">:</span>    <span class="nb">bold</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Note again that the addition of the <code class="highlighter-rouge">widget-name</code> class adds no semantics not already present in the original HTML.  It merely exists for us to use a hook for styling.  If we didn’t need to style it, we would have no reason to add that class.</p>

<p>In OOCSS, we work in the opposite direction.  We start from a set of small, re-usable classes that we can apply and use anywhere.  So, we’d have CSS like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.f1</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-1</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.f2</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-2</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.f3</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-3</span><span class="p">;</span> <span class="p">}</span>

<span class="nc">.fwb</span> <span class="p">{</span> <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span> <span class="p">}</span>

<span class="nc">.ttu</span> <span class="p">{</span> <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span> <span class="p">}</span>
</code></pre>
</div>

<p>With these re-usable classes, we can then style our widget header like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"f2 fwb ttu"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>Since our original HTML contains sufficient semantics for the content, these display-specific classes have no effect on the semantics of our markup.  Remember, we have no reason to add classes to this markup in order to clarify the semanatics.  The only reason we would ever have to add classes to this markup is to afford visual styling.</p>

<p>I know what you’re thinking.  This is weird.  It’s wrong!  We’re mixing presentation and content!  This will not stand!</p>

<p>I had the same reactions. But, this way of styling markup is better than the “semantic” way we’ve all learned.
I’ve been working this wawy for over three years and have <em>very</em> rarely had to actually write any CSS, and have very rarely become confused about why my pages were laying out the way they were.</p>

<p>You may think that in a sizeable app, you’d end up duplicating a lot of classes.  For example, what if all of our headers were to be bold, upper-case, and set in the second-largest font?  Wouldn’t we have <code class="highlighter-rouge">f2 fwb ttu</code> littered everywhere?</p>

<p>Don’t forget: Rails includes a powerful templating framework that supports partials.  You can easily remove duplication by ust using that.</p>

<p>Further, because this type of styling doesn’t use the cascade, it’s always very clear why an element is being rendered in the browser a certain way and what the application of these classes will do to an element. Once you learn the terse classnames, you can look at any element and see immediately what the intention is for how it is to be displayed.</p>

<p>This is a deep topic and you should read <a href="http://mrmrs.io/writing/2016/03/24/scalable-css/">this post by Adam Morse</a> and/or <a href="http://nicolasgallagher.com/about-html-semantics-front-end-architecture/">this post by Nicolas Gallagher</a>.  If you have any feelings or opinions about what I’ve written here, you need to read these posts first.  And then take your issue up with their authors.  I’m just the messenger.</p>

<p>And the message is this:  writing CSS this way is awesome.  It’s empowering.  It reduces the decisions you must make down to only those about your design and not how to structure your CSS.  It is very much the Rails Way.</p>

<p>I specified <a href="http://tachyons.io">Tachyons</a> as it is a small full-featured framework that allows you to work this way.  You could also use <a href="http://www.basscss.com/">BassCSS</a>.  If Rails should include CSS and have an opinion on how to write it, either of these frameworks would be great.</p>

<p>If, on the other hand, Rails doesn’t believe in having an opinion on CSS, it should not create blank <code class="highlighter-rouge">.css</code> files that imply encapsulation which doesn’t exist nor should it include SAAS.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why did I Recommend What I Did for Rails 6?]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html"/>
    
    <updated>2016-06-12T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6</id>
    <content type="html"><![CDATA[<p>In my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote for Rails 6</a>, I imagined a lot of wacky new features for Rails.  My Rails 6 had lots of big changes, and I thought it might be interesting to dig into why I think those changes are useful for Rails.</p>

<!-- more -->

<p>First, I very much feel that Rails should continue to have opinions, and to embody those opinions in the framework.  It seems logical for me that as the shared body of knowledge around web development increases, Rails should bring the best of those practices to the framework.</p>

<p>I view Rails’ strength as removing decisions that aren’t relevant to getting your work done.  For example, I don’t care what the name of a primary key is, I just need it to be consistent in the system. Therefore, I shouldn’t have to make a decision about it.  Similarly, I don’t want to have to decide the names of the directories where code goes, I’m fine if there is a consistent, framework-enforced standard.</p>

<p>To my mind, then, it stands to reason that as more and more practices become common, Rails should incorporate them into the framework, each time removing a decision a future developer has to make that isn’t relevant to the task at hand.</p>

<p>A great, and simple example is presenters.  Developers have recognized that views often need to expose more data than is in an Active Record and that sometimes that data is view-specific.  There are myriad gems to address this.  They are all more or less the samed, and they all seem to indicate that developers are making pointless decisions—which presenter framework or pattern should I use?  If Rails adopted such as mechanism, it would remove that decision for most developers and be a win for the framework and its users.</p>

<p>So, let’s explore my imagined features/changes to Rails.  We’ll go in order of the keynote, and each bit will be its own blog post.</p>

<ul>
  <li><a href="/blog/2016/06/13/imagined-rails-6-no-more-per-view-css.html">No More Per-View CSS</a></li>
  <li><a href="/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6.html">jQuery out, ES6 in + rails.js</a></li>
  <li><a href="/blog/2016/06/15/imagined-rails-6-doubling-down-on-resource-based-design.html">Encouraging Resource-based Design</a></li>
  <li><a href="/blog/2016/06/16/imagined-rails-6-active-service.html">Why a Service Layer?</a></li>
</ul>

<p>Check back for updates.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Use the UNIX Environment Directly]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/10/dont-use-ENV-directly.html"/>
    
    <updated>2016-06-10T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/10/dont-use-ENV-directly</id>
    <content type="html"><![CDATA[<p>Getting configuration from the UNIX environment is a hallmark of <a href="http://12factor.net/">12-factor application design</a>, and is a great practice.  Problems arise, however, when your code is littered with direct references to it.  This is because the UNIX environment is a very poor database, but we need to treat it as a better one.</p>

<!-- more -->

<p>Instead of having your code that needs configuration grab values directly from the environment, you should use a lightweight abstraction layer that your code depends on.  This has three advantages:</p>

<ul>
  <li>It allows you to deal with the fact that the UNIX environment is essentially typeless.</li>
  <li>It’s a centralized place for all default values needed for optional settings.</li>
  <li>It’s a single place for things that might need to be configurable, but aren’t yet.</li>
</ul>

<h2 id="environment-variables-are-strings">Environment Variables are Strings</h2>

<p>Most programming languages vend environment variables as strings.  This leads to errors like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">]</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>In Ruby, all non-nil, non-false values are “truthy”.  Since <code class="highlighter-rouge">ENV#[]</code> will only ever return either <code class="highlighter-rouge">nil</code> or a String, the “Flag disabled” path wil never execute:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=false ./test.rb
Flag enabled!
</code></pre>
</div>

<p>This means that you have to coerce your environment variables to a type you want.  Often, developers do this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"true"</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This is somewhat verbose, easy to mess up, and creates other problems when you have someone who prefers “0” and “1” instead of “true” and “false”:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=1 ./test.rb
Flag disabled.
</code></pre>
</div>

<p>If you have a layer between your code and the environment, you can handle that in a common way.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some_flag?</span>
    <span class="p">(</span><span class="s2">"1"</span><span class="p">,</span><span class="s2">"true"</span><span class="p">).</span><span class="nf">include?</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">].</span><span class="nf">downcase</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># or maybe</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some_flag?</span>
    <span class="n">boolean</span><span class="p">(</span><span class="s2">"SOME_FLAG"</span><span class="p">)</span>
  <span class="k">end</span>

<span class="kp">private</span>

  <span class="k">def</span> <span class="nf">boolean</span><span class="p">(</span><span class="n">env_var</span><span class="p">)</span>
    <span class="sx">%("1","true")</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="n">env_var</span><span class="p">].</span><span class="nf">downcase</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Your code then becomes much cleaner:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">Settings</span><span class="p">.</span><span class="nf">some_flag?</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>It also works :)</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=1 ./test.rb
Flag enabled!
&gt; SOME_FLAG=True ./test.rb
Flag enabled!
&gt; SOME_FLAG=false ./test.rb
Flag disabled.
</code></pre>
</div>

<p>With an abstraction layer, we can also handle default values for optional environment variables.</p>

<h2 id="centralizing-defaults">Centralizing Defaults</h2>

<p>Suppose we want to allow the configuration of a timeout for talking to our payment processor.  We have an idea of what the right value is, but we may need to tweak it in production, so we don’t want to have to do a code change every time.  So, we’ll grab it from the environment, but set a reasonable default.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">payment_processor_timeout</span>
    <span class="no">ENV</span><span class="p">[</span><span class="s2">"PAYMENT_PROCESSOR_TIMEOUT"</span><span class="p">].</span><span class="nf">try</span><span class="p">(</span><span class="ss">:to_i</span><span class="p">)</span> <span class="o">||</span> <span class="mi">2000</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Not we have to use <code class="highlighter-rouge">try</code> because <code class="highlighter-rouge">nil.to_i</code> returns 0, not <code class="highlighter-rouge">nil</code>.  So, we’re saying “if a value has been set, coerce it to an integer, otherwise use 2000”.</p>

<p>With such a system set up, you can use this to centralize all your application’s configurable bits, even if you don’t need or want them overridden by the environment.</p>

<h2 id="centralizing-configuration">Centralizing Configuration</h2>

<p>For example, you might be using S3 to store files, and want all code that uses S3 to use the same bucket, but you have no real need to configure that bucket in the environment.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">s3_bucket_name</span>
    <span class="s2">"my-app-files"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This now means the code that needs the bucket name can just ask the settings for it, and if you later need it to be configurable, it can easily be extracted from the environment.</p>

<h2 id="isnt-this-a-solved-problem">Isn’t this a solved problem?</h2>

<p>We use the <a href="https://github.com/modcloth/mc-settings">mc-settings</a> gem, that uses an ERB-ized YAML file:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="s">some_flag</span><span class="pi">:</span> <span class="s">&lt;%= ("1","true",).include?(ENV["SOME_FLAG"].downcase) %&gt;</span>
<span class="s">payment_processor_timeout</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_TIMEOUT"].try(:to_i) || 2000 %&gt;</span>
<span class="s">s3_bucket_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">my-app-files"</span>
</code></pre>
</div>

<p>This allows us to write <code class="highlighter-rouge">Setting.some_flag</code>.  It even supports nested settings, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="s">payment_processing</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">timeout</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_TIMEOUT"].try(:to_i) || 2000 %&gt;</span>
  <span class="pi">-</span> <span class="s">api_key</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_API_KEY"] %&gt;</span>
</code></pre>
</div>

<p>We can then do <code class="highlighter-rouge">Setting.payment_processing(:timeout)</code> to access the configured value.</p>

<h2 id="conclusions">Conclusions</h2>

<p>Don’t litter your code with references to the environment.  It’s easy to create bugs because the environment is a somewhat degenerate settings database.  It also makes your code harder to follower because you are using <code class="highlighter-rouge">SCREAMING_SNAKE_CASE</code> instead of nice, readable methods.  It also makes it hard to centralize type coercions and default values.</p>

]]></content>
  </entry>
  
</feed>
