<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2016-03-02T09:09:03-05:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[More on Leveling Up]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/03/02/more-on-levelling-up.html"/>
    
    <updated>2016-03-02T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/03/02/more-on-levelling-up</id>
    <content type="html"><![CDATA[<p>This interesting piece from Will Hughes titled <a href="https://medium.com/@willh/how-to-level-up-as-a-developer-87344584777c#.nxkkh5mz6">How to Level up as a Developer</a> was a great read, but it focuses too much on
<a href="http://naildrivin5.com/blog/2013/12/03/org-charts-and-diff-production.html">“developer-as-producer-of-diffs”</a> and not enough on “developer-as-solver-of-problems”.  Although I’ve written in detail in my book <a href="http://theseniorsoftwareengineer.com/">“The Senior
Software Engineer”</a> what I think you need to do to be a great developer, I’m going to augment and modify some of the specific points Will makes.</p>

<!-- more -->

<h2 id="level-1-reduce-unnecessary-distractions">Level 1: Reduce Unnecessary Distractions</h2>

<p>I totally agree with the advice here in spirit, however the guidance given isn’t quite right for me.  Chapter Ten in my book is titled “Be Responsive and Productive” and it
addresses this issue.  First, you have to understand that your job as a developer is not entirely about producing code.  As a developer, you have
expertise that no one else has, and you must often share that expertise in ways <em>other</em> than writing code.  This means emails, conversations, and, yes,
meetings.</p>

<p>If you push back on “all recurring meetings” as the developer quoted in Will’s piece maintains, you will limit your effectiveness and end up being a ticket-taker with no real agency or input into the work you are
doing.  Here are the regular meetings developers at Stitch Fix have:</p>

<ul>
  <li>1-1 with their manager (weekly or every-other-week)</li>
  <li>All-team tech meeting (every other week)</li>
  <li>All-hands engineering meeting (every other week)</li>
  <li>Team roadmap planning with business partners (every week)</li>
  <li>Sync with business partners on project (weekly)</li>
</ul>

<p>This may seem like a lot, but these meetings are crucial.  Having dedicated time with your manager every week is important.  So is having a
weekly time to talk with the people for whom you are building software about priorities.  And if you aren’t part of these discussions, they are still going
to happen, but they will lack your input.  That could go bad for you.</p>

<p>That said, some people <em>do</em> default to meetings instead of trying to use email.  In those cases, it’s fine to “push back” and try to solve the issue
asynchronously, but you also have to understand that not everyone is effective at written communication.  So, while you could lead such a person through a
multi-email exchange to get to the issue ta hand, it might be easier to have a 10 minute conversation.</p>

<p>The rest of the stuff in “Level 1” is great.  As I’ve mentioned many times, using Test-driven development is a great way to save state when you need to get
interrupted.  It’s also worth spending time <a href="http://naildrivin5.com/blog/2013/07/23/agile-email-management.html">getting really good at email</a> so it’s never a distraction.</p>

<h2 id="level-2-write-better-diffs">Level 2: Write “Better” Diffs</h2>

<p>While I don’t disagree with the advice here, it misses the forest for the trees.  Your job as a developer is not to get your code changes “easily
accepted”.  Your job is to solve the problem in front of you, and sometimes it takes a larger diff to do that.  If you focus, instead, on breaking up your
work as a series of small “digestible” diffs, there will never be an occasion to review your <em>actual</em> change.  It might be possible to ship something
terribly designed—or just plain buggy—by obscuring the true nature of what you are doing as a bunch of small diffs.</p>

<p>Of course, spending weeks in a hole and producing an enormous diff is also not good.  You should strive to deliver a series of tiny solutions to tiny
problems, but at the end of the day, the size of your diff will be commensurate with the size of the problem you are solving (or bigger, depending on the quality of the codebase).  Do not optimize for getting a
thumbs-up.</p>

<p>In terms of getting feedback, it highly depends on the culture of your company, but there are three techniques I find useful:</p>

<ul>
  <li>Write clean code as much as possible.  Spend a bit of extra time <a href="http://naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop.html">making it right</a>.</li>
  <li>Write tests. Will calls this out, but couches it as optional.  Tests are not optional.  They are the way you know your code works as intended.</li>
  <li><a href="http://naildrivin5.com/blog/2012/04/02/a-protocol-for-code-reviews.html">Comment on your diff/pull request</a> before asking for feedback.  This allows you to attach plain language explanations of what’s going on without using code comments. It also allows you to ask pointed questions about specific bits of code, which helps reviewers know what to look for.</li>
</ul>

<p>The advice in “Communicate” is spot-on.  Throwing up a diff without context does no one any good.  Spend 10 minutes of your life making things easier for your team-mates.</p>

<p>Which leads to Will’s Level 3.</p>

<h2 id="level-3-being-a-team-player">Level 3: Being a Team Player</h2>

<p>This is all good, particularly, “Admit What you Don’t Know”.  You should become very comfortable with this, because a) you’ll learn things this way and b) it’s a good signal to a code’s author that maybe there code isn’t clear enough.</p>

<p>I would also not shy away from “nitpicky” code comments.  If a change is mostly pretty good and there are no major issues, nitpicky comments about
formatting and consistency are fair game.  Most developers want their code to be consistent like most writes want to be using proper grammar and spelling.
Point it out—politely—and most developers will fix.  If they disagree, don’t die on that hill, but most of the time it’s appreciated.  That said, if a pull request or diff has larger issues, do not waste time on
nitpicky stuff; let the author deal with the larger issues first.</p>

<h2 id="level-4-organize--hustle">Level 4: Organize &amp; Hustle</h2>

<p>This section is great, too.  I want to expand on “work/life balance”.  You need to establish early on what the expectation is of the hours you should be
online and responding to email or interacting with others.  Whenever that is, you absolutely <em>must</em> do your best to be present during those hours.
<em>Hopefully</em>, they are fewer than eight hours, so you can allocate the rest of your work time to whenever suits you best.</p>

<p>Beyond that, you have to set boundaries with your co-workers and manager about when you will and won’t be working.  Unless your manager is <em>very</em>
conscientious, they will not complain about you working “too many” hours.  You have to limit it.  You can do this by simply setting strict work hours.  Or,
if you tend to work at different or odd times of the day, be vocal about that.  Make sure everyone knows that e.g. just because you were working at
10:00pm, that didn’t mean you were working all day.</p>

<h2 id="parting-thoughts">Parting Thoughts</h2>

<p>I say this a lot, but the best thing you can do as a developer is to understand the problem you are trying to solve.  And be honest about it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dishonest Abstractions are Not Abstractions]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/02/22/dishonest-abstractions-are-not-abstractions.html"/>
    
    <updated>2016-02-22T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/02/22/dishonest-abstractions-are-not-abstractions</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/erniemiller">Ernie Miller</a> started a tweetstorm on Friday that really rang true to me, about how certain abstractions are “dishonest”.  In my mind, the dishonesty
is calling them abstractions in the first place.</p>

<!-- more -->

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I&#39;ve been thinking a lot about honesty in software development lately. Not just honesty from people, but from technology.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700705128484106240">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">I think this general sense of honesty is at the core of my feelings about, e.g., HAML/SASS/CoffeeScript vs ERB/SCSS/ES2015.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700706138581561345">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I had embraced them for their aesthetic appeal, but realized that I was really running from the technology I perceived them to replace.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700711070919426048">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">But it was very surprising to me, then. I&#39;d get a stack trace listing JavaScript I hadn&#39;t written, or inspect an unexpected HTML element.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700712371606704128">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>These tweets really spoke to me, but I don’t think abstractions are “lies” per se.  Rather, I feel that the technologies listed (and others like them) are
just really weak.  They don’t deliver complete solutions to the problems they are there to solve and are built on poor (or no) abstractions, such that they
require more of the user than they ultimately give.</p>

<p>CoffeeScript is the simplest example of this. It’s a programming language that produces stack traces in a different programming language.  It requires almost the same amount of code as JavaScript and it doesn’t obviate the need to completely understand JavaScript.  Why would I want this?</p>

<p>In a sense, HAML, SASS, CoffeeScript, etc. are nothing more than sophisticated <code class="highlighter-rouge">sed</code> scripts (or macro languages).  But this problem isn’t specific to
front-end technologies.  AREL and Rails Migrations are two back-end examples.  They profess to “save you” from SQL, but you really can’t use them without
understanding SQL, you can’t access the full power of your database with them, and you can’t debug what they are doing without knowing SQL.</p>

<p>Compare this to writing C.  Do you need to know assembly language to write C?  For almost all cases, the answer is “no”.  Sure, there may be cases where you have to dig into the assembly to figure out a problem, but these are vanishingly small.</p>

<p>Compare that to AREL or CoffeeScript where, as a matter of course, you must break through the “abstraction” to find out what’s going on.  You spend almost as much time in the “assembly language” (SQL, JavaScript), as you do in the “higher-level abstraction”.</p>

<p>The scare quotes are intentional: to call HAML, CoffeeScript, and friends “abstractions” is to almost render the term meaningless.  They don’t
abstract anything away from you on any real level.</p>

<p>In <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">my book</a>, I encourage the reader to use JavaScript and learn SQL, because the tools given to you by Rails aren’t abstractions—they are extra things
to learn that provide at best a marginal increase in productivity, and that productivity only applies during the least time-consuming part of software
development: typing in source code.</p>

<p>These tools don’t meet <a href="http://naildrivin5.com/blog/2016/01/13/hierarchy-of-software-needs.html">any higher-order need</a> a developer has.  They provide the ability to execute code only and when compared to the
technologies they replace, they appeal more to aesthetics than the ability to better deliver quality software.</p>

<p>Web front-end technologies seem woefully stuck in this quagmire.  React gives you the ability to type markup that looks like a higher-order abstraction, but
it’s still just a macro language for producing HTML that you must debug directly.  Yes, source maps and other browser extensions exist to make this less
painful, but your job at the end of the day is still trying to figure out what events are firing on what DOM elements, and how CSS is being applied to them.</p>

<p>I’m not sure what it will take to produce truly higher-level abstractions for powerful technologies like JavaScript and SQL.  If the tools we have now are
guilty of dishonesty, it’s mostly in overstating what problems they really solve.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There is no Happy Path in Programming]]></title>
    
    <link href="http://multithreaded.stitchfix.com/blog/2016/01/29/no-happy-path-in-programming/"/>
    
    <updated>2016-01-29T09:02:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/01/29/there-is-no-happy-path-in-programming</id>
    <content type="html"><![CDATA[<p>Writing on the Stitch Fix blog about how feature and product design <a href="http://multithreaded.stitchfix.com/blog/2016/01/29/no-happy-path-in-programming/">can’t just focus on the “happy path”</a>, but must account for, among other things, network
flakiness:</p>

<blockquote>
  <p>The other thing I’ve realized is that you cannot address these issues with entirely technical solutions. You have to account for these realities in the design of your product.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, Angular, Postgres, and Bootstrap is in print!]]></title>
    
    <link href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap"/>
    
    <updated>2016-01-22T08:11:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/01/22/rails-angular-postgres-bootstrap-in-print</id>
    <content type="html"><![CDATA[<p>About a year ago, <a href="https://pragprog.com">PragProg</a> approached me to see if I was working on anything book-worthy.  I’d just created https://angular-rails.com to document
the pain of configuring Rails to do something it clearly didn’t want to do—let you write an application with lots of front-end.  Meanwhile, I’d been
learning more and more how great Postgres is.</p>

<p>The result is my new book “Rails, Angular, Postgres, and Bootstrap: Powerful, Effective, and Efficient Full-Stack Web Development”.  It’s been in beta for
a while, but official print verison is now for sale.</p>

<p>You can <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">buy it</a> now and start embracing the <em>full</em> stack of web development using
some awesome tools that will serve you well for years to come!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hierarchy of Software Needs]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/01/13/hierarchy-of-software-needs.html"/>
    
    <updated>2016-01-13T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/01/13/hierarchy-of-software-needs</id>
    <content type="html"><![CDATA[<p>If you regularly work with web technologies, you’ve no-doubt pulled your hair out dealing with the technologies used for front-end development (and, let’s be honest, back-end development, too :).  Almost everything about front-end work feels terrible, from the weakness of JavaScript as a language, to the myriad half-documented tools that all somehow manage to do less than <code class="highlighter-rouge">make</code>, to the absolute bizarre notion that we are building user interfaces with technologies designed to write term papers.</p>

<p>But <em>why</em>  are these experiences unpleasant?   I would argue simply that they don’t fully meet our needs as programmers.  And we can think about those needs as
a hierarchy, each need building on the need below it.</p>

<!-- more -->

<h2 id="hierarchy-of-needs">Hierarchy of Needs?</h2>

<p>If you aren’t familiar with <a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs">Maslow’s Hierarchy of Needs</a>, it describes a psychological hierarchy
of increasingly powerful <em>needs</em> that, when met, contribute to healthy mental well-being.</p>

<p>At the bottom are basic needs like air, food, and water—called <em>physiological needs</em>—that we all need to merely be alive.  The next step are <em>safety needs</em>,
   which we fulfill after our physiologic ones.  These are needs like physical or financial safety, the absence of which can cause stress and anxiety.</p>

<p>Next is our need for <em>love and belonging</em> which contribute to our abililty to form relationships with others.  After this comes <em>self-esteem</em> or self-respect,
which allow us to feel a sense of contribution and value.</p>

<p>The top of the hierarchy is <em>self-actualization</em>, which represents our desire and ability to achieve all that we can.</p>

<p>What I’ve laid out is an <em>extremely simplified summary</em> and it’s for <em>context only</em>.  It’s a framing concept for talking about the <em>Hierarchy of Programming
Needs</em>.</p>

<h2 id="our-needs-as-programmers">Our Needs as Programmers</h2>

<p>Here are our needs as programmers.  The bottom are our most basic needs, which must be met before needs higher up the pyramid can be met.</p>

<p><img src="/images/programming_hierarchy_of_needs.png" alt="Hierarchy of Programming Needs" /></p>

<p>The most basic thing we need as programmers is the ability run, or <em>execute</em>, our code.</p>

<h3 id="need-to-execute-code">Need to Execute Code</h3>

<p>Code that can’t be executed might as well not exist.  It can never serve much purpose if we can’t run it.  Running code is like breathing—there’s no job
called “Programmer” if code can’t be executed.</p>

<p>Just as with our physiological needs, our executable needs as programmers can be met with varying degrees of utility.  Technically, loading a BASIC program
from a floppy disk and typing <code class="highlighter-rouge">RUN</code> meets our need.  But not in the same way as a REPL that has a command-line history and code completion.</p>

<p>Either way, if all we can do is run code, we won’t get far.  Anything remotely complex will be a disaster of confusion, un-maintainability, and errors.  We
need to manage that complexity, and the most basic way to do that is by creating abstractions.</p>

<h3 id="need-to-create-abstractions">Need to Create Abstractions</h3>

<p>It’s difficult to understand and modify a large codebase.  By creating abstractions we have a hope of doing so.  An abstraction is any way to create a
higher-level construct.  It could be as simple as <a href="https://en.wikipedia.org/wiki/Decomposition_(computer_science)">functional decomposition</a> or creating <a href="https://en.wikipedia.org/wiki/Data_type">data
types</a>.  It could be as complex is an advanced type system, pattern matching, or inheritance.</p>

<p>Regardless, we have no hope of successfully writing and managing computer software without some way to create and use abstractions.  As with our need to
execute code, our need to create abstractions can be met in a variety of ways.  Technically, jumping to a pre-defined memory location that contains a subroutine is a form of abstraction.  This is far less convenient than calling a named function.</p>

<p>When our need for abstracting code is met, we can accomplish a great deal.  But the moment we must collaborate with another person (including ourselves in the future!), we’ll run into problems.  With two distinct minds working on a piece of software, there will be different ways to accomplish things, different possible abstractions.  This leads to inconsistency, which a codebase hard to deal with, as you must understand more than you need to.</p>

<h3 id="need-for-consistency">Need for Consistency</h3>

<p>Sometimes, the lack of consistency is merely annoying. Sometimes, however, it can be disastrous.  We’ve all heard about the <a href="https://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure">Mars probe that crashed because half the team was using Metric and the other half Imperial</a>.  Their need for consistency wasn’t being met, and all the great abstractions in the world couldn’t help.</p>

<p>The way to manage consistency is to establish <em>conventions</em>, but they need to be put into code.  The need for consistency is only met when it’s difficult (or
ideally impossible) circumvent conventions and be inconsistent.</p>

<p>For example, here are two ways to define a function in JavaScript:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</code></pre>
</div>

<p>If we wish to use the latter form as our convention, we have no way to enforce or even encourage it in JavaScript.  In this regard, JavaScript is not meeting
our need for consistency.</p>

<p>Think about the Mars probe.  Ideally, it would not have been possible to use two measurement systems.  Their programming environment had no way to meet that
need and a timely, expensive scientific research mission utterly failed.</p>

<p>Take a moment here to reflect.  It was pretty hard to imagine <em>any</em> programming environment, tool, or language that didn’t meet our first two basic needs of executing code and creating abstractions.  But now, we’re starting to see that our deeper needs (like consistency) aren’t that easy to meet.</p>

<p>But, supposing we <em>could</em> meet our need for consistency.  This would lead to many teams and many codebases, all self-consistent and easy to work in, but all
different.  Working on a new system requires starting over and learning many new things in order to be productive.</p>

<p>While some of this is natural—the domain of a new system might be unfamiliar—some of it is not (e.g. most systems need logging).</p>

<p>The reality is that teams and software systems face many of the same problems, and those problems often have few, or even one, reasonable solution.  We spend time going to conferences and reading books &amp; blogs in order to learn about these solutions, to share them with others, and try to pass them on to the next generation.  We have a need for collective experience.</p>

<h3 id="need-for-collective-experience">Need for Collective Experience</h3>

<p>How many teams are suffering through the exact same problem right now?  How many are re-discovering the same solution to the same problems that have been
solved years earlier?</p>

<p>If you’ve payed close attention during the birth of new and popular software tools, you’ve seen this.  Ruby on Rails’ journey from upstart framework to accepted
enterprise software platform has included (but, to be fair, not been <em>dominated</em> by) a pointless journey in re-learning many lessons of the previous decade’s Java and J2EE developers (who themselves no-doubt re-learned lessons from the previous generation of C++ developers). NodeJS and the ecosystem of front-end tooling is repeating this.</p>

<p>This isn’t a knock on these communities: this is a <em>hard</em> need to meet.  The current state of the art—reading books, using tried-and-true-but-boring
programming languages, and going to
conferences—isn’t cutting it.  Have you ever created a log format for your application log?</p>

<p>When our need for collective experience isn’t met, it can be worse than merely re-implementing solutions and re-learning lessons.  We often regress.</p>

<p>By any objective measure, XML and a Schema is more powerful than JSON.  Yet, XML is the butt of many jokes and is generally avoided by many developers.  Those
same developers are writing documentation to explain that an <code class="highlighter-rouge">address</code> key in a JSON payload should map to an object containing <code class="highlighter-rouge">street</code>, <code class="highlighter-rouge">city</code>, <code class="highlighter-rouge">state</code>, and <code class="highlighter-rouge">zip</code> keys (all Strings) so everyone knows what to expect when making an API call.</p>

<p>This was 100% solved <em>in software</em> in the late 90’s.  We’re now seeing stuff like <a href="http://json-schema.org/">JSON Schema</a> crop up as everyone realizes that
many of XML’s features are actually really useful.</p>

<p>But the failure here isn’t <em>those developers</em> using JSON.  We all embraced JSON because while XML as a specification and a format is great, the ways in which
we interacted with it were (and are) terrible.  The community around XML was unable to meet our need for collective experience.</p>

<p>Like I said, this is a <em>hard need to meet</em>.  It feels almost impossible.</p>

<p>But, thinking about this need can be instructive.  It can drive us to make better decisions about software design, about tool design, about language design!
Why does the Go language have first-class support for <a href="https://gobyexample.com/goroutines">goroutines and channels</a>?  Because the language designers are
trying to pass on their collective experience about how to deal with concurrency.</p>

<h2 id="and-now-back-to-reality">And now, back to reality</h2>

<p>Think about the tools you use each day when programming.  How well do they meet your needs as a programmer?  JavaScript <em>barely</em> meets our need for
abstractions.  CSS doesn’t even meet that!</p>

<p>Think about Ruby on Rails: it bakes in many conventions.  Have you ever been on a Rails project and discussed how to name database keys?  Or how
to name controllers?  It is meeting our need for consistency (in those areas :).</p>

<p>And UNIX: The convention around “everything is a stream of bytes” is not only baked into the shell and the included tools, but it’s the foundation of I/O in almost every language in use.  Talk about collective experience!</p>

<p>But, what does this all mean?</p>

<p>On the one hand, we are far too accepting of tools that barely meet our needs.  But, I also think that if we start to think
about what our needs are, it can drive us to make better decisions about the software we use and the code we write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Talk from Full Stack Toronto 2015]]></title>
    
    <link href="https://www.youtube.com/watch?v=QbUZnb0rPdY&feature=youtu.be&a"/>
    
    <updated>2015-11-30T00:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/30/my-talk-from-full-stack-toronto-2015</id>
    <content type="html"><![CDATA[<p>My talk from <a href="https://fsto.co/">Full Stack Toronto</a>, called “Rails, Postgres, Angular, and Bootstrap - The Power Stack” is up, where I make the case for using not just using a CSS framework, an MVC framework, a
middleware framework, and an amazing database, but for using Bootstrap, Angular, Rails, and Postgres <strong>and</strong> using them together.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/QbUZnb0rPdY" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All my books are on sale!]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/11/27/my-books-on-sale.html"/>
    
    <updated>2015-11-27T07:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/27/my-books-on-sale</id>
    <content type="html"><![CDATA[<p>Today through next Tuesday, all three of my books are on sale for 40% off, with the code <strong>turkeysale2015</strong>:</p>

<ul>
  <li><a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">Rails, Angular, Postgres, Bootstrap: Powerful, Effective, Efficient Full-stack Web Development</a> ($14.40 for the beta ebook!)</li>
  <li><a href="http://theseniorsoftwareengineer.com/">The Senior Software Engineer: 11 Practices of an Effective Technical Leader</a> ($15!)</li>
  <li><a href="https://pragprog.com/book/dccar2/build-awesome-command-line-applications-in-ruby-2">Build Awesome Command-Line Applications with Ruby 2</a> ($13.20 for the ebook!)</li>
</ul>

<p>Just use code <strong>turkeysale2015</strong> at checkout to get 40% off!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Validations vs Postgres Check Constraints]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/11/15/rails-validations-vs-postgres-check-constraints.html"/>
    
    <updated>2015-11-15T00:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/15/rails-validations-vs-postgres-check-constraints</id>
    <content type="html"><![CDATA[<p>Before using Postgres, I would have to rely heavily on Rails validations to ensure data integrity—MySQL simply doesn’t provide the tools
to do this.  This always felt wrong.  Outside of rogue processes connecting to the database, there’s also application bugs
and, well, the ActiveRecord API itself: <code class="highlighter-rouge">update_attribute</code> skips validation!  That means it’s hard to rely on Rails validations for data
integrity, but there isn’t a great alternative for creating a great user experience.</p>

<p>Postgres has the answer: <em>check constraints</em>.  As we’ll see, check constraints are tool for <em>data integrity</em> and work much better than
Rails validations.  But Rails validations are still a great tool for <em>user experience</em>.</p>

<!-- more -->

<h2 id="check-constraints-for-data-integrity">Check Constraints for Data Integrity</h2>

<p>Suppose we have a table of users, and a user has a name and email:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">users</span><span class="p">(</span>
  <span class="n">id</span>    <span class="n">int</span>  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">name</span>  <span class="n">text</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">email</span> <span class="n">text</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>
</code></pre>
</div>

<p><a name="back-1">
</a>
Although we’ve used <code class="highlighter-rouge">NOT NULL</code> to make sure there are values, we need more than that.  Although our domain doesn’t care about first or last names, it <em>does</em> require that a user’s name to be at least one letter, followed by a space, followed by at least one other letter<sup><a href="#fn_1">1</a></sup>.</p>

<p>We can do that by requiring that the <code class="highlighter-rouge">name</code> field match a regexp:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">TABLE</span> 
  <span class="n">users</span> 
<span class="k">ADD</span> <span class="k">CONSTRAINT</span> 
  <span class="n">users_name_must_look_like_a_name</span> 
<span class="k">CHECK</span> <span class="p">(</span>
  <span class="n">name</span> <span class="o">~*</span> <span class="s1">'^.*[a-z] [a-z].*$'</span>
<span class="p">);</span>
</code></pre>
</div>

<p><a name="back-2">
</a>
This is saying that the <code class="highlighter-rouge">name</code> field must match the regular expression specified.  That regexp allows anything, as long as there is a
letter followed by a space, followed by another letter, somewhere in the string<sup><a href="#fn_2">2</a></sup>.</p>

<p>Now, when we insert an invalid value, it won’t work:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; insert into users(id,name,email) values (1,'','bob@blah.com');
ERROR:  new row for relation "users" violates 
        check constraint "users_name_must_look_like_a_name"
DETAIL:  Failing row contains (1, , bob@blah.com).

&gt; insert into users(id,name,email) values (1,'Bob','bob@blah.com');
ERROR:  new row for relation "users" violates 
        check constraint "users_name_must_look_like_a_name"
DETAIL:  Failing row contains (1, Bob, bob@blah.com).

&gt; insert into users(id,name,email) values (1,'Bob Jones','bob@blah.com');
INSERT 0 1
</code></pre>
</div>

<p>Nice!  This means that a) our data will always match our rules around what good data is, and b) our code can rely on this.</p>

<p>For example, suppose we have to integrate with a third party shipping system that, for whatever reason, requires a first and last name.
Our system is designed to allow users to enter whatever their name is, as long as there are at least two parts.</p>

<p>Because we know our data meets its needs, we can safely do:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">name_part1</span><span class="p">,</span><span class="n">rest_of_name</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="no">ShippingProvider</span><span class="p">.</span><span class="nf">generate_label</span><span class="p">(</span><span class="ss">first_name: </span><span class="n">name_part1</span><span class="p">,</span>
                                <span class="ss">last_name: </span><span class="n">rest_of_name</span><span class="p">)</span>
</code></pre>
</div>

<p>Without the check constraints, we couldn’t rely on the data being good, and so our use of <code class="highlighter-rouge">split</code> would have to have some sort of error
handling if the name didn’t have a space in it.  Because that can never happen, our code is simpler!</p>

<p>OK, so what does this have to do with Rails validations?</p>

<h2 id="rails-validations-for-user-experience">Rails Validations for User Experience</h2>

<p>The equivalent of our check constraint above, using Rails Validations, would be:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">format: </span><span class="sr">/\A.*[a-z] [a-z].*\z/i</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Sure enough, this prevents us violating the validation:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; user = User.create(name: "bob", email: "bob@blah.com")
 =&gt; #&lt;User id: nil, name: "bob", email: "bob@blah.com"&gt; 
&gt; user.valid?
 =&gt; false 
&gt; user.errors
 =&gt; #&lt;ActiveModel::Errors:0x007fcf817cc808 
      @base=#&lt;User id: nil, name: "bob", email: "bob@blah.com"&gt;, 
      @messages={:name=&gt;["is invalid"]}&gt; 
</code></pre>
</div>

<p>Of course, we can route around this with ActiveRecord’s methods that allow it, or by calling <code class="highlighter-rouge">save(false)</code>, or by just going into the
database.</p>

<p><strong>This</strong> means that any code reading from this table must account for the bad data.</p>

<p>This presents us a few choices for how to deal with it:</p>

<ol>
  <li>Don’t worry about bad data getting in there</li>
  <li>Just use the check constraints</li>
  <li>Use both validations <em>and</em> check constraints</li>
</ol>

<p>Option 1 is unacceptable.  Our data is important and if our busines domain requires user names to have a letter, a space, and then
another letter, we can’t simply hope for the best.  As developers, we have a duty to ensure our code meets its requirements.</p>

<p>Option 2 creates a poor user experience:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; User.create(name: "Bob", email: "bob@jones.com")
ActiveRecord::StatementInvalid: PG::CheckViolation: ERROR:  
  new row for relation "users" violates 
  check constraint "user_name_must_look_like_a_name"
DETAIL:  Failing row contains (22, Bob, bob@jones.com).
: INSERT INTO "users" ("name", "email", "id") VALUES ($1, $2, $3)
</code></pre>
</div>

<p>Assuming a user is going to be entering in their name, we need to give them a better experience than an exception. We need to use both,
which will create some duplication.</p>

<h2 id="be-ok-with-some-duplication">Be OK with Some Duplication</h2>

<p>If we use both the ActiveRecord validation <em>and</em> the check constraint, we achieve what we need: a good user experience, and ther
assurance of data integrity.  The <em>problem</em> is that this creates duplication.  We have the same regexp in two places and they both have
to be changed together.</p>

<p>While I could imagine a more sophisticated data layer handling this, we don’t have one.  That means we have to live with the duplication
or sacrifice our system requirements.  For me, the job of a programmer is to make the system work properly, even if that means that the
resulting code has maintenance issues.</p>

<p>I am OK with this duplication.  If you think about most projects, the changes in requirements are often more about logic than data.  The
data you are storing and managing has a much more stable definition than the process that manage that data.  So, this duplication is less
likely to run afoul of bugs since it’s not going to change as much as the logic around it.</p>

<p>That being said, you <em>do</em> have to have an understanding of what valid data is.  This means being clear about data integrity.</p>

<h2 id="what-is-data-integrity">What is Data Integrity?</h2>

<p>In the example above, my assumption is that the business owning this database of users absolutely requires that each user’s name have a
letter, a space, and a letter in it.  This isn’t something that’s required <em>sometimes</em> or something a programmer invented, but an
<em>invariant of the domain</em>.  This is exactly what you want to encode in database constraints.</p>

<p>What you <em>don’t</em> want to do is encode use-case-specific constraints that are not universal to your business domain.</p>

<p>Suppose that in some cases, we need to have a name that’s more than just a couple characters.  We can blame a third party integration
again—we need to generate an invoice and it requires a first and last name that are each two characters or more.</p>

<p>Since that is not a requirement of <em>our</em> domain, we don’t want this in our database.  This means we have to just deal with it:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">name_part1</span><span class="p">,</span><span class="n">rest_of_name</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">name</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="k">if</span> <span class="n">name_part1</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rest_of_name</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
  <span class="no">InvoiceService</span><span class="p">.</span><span class="nf">generate_invoice!</span><span class="p">(</span><span class="ss">first: </span><span class="n">name_part1</span><span class="p">,</span> <span class="ss">last: </span><span class="n">rest_of_name</span><span class="p">)</span>
<span class="k">else</span>
  <span class="c1"># ???</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Depending on where this code is, you might handle the problem in a variety of ways.  You could create an ActiveModel that uses
validations to check for this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">InvoiceUser</span>
  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span>

  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">format: </span><span class="sr">/\A.*[a-z][a-z] [a-z][a-z].*\z/i</span>

  <span class="k">def</span> <span class="nf">user</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="nb">self</span><span class="p">.</span><span class="nf">name</span><span class="p">,</span> <span class="ss">email: </span><span class="nb">self</span><span class="p">.</span><span class="nf">email</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This works as advertised:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; i = InvoiceUser.new
 =&gt; #&lt;InvoiceUser:0x007ff604d80b60&gt; 
&gt; i.name = 'a b'
 =&gt; "a b" 
&gt; i.valid?
 =&gt; false 
&gt; i.name = 'aa bb'
 =&gt; "aa bb" 
&gt; i.valid?
 =&gt; true 
&gt; i.user.save!
 =&gt; #&lt;User:0x007fcf817cc808&gt;
</code></pre>
</div>

<p>We could even use this in Rails’ form helpers by bringing in more Active Model modules.  This way, a user who has to enter their name as
part of some use-case to create invoices will have a good experience, but our database won’t need to grow extra constraints that aren’t
universally needed.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Think about Rails validations as purely something for user experience.  Think about check constraints as just being about data integrity.
Often they are the same thing, but not always.  And don’t fret about a bit of duplication.</p>

<p><em>Read more in my new book <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">“Rails, Angular, Postgres, and Bootstrap
Powerful, Effective, and Efficient Full-Stack Web Development”</a></em></p>

<hr />

<footer class="footnotes">
<ol>
<li>
<a name="fn_1"></a>
<sup>1</sup>I realize this is not appropriate for a lot of people's names.  This isn't a post about that, so this example is quite
simplified to to illustrate the points.  When designing a system to store people's names, put a <strong>lot</strong> of thought into it,
especially if someone outside the United States might use it.
<a href="#back-1">↩</a>
</li>
<li>
<a name="fn_2"></a>
<sup>2</sup>This is also not a post about regular expressions.  Please craft them carefully. 
<a href="#back-2">↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace the Full Stack]]></title>
    
    <link href="http://theprosegarden.com/contents-of-recent-issues/#11-15"/>
    
    <updated>2015-11-05T00:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/05/embrace-the-stack</id>
    <content type="html"><![CDATA[<p>The latest edition of <a href="http://theprosegarden.com/store/">PragPub</a> is out, featuring an article I wrote on embracing the full stack.  This is more of a motivator for why
you should be more well-rounded as a developer (which then should motivate you to <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">buy my new book</a> :).  I cover things from grid-based design to database indexes.</p>

<blockquote>
  <p>This may seem like an immense amount of learning and work, but it hopefully feels more achievable now.  You could get a cursory understanding of these topics in a week.  What happens when you do is that you start to take a more holistic view of your application and of how to build features.</p>
</blockquote>

<p>Pick up your copy <a href="http://theprosegarden.com/contents-of-recent-issues/#11-15">here</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Rails Apis With Stitches]]></title>
    
    <link href="http://multithreaded.stitchfix.com/blog/2015/11/04/simple-rails-apis-with-stitches/"/>
    
    <updated>2015-11-04T10:56:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/04/rails-apis-with-stitches</id>
    <content type="html"><![CDATA[<p>New post on the <a href="http://multithreaded.stitchfix.com/blog">Stitch Fix Tech Blog</a> about how we create Rails-based HTTP APIs using a simple gem called <a href="https://github.com/stitchfix/stitches">stitches</a>:</p>

<blockquote>
  <p>With this set of conventions, it was important that developers not feel these were optional features they could leave out to cut corners, so it seemed logical to make it as painless as possible to follow them. The result is stitches, which works as a generator and backing library. It’s not an engine or a DSL or anything complex. It’s just a bit of Rails configuration, designed to be explicit and obvious.</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
