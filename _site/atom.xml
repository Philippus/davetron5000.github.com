<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2016-06-08T11:51:49-04:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[My talk on scaling Rails from RailsConf 2016]]></title>
    
    <link href="http://confreaks.tv/videos/railsconf2016-can-time-travel-keep-you-from-blowing-up-the-enterprise"/>
    
    <updated>2016-05-31T00:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/31/scaling-rails-talk-from-railsconf</id>
    <content type="html"><![CDATA[<p>I gave a talk at <a href="http://railsconf.com/">RailsConf ‘16</a> called “Can Time-Travel Keep You From Blowing Up the Enterprise”.  The talk is really about scaling Rails on a growing team, and attempts to stop the discussion around “monolith vs microservices” by showing how a team can take hold of its destiny.</p>

<p>It’s also the exact way Stitch Fix engineering evolved, and while we have some large Rails apps, none are the monstrosities I’ve seen elsewhere.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/23NhP4x3AAE" frameborder="0" allowfullscreen=""></iframe>
<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Behavior, not Configuration]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/23/test-behavior-not-configuration.html"/>
    
    <updated>2016-05-23T08:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/23/test-behavior-not-configuration</id>
    <content type="html"><![CDATA[<p>I’ve become re-acquainted with the pattern of testing ActiveRecord classes using stuff like <code class="highlighter-rouge">expect(parent).to belong_to(:child)</code> and I just don’t understand why anyone would ever write a test like that.  It provides no value, and the implementation provided by <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda</a> isn’t actually testing the behavior.  It’s testing configuration.</p>

<!-- more -->

<p>In Rails, the following code is configuration:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Address</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:country</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</code></pre>
</div>

<p>There is literally no reason to write this test:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"belongs to a country"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="no">Address</span><span class="p">.</span><span class="nf">new</span><span class="p">).</span><span class="nf">to</span> <span class="n">belong_to</span><span class="p">(</span><span class="ss">:country</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Why?</p>

<p>First, it’s basically asserting the exact code that it’s testing.  It could just as well be:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"belongs to a country"</span> <span class="k">do</span>
    <span class="n">source_code</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span>
                              <span class="kp">__FILE__</span><span class="p">,</span>
                              <span class="s2">"../../app/models/address.rb"</span><span class="p">))</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">source_code</span><span class="p">).</span><span class="nf">to</span> <span class="o">=~</span><span class="p">(</span><span class="sr">/^  belongs_to :country$/</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Second, it actually doesn’t test the configuration behavior.  It uses a <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matcher.rb">ridiculous</a> <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matchers/model_reflector.rb">amount of</a> <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matchers/model_reflection.rb">logic and meta-programming</a> to determine what Active Record methods appear in the class under test.</p>

<p>It does not assert any particular behavior.</p>

<p>This means that it actually doesn’t test the one thing that most people mess up with ActiveRecord, which is putting the <code class="highlighter-rouge">belongs_to</code> on the wrong class.</p>

<p>It’s also <em>highly</em> unlikely that this test would ever find a real bug, and I can’t imagine a TDD scenario in which this test takes our code from red to green.</p>

<p>But, since it <em>doesn’t test behavior</em> it makes refactoring difficult.</p>

<p>What if we tested the behavior instead?</p>

<p>Here’s one way to do that:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"has a country"</span> <span class="k">do</span>
    <span class="n">address</span> <span class="o">=</span> <span class="no">Address</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">country</span> <span class="o">=</span> <span class="no">Country</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">address</span><span class="p">.</span><span class="nf">country</span> <span class="o">=</span> <span class="n">country</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="nf">country</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This is how we expect <code class="highlighter-rouge">Address</code> instances to behave.  We want to give them countries, and have them return them to us.  It’s almost certain that most uses of an address and a country will do it this way.</p>

<p>Now, suppose we’ve decided that storing countries in its own table is too difficult, becuase the geo-political situtation on our planet is chaotic.  Instead, we’ll store it as a string on <code class="highlighter-rouge">addresses</code> called <code class="highlighter-rouge">country_code</code>.  This way, when countries change, we don’t have to maintain our <code class="highlighter-rouge">countries</code> list.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Address</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>

  <span class="n">belongs_to</span> <span class="ss">:legacy_country</span><span class="p">,</span> <span class="n">foreign_key</span> <span class="ss">:country_id</span>

  <span class="k">def</span> <span class="nf">country</span>
    <span class="no">Country</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">code: </span><span class="nb">self</span><span class="p">.</span><span class="nf">country_code</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">country</span><span class="o">=</span><span class="p">(</span><span class="n">new_country</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">country_code</span> <span class="o">=</span> <span class="n">new_country</span><span class="p">.</span><span class="nf">code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other_country</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">code</span> <span class="o">==</span> <span class="n">other_country</span><span class="p">.</span><span class="nf">code</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>With this change, the <em>behavior</em> of our <code class="highlighter-rouge">Address</code> stays the same, and our test still passes.  If we had asserted the configuration instead, our test would break, even though the behavior was the same.</p>

<p>Don’t test configuration.  Test behavior.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Rails 6: An Imagined Keynote]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html"/>
    
    <updated>2016-05-17T12:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap</id>
    <content type="html"><![CDATA[<p>Just got back from RailsConf.  It was a great Ruby &amp; Rails conference, but I was struck by the dearth of talks about new features of Rails 5—because there just aren’t many.  I thought back to what excited me about Rails in the first place—the baked-in conventions, convenience, encouragement of good practices.</p>

<p>Justin Searls gave <a href="http://blog.testdouble.com/posts/2016-05-09-make-ruby-great-again.html">a talk</a> not about RSpec but about how Rails is losing mindshare, losing favor.  Is Rails losing relevance?  I hope not, but it’s easy to see how someone less emotionally invested than me might see it that way.</p>

<p>I’m trying to write about this without complaining.  This is my fifth attempt.  It’s hard not to just rant about Rails’ failings, so I’m going to try to be constructive by outline a fantasy roadmap for Rails 6.</p>

<p>I tried very much to think about this without going against the “<a href="http://rubyonrails.org/doctrine/">Rails Doctrine</a>”, and have written this as if it were an Apple-style keynote.  The theme is Progress.</p>

<!-- more -->

<hr />

<h2 id="rails-6-progress">Rails 6: Progress</h2>

<p>Good morning.  I’d like to share with you all the exciting changes we have in store for Rails 6.  Since Rails was first launched 11 years ago, a lot has changed in the world of web development.</p>

<p>Billion-dollar business are being run on Rails.  These business—along with countless others—have been able to use Rails to solve problems we never imagined.  Rails not only enables small teams to ship great software, but it works for big teams, too.</p>

<p>We’ve seen Rails move beyond its role as “the single application” to being a part of highly distributed systems.  The productivity gains developers get in the small, and in the simple, they get in the large and complex, too.</p>

<p>Meanwhile, there have been tremendous strides in what is possible in a web browser.  Rails was born of a love of the web, and the web has gotten so much better over the years.  The front-end has blossomed.  We can now deliver amazing things to our users, and the community of web developers both inside and outside Rails has produced amazing tools and techniques for doing so.</p>

<p>Finally, the community of Rails and Ruby developers have over a decade of experience using Rails.  A <em>decade</em>!  We’ve learned so much about what it’s like to maintain Rails applications over long periods, and how to best use developers of all levels of experience in working on Rails applications.</p>

<p>Rails 6 is the most revolutionary release of Rails ever, and we’ve rallied around seventh pillar of the Rails Doctrine: Progress.</p>

<p>Let’s start with the front-end.</p>

<h2 id="front-end-20">Front-End 2.0</h2>

<p>Sprockets was way ahead of its time.  Using <code class="highlighter-rouge">remote=true</code> was, too.  Rails was one of the first web frameworks to actually acknowledge the front-end and include powerful tools for managing your assets.</p>

<p>The rest of the industry has not embraced these tools or techniques, but has instead solved the problems of front-end development in other ways.  Although the tools used for front-end development are in constant flux, there are stable, mature techniques that have proven results.</p>

<p>Rails 6 will bake in the best of these techniques, and create an updated, modern set of front-end tools.</p>

<p>In Rails 6:</p>

<ul>
  <li>No more per-view CSS.  Rails 6 encourages OOCSS and ships with <a href="http://tachyons.io/">Tachyons</a>, allowing developers to style their views without any CSS from day 1.</li>
  <li>No more per-view JavaScript. Rails 6 supports ES6 and ES6 module syntax to allow developers to structure their front-end code however they see fit.</li>
  <li>Rails 6 no longer includes jQuery by default.  Instead, Rails includes a library called <code class="highlighter-rouge">rails.js</code> that provides a simple and standard way to access Rails resources via AJAX without using jQuery.  Rails.js can be used standalone, or in conjunction with existing front-end frameworks like React.</li>
  <li>Source maps will be generated for any front-end compiled assets or code, if the source language supports it.</li>
  <li>A new focus on simple plugability and transparent behavior.  The one constant in front-end tooling is change, and a full-stack web application framework like Rails should give you the ability to keep up.</li>
</ul>

<p>What Rails 6 doesn’t ship with is a front-end framework. There’s value in server-generated views, and a light sprinkling of JavaScript can get you a long way.</p>

<p>Next up, the controller layer.</p>

<h2 id="doubling-down-on-resource-based-design">Doubling-down on Resource-based Design.</h2>

<p>Rails strongly believes in resource-based design.  It’s been a part of Rails since Rails 2.  Too often, however, developers deviate from this design when without a strong reason.  We’ve realized this happens for two different reasons.</p>

<p>First, it’s largely the same amount of work in your routes and controller to use RPC-style routing as it is to use resourceful routing.  Second, it’s too difficult to create resources that work with Rails but that aren’t ActiveRecords.</p>

<p>In Rails 6, developers who embrace resource-based design no longer need to specify routes explicitly.  The “special 7” routes are configured automatically by declaring the needed methods in the controller.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span> <span class="c1"># automatically sets up GET /users</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">create</span> <span class="c1"># automatically sets up POST /users</span>
             <span class="c1"># also sets up GET /users/new</span>
  <span class="k">end</span>
  
  <span class="n">opt_out</span> <span class="ss">:new</span> <span class="c1"># remove GET /users/new</span>
  
  <span class="k">def</span> <span class="nf">destroy</span> <span class="c1"># configure DELETE /users/:I'd</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">deactivate</span> <span class="c1"># does not introduce any route</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Developers unnecessarily using RPC-based designs now have more work to do than if they stick with a resource-based design.  The old way of declaring routes still works, but we feel this method will be much simpler.</p>

<p>We also want to make it easier to describe resources that work with the Rails View layer but that aren’t Active Records.  We introduced helper modules in Rails 3, and an explicit Active Model in Rails 4, but we still see developers struggling to adopt these technologies.</p>

<p>Instead, developers use presenters, decorators, and view models either hand-rolled or from one or more third-party gems.</p>

<p>Rails 6 will build on ActiveModel by providing a base class called ActionResource.</p>

<p>An ActionResource makes it easy to totally describe your resource, with support for:</p>

<ul>
  <li>delegating to an underlying object.</li>
  <li>create derived fields.</li>
  <li>formatting values.</li>
  <li>interoperability with Rails form and URL helpers.</li>
</ul>

<p>Suppose we want to display a user’s name, signup date, email, and most recent order (a date and description).  We’ll call this an <em>account</em>.  We’ll implement it using ActionResource, which we can use in our controller like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AccountsController</span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@account</span> <span class="o">=</span> <span class="no">Account</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">customer: </span><span class="n">current_user</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>We create <code class="highlighter-rouge">Account</code> like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActionResource</span>
  <span class="n">from</span> <span class="ss">:customer</span><span class="p">,</span> <span class="ss">show: </span><span class="p">[</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="p">]</span>

  <span class="nb">format</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">with: :short</span>
  <span class="nb">format</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">with</span> <span class="ss">:downcase</span>
  
  <span class="k">def</span> <span class="nf">last_order_date</span>
    <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">last_order</span><span class="p">.</span><span class="nf">created_at</span><span class="p">)</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">last_order_description</span>
    <span class="n">last_order</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">count</span> <span class="o">+</span> <span class="s2">" items"</span>
  <span class="k">end</span>
  
  <span class="kp">private</span>
  
    <span class="k">def</span> <span class="nf">last_order</span>
      <span class="vi">@last_order</span> <span class="o">||=</span> <span class="n">customer</span><span class="p">.</span><span class="nf">orders</span><span class="p">.</span><span class="nf">last</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>As with much of Rails, how this works should be obvious by the API we’ve designed.</p>

<p>The resulting object can be used like any model object:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">customer</span> <span class="o">=</span> <span class="no">Customer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Bob Jones"</span><span class="p">,</span>
                        <span class="ss">email: </span><span class="s2">"Bob@JONES.net"</span><span class="p">)</span>
<span class="n">customer</span><span class="p">.</span><span class="nf">orders</span> <span class="o">&lt;&lt;</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">created_at: </span><span class="mi">3</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span><span class="p">,</span>
                             <span class="ss">items: </span><span class="no">Item</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>

<span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">customer: </span><span class="n">customer</span><span class="p">)</span>

<span class="n">account</span><span class="p">.</span><span class="nf">email</span>                  <span class="c1"># bob@jones.net</span>
<span class="n">account</span><span class="p">.</span><span class="nf">name</span>                   <span class="c1"># Bob Jones</span>
<span class="n">account</span><span class="p">.</span><span class="nf">created_at</span>             <span class="c1"># May 13</span>
<span class="n">account</span><span class="p">.</span><span class="nf">last_order_date</span>        <span class="c1"># 3 days ago</span>
<span class="n">account</span><span class="p">.</span><span class="nf">last_order_description</span> <span class="c1"># 1 items</span>
</code></pre>
</div>

<p>We hope this will allow Rails developers to effectively use resourceful design without needing third-party gems, and to do so with minimal, beautiful code.</p>

<p>We’re also discouraging the use of helpers in Rails 6.  Helpers are still a fully supported feature, but when scaffolding or creating new resources with the Rails generator, you will no longer be given an empty helper file.  ActionResource can replace most need for helpers.</p>

<p>Next, let’s talk about the code that makes your app special: the business logic.</p>

<h2 id="the-business-of-logic">The Business of Logic</h2>

<p>Over the last ten years, it’s become clear that every Rails application needs to manage code that doesn’t belong to a controller, model, job, or mailer.  While there are many opinions on exactly <em>how much</em> code should go where, there’s no debate that sometimes code has to go somewhere else, and Rails hasn’t had an opinion.  Until now.</p>

<p>Rails 6 supports <em>services</em>, as we felt this was a good enough nudge regarding where code could go, but without being overly prescriptive, or requiring developers to opt-in to a complex DSL.</p>

<p>Make now mistake: this is a radical change in how Rails thinks about your application’s architecture.</p>

<p>By default, <code class="highlighter-rouge">app/services</code> will be created when you run <code class="highlighter-rouge">rails new</code> and any code you place there will be auto-loaded the same as for your controllers or models.  The code in your services can be anything.</p>

<p>However, when writing good services, it’s often required to bring together lower-level libraries, third-party code, and other services to get the job done.  Testing this code can be challenging.</p>

<p>To help organize your services, we’re also introducing <em>ActiveService</em>, which is a lightweight library that makes writing and testing services as easy as it can be.</p>

<p>Suppose you want a service for charging customers some money using your <code class="highlighter-rouge">Customer</code> and <code class="highlighter-rouge">Order</code> models.  To do this, we need to locate the customer’s credit card, charge it the amount of their order, and then email them a receipt (or a notification about failure).  To do this, we need access to our payment processor’s Ruby library as well as our <code class="highlighter-rouge">OrderMailer</code> Rails mailer.</p>

<p>While you could access these classes in the normal way of referencing their global symbols, we can use less code that’s easier to test by using Active Service.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Purchaser</span> <span class="o">&lt;</span> <span class="no">ActiveService</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">needs</span> <span class="ss">:payment_transaction</span>
  <span class="n">needs</span> <span class="ss">:credit_cards</span>
  <span class="n">needs</span> <span class="ss">:order_mailer</span>
  
  <span class="k">def</span> <span class="nf">purchase!</span><span class="p">(</span><span class="n">customer</span><span class="p">:,</span> <span class="n">order</span><span class="p">:)</span>
    <span class="n">card</span>        <span class="o">=</span> <span class="n">credit_cards</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
    <span class="n">transaction</span> <span class="o">=</span> <span class="n">payment_transaction</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">card</span><span class="p">,</span><span class="n">order</span><span class="p">.</span><span class="nf">amount</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">transaction</span><span class="p">.</span><span class="nf">success?</span>
      <span class="n">order_mailer</span><span class="p">.</span><span class="nf">receipt_email</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">).</span><span class="nf">deliver_later</span>
    <span class="k">else</span>
      <span class="n">order_mailer</span><span class="p">.</span><span class="nf">card_failed</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">,</span><span class="n">transaction</span><span class="p">).</span><span class="nf">deliver_later</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>As you can see, ActiveService provides a way to manage all your services at runtime.  This is especially useful for third-party libraries like our payment processor.  Instead of configuring a global constant like <code class="highlighter-rouge">BRAINTREE_TRANSACTION</code>, we can let ActiveService handle it:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c1"># config/initializers/braintree.rb</span>
<span class="n">service</span> <span class="ss">:payment_transaction</span> <span class="k">do</span>
  <span class="no">Braintree</span><span class="o">::</span><span class="no">Transaction</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">api_key: </span><span class="no">ENV</span><span class="p">[</span><span class="s2">"BRAINTREE_API_KEY"</span><span class="p">])</span>
<span class="k">end</span>

<span class="n">service</span> <span class="ss">:credit_cards</span> <span class="k">do</span>
  <span class="no">Braintree</span><span class="o">::</span><span class="no">PaymentCard</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">api_key: </span><span class="no">ENV</span><span class="p">[</span><span class="s2">"BRAINTREE_API_KEY"</span><span class="p">])</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This way, any other service that needs access to this can be sure to get the properly configured objects.  The real benefit, however, is in our tests.</p>

<p>Instead of mocking classes, or using code like <code class="highlighter-rouge">allow_any_instance_of</code>, Rails takes care of all that.  Since Rails now knows what your services needs to do its job, it can intelligently mock the behavior of
those objects and allow you to test your code in isolation.</p>

<p>For example, to test our <code class="highlighter-rouge">purchase!</code> method, we need to arrange for <code class="highlighter-rouge">payment_transaction</code> to return a successful result, and check that the right mailer method was called.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PurchaserTest</span> <span class="o">&lt;</span> <span class="no">ActiveService</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Base</span>
  
  <span class="k">def</span> <span class="nf">test_purchase_succeeded</span>
    <span class="n">successful_transaction</span> <span class="o">=</span> <span class="n">stub</span><span class="p">(</span><span class="n">success?</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>    

    <span class="n">order</span>    <span class="o">=</span> <span class="n">orders</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span>    <span class="c1"># we'll talk about these</span>
    <span class="n">customer</span> <span class="o">=</span> <span class="n">customers</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span> <span class="c1"># later on in the presentation</span>
    
    <span class="n">purchaser</span><span class="p">.</span><span class="nf">payment_transaction</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="ss">:new</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="n">successful_transaction</span><span class="p">)</span>

    <span class="n">purchaser</span><span class="p">.</span><span class="nf">purchase!</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    
    <span class="n">purchaser</span><span class="p">.</span><span class="nf">order_mailer</span><span class="p">.</span><span class="nf">verify</span><span class="p">(</span><span class="ss">:receipt_email</span><span class="p">).</span><span class="nf">with</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>No matter how much code you write as services, Rails 6 will make it easy to keep your code clean, simple, and tested.</p>

<p>We’d like to talk about the fixture-like code above, but first we need to learn about how Rails 6 treats your database.</p>

<h2 id="rails-and-databases-its-complicated">Rails and Databases: It’s Complicated</h2>

<p>One thing we’ve come to understand over the years is that Rails is just a piece of your technical architecture.  The days of one company having exactly one Rails app that controls one database are increasingly rare.  What we’ve also seen is that in most cases, the <em>data</em> is more important than code.  Many companies use Rails to create applications that, at their core, manage the data in a database.  This is very much what Rails was originally designed to do!</p>

<p>Rails 6 is now much more opinionated about how you should manage your data and interact with your database.  Instead of a “common denominator” approach, Rails 6 is designed to get the most out of your data
store—whichever brand it might be.</p>

<p>To state this another way, we want good database design to be easy but bad design to be possible.</p>

<p>In Rails 6, we’re making the following changes:</p>

<ul>
  <li>Columns are no longer nullable by default.</li>
  <li>Numeric-based enums are deprecated.  If your database supports enums, those are used, otherwise string-based enums are the default.</li>
  <li>Foreign keys have constraints by default, if your database supports it.</li>
  <li>Primary keys are UUIDs by default, if your database supports it.</li>
  <li>There is a new DSL for check constraints, if supported by your database, that also create equivalent ActiveRecord validations in the related model.</li>
</ul>

<p>These new defaults and features will keep the migrations DSL just as easy to use as it’s ever been, but result in a consistent, resilient, well-designed database that works great with Active Record.</p>

<p>Making this happen isn’t easy, and the biggest trickle-down affect it had is the way we manage test data.</p>

<h2 id="test-data">Test Data</h2>

<p>Test data comes in two flavors: reference data that is mostly immutable throughout an app’s lifetime (think: country codes), and transactional data, which is the data the app exists to manage (for example, orders).</p>

<p>Reference data can be managed with fixtures, however transactional data will now be managed with <em>factories</em>.</p>

<p>It’s too difficult to manage one single set of test data that works for every test case.  Instead, each use-case for your data will be described by a factory.  You can create a global repository of factories—similar to what you might do with FactoryGirl—or you can create factories directly in your test cases.</p>

<p>By default, however, objects created with factories won’t be written to the database.  This will make your tests run much faster, because you typically just need to test logic—not Active Record.</p>

<p>One problem with this approach, however, is that it’s possible to create use-case-based factories that could never happen in production.  This is why Rails 6 includes a standard linting task that will write all your factories to the database, to ensure that your scenarios actually could exist in the real world.</p>

<p>We also have a few more changes in how to write tests for Rails apps.</p>

<h2 id="testing-20">Testing 2.0</h2>

<p>In Rails 6, there will now be only three types of tests.</p>

<p><em>Unit Tests</em> do not use the database by default, and are where the majority of your tests should be written.  The code tested here would be any of your business logic in your models or services.  These are in <code class="highlighter-rouge">test/unit/{models,mailers,jobs,services}</code>.</p>

<p>For testing scopes, or other code that runs database queries, Rails 6 supports <em>active record tests</em>.  We expect these to be infrequent, but it’s difficult to test database queries without executing against real data.  These live in <code class="highlighter-rouge">test/active_records</code>.</p>

<p>Finally, Rails 6 integration test support will be based on end-to-end in-browser testing using PhantomJS.  You’ll never have confidence in your web application until you’ve used it in a real web browser.  We realize these types of tests can be slow, but we’ve rarely seen a Rails app that doesn’t need them.  They will live in <code class="highlighter-rouge">test/integrations</code>.</p>

<h2 id="thats-it">That’s It!</h2>

<p>We hope you’re as excited for Rails 6 as we are.  This is going to be the best release of Rails yet.</p>

<hr />

<h2 id="afterword">Afterword</h2>

<p>I know this is a fantasy.  I also know that the amount of work outlined here is massive.  But I strongly feel that features <em>like</em> the ones I’ve made up would address common things faced by all Rails developers.  Heck, these are issues faced by any web application developer, and Ruby is one of the few languages where solutions can be easily provided out of the box.</p>

<p>Maybe my particular solutions aren’t the best, and there are certainly many issues my hand-wavy features aren’t addressing that might make them really difficult to actually implement.</p>

<p>But, wouldn’t it be amazing if Rails 6 shipped with features kinda like this?  Wouldn’t it be awesome if Rails 6 acknowledged the community’s collected learnings over the last 10 years, and acknowledged that Rails is actually really awesome at things other than what a small team can accomplish?  Wouldn’t be great if Rails acknowledged advances made outside the Rails community?</p>

<p>I do wonder if this is even possible.  Can Rails make such fundamental changes any longer?  Even if we set aside the technical challenges—which are huge—could the culture of Rails (and its maintainers) allow these things to happen?  <em>Should</em> they?</p>

<p>Let’s say it <em>did</em>.  Let’s say Rails 6 was the revolutionary release I’m pretending it is.  Would that put Rails back in the spotlight?  Would that make Rails the go-to web framework for web development?  Would CTOs start thinking about Rails again?</p>

<p>I don’t know.</p>

<p>What I do know is that we all better prepare ourselves to write a lot more JavaScript if things don’t change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 'Type Wars' Are Far From Over]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/03/type-wars-are-far-from-over.html"/>
    
    <updated>2016-05-03T12:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/03/type-wars-are-far-from-over</id>
    <content type="html"><![CDATA[<p>Uncle Bob penned an <a href="http://blog.cleancoder.com/uncle-bob/2016/05/01/TypeWars.html">interesting piece called Type Wars</a>.  It’s ostensibly a history of the fashion around how types are handled in programming languages.  It, unfortunately, comes to the conclusion that “TDD and unit tests means you don’t need statically-enforced types”.  This is not true.</p>

<p>He initially describes how C had types, but they weren’t enforced at compile- or run-time.  This is bad (he says and I agree) and then talks about two ways to enforce type safety (i.e. require that the you are using the correct types).  In Java, the compiler requires it or the code won’t even run.  In Smalltalk, the runtime requires it only at runtime.  And, according to Uncle Bob, the latter is preferable because you have unit tests.  This is not true (he also overstates the burden required in having types enforced at compile time—just because Java is terrible doesn’t mean the concept is).</p>

<p>In particular, he creates a false equivalence between unit testing and static type checking:</p>

<blockquote>
  <p>You don’t need static type checking if you have 100% unit test coverage.</p>
</blockquote>

<p>Not true.</p>

<!-- more -->

<h2 id="its-not-true-but-suppose-it-is">It’s Not True, but Suppose It IS</h2>

<p>If this is true (it’s not), it doesn’t imply that 100% test coverage is a better method of ensuring program correctness than static type checking.  Consider a routine to format a name for a person in the US:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsaNameFormatter</span>
  <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
    <span class="n">first_name</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="n">last_name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Here is a test that achieves 100% test coverage (I’m assuming Uncle Bob means “statement coverage” due to his assertion that “unit test coverage close to 100% can, and is, being achieved”; <a href="https://en.wikipedia.org/wiki/Code_coverage">other types of coverage</a> are very difficult to achieve at 100% and very difficult to measure.).</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_format</span>
  <span class="n">formatter</span> <span class="o">=</span> <span class="no">UsaNameFormatter</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">assert_equals</span> <span class="s2">"Dave Copeland"</span><span class="p">,</span> <span class="n">formatter</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="s2">"Dave"</span><span class="p">,</span><span class="s2">"Copeland"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Despite 100% test coverage, our <code class="highlighter-rouge">format</code> call still feels buggy, especially around the types of data we pass in.  If we pass in <code class="highlighter-rouge">nil</code> for either value, it blows up.  If we pass in non-strings, it blows up (unless those values support <code class="highlighter-rouge">+</code> in all the ways it’s being used, in which case it returns a possibly unexpected value).</p>

<p>In order to ensure we aren’t making these type errors, it’s not sufficient to just test <code class="highlighter-rouge">UsaNameFormatter</code>, we must ensure that the unit tests of very single <em>use</em> of this class pass in the correct arguments. This means at least one test per callsite and those tests must be carefully written so that if future changes to the code pass in nil or non-Strings, those tests fail.</p>

<p>Now consider if we had static type-checking, particularly something like Swift that prevents nil values if you haven’t opted into them:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">format</span><span class="p">(</span><span class="nv">firstName</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">lastName</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">lastName</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>We still need a test that the name is formatted correct, but <em>that’s it</em>.  We never have to worry about this being called incorrectly, and we don’t have to test the <em>use</em> of this function, because it’s impossible to mis-use.</p>

<p>So, I would say that even <em>if</em> you could obviate the need for static type checking by having 100% unit test coverage, it’s not the best way to model correctness: it’s difficult and costly.</p>

<p>Of course, it’s not actually true that 100% unit test coverage obviates the need for static type checking.</p>

<h2 id="its-not-true">It’s Not True</h2>

<p>Consider <code class="highlighter-rouge">UsaNameFormatter</code> above.  Suppose that it’s part of a name-formatting library.  In that case, our existing unit test provides 100% test coverage for our library.  If the “you” is “the person that wrote the library” then, I guess you could say that we don’t need static type checks, because our hands are clean.  If you use the code the way we told you, it’s fine.</p>

<p>If “you” is “the user of the library” then things don’t look so good.  First, you don’t have any way to know what you are supposed to pass in.  You could look at the code or unit tests to see what you <em>can</em> pass in, but you can’t possibly know what the intention is of the routine or library.  The library author has to tell you, with words and text and prose and hopefully in a way that you can understand.  And even then, if you mess it up, you can get cryptic runtime errors.  It’s hard to think of this situation as “the program is correct”.</p>

<p>Our unit tests should not test the correctness of our third-party name-formatting library.  This is a common rule of thumb and I don’t know of any reasonable guidance that says the consumer of a third-party library should write unit tests for that library.  Instead, we tend to mock our use of said third-party library.</p>

<p>Suppose we used <code class="highlighter-rouge">UsaNameFormatter</code> in a presenter to format the name of our <code class="highlighter-rouge">Person</code> object.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Presenter</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
    <span class="vi">@person</span> <span class="o">=</span> <span class="n">person</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">display_name</span>
    <span class="no">UsaNameFormatter</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="nf">given_name</span><span class="p">,</span><span class="n">person</span><span class="p">.</span><span class="nf">sirname</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>To test it, we mock <code class="highlighter-rouge">UsaNameFormatter</code>, because again, we don’t normally test our third-party code in <em>our</em> unit tests.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span>
<span class="n">presenter</span> <span class="o">=</span> <span class="no">Presenter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>

<span class="n">expect_any_instance_of</span><span class="p">(</span><span class="no">UsaNameFormatter</span><span class="p">).</span>
  <span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="n">first</span><span class="p">,</span><span class="n">last</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="s2">"Dave Copeland"</span><span class="p">)</span>

<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">display_name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Dave Copeland"</span><span class="p">)</span>
</code></pre>
</div>

<p>100% (passing) test coverage!  Unless the constructor of <code class="highlighter-rouge">Person</code> sets default names (and in almost all cases, it wouldn’t), we have a passing test where we pass in <code class="highlighter-rouge">nil</code> to <code class="highlighter-rouge">UsaNameFormatter#format</code>—a situation that would certainly cause a runtime error.  We have a bug.  How could this be?  Both our code and the third-party library have 100% unit test coverage.  What could static typing have done here that we have not already done?</p>

<p>Consider a Swift version of this.  The compiler would see that our Person’s <code class="highlighter-rouge">last_name</code> field is of type “nullable String”, and that our formatter requires the type “non-nullable String”.  It would refuse to compile or execute the code.  The bug would be impossible to write.</p>

<p>Therefore, it’s still possible to write bugs (bad ones!) that would be caught by static type-checking, despite having 100% unit test coverage.</p>

<p>But it gets worse.</p>

<h2 id="everything-is-a-string-right">Everything is A String, Right?</h2>

<p>When you write code with the notion that “you don’t need types because you have 100% unit test coverage” (a flawed, but not unreasonable, interpretation of what Uncle Bob is saying), you end up not using types, and instead making everything a String or a Hashtable.  And isn’t this the problem with our name-formatting in the first place?</p>

<p>Think of every possible <code class="highlighter-rouge">first_name</code> a person in the US could possible have.  Is this the <strong>exact same list</strong> as every possible string in the known universe?  No it’s not.  So why are we using Strings?!?!?  And if if that <em>were</em> true, the formatter code says that everyone must have a first name, so <code class="highlighter-rouge">nil</code> is not a valid first name, yet we have chosen types that allow it.</p>

<p>We do this all the time, because in dynamic languages, we don’t get the full benefits of static type checking, and thus there is less incentive to create custom data types.  In some static languages, like Java or C#, the type system is weak and verbose, so this, too, puts up a barrier to using custom data types.  Instead, we use Strings for everything.  This is terrible.</p>

<p>Static type checking <em>can</em> be a benefit.  It can identify bugs that are difficult or impossible to detect with 100% unit test coverage, and do so much more simply and easily.  The Type Wars are far from over.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology is Terrible]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/04/10/technology-is-terrible.html"/>
    
    <updated>2016-04-10T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/04/10/technology-is-terrible</id>
    <content type="html"><![CDATA[<p>I get into my hotel at around 8:30pm. I want to watch NXT Takeover on the WWE network and then go to bed. I unpack and then put my Amazon Fire Stick in the HDMI port on the TV.</p>

<p>I start looking for an outlet to plug it in. Nothing close. The armoire weighs a ton and both of the plugs behind it are used up anyway.</p>

<p>Ok, I can just watch on my laptop. Open it up. Keyboard and trackpad not responding. Reboot. No Mac Startup Chime. Keyboard still not working. Reboot. Same. Reboot and hold down Option. Nothin. Repeat with Shift. Repeat with Command Option P M. Wait. Reboot into recovery mode. Computer insists I turn on my Bluetooth keyboard and mouse. Which I don’t have. Fuck.</p>

<p>I just want to watch an hour of pro wrestling.</p>

<p>Pour myself a drink.</p>

<p>Plug the Amazon Fire Stick into my USB battery. Turn on Tv and it works.</p>

<p>Connect to hotel wi-fi. Amazon browser not compatible with the OMNI’s interstitial. Go into “cursor mode” and I’m literally surfing the web with up/down/left/right/submit.</p>

<p>Select premium Internet. Fuck it, I want this to work. Enter my name and room number. I’m in!</p>

<p>Navigate passed about 20 apps that I could download, but have not. WWE is at the end and it’s already downloaded.</p>

<p>OF COURSE I have to sign in! Otherwise, someone might have stolen my Fire stick and started watching 1990’s WCW repeats on my dime!</p>

<p>Open phone, launch 1Password to get my login details. Sometime in the past my phone rebooted so I can’t use TouchID to get in. Enter my very long and easy to mistype pass phrase. Thankfully I get it right the first time.</p>

<p>Back to the Fire stick, I log in to the WWE network. It’s really. really. slow.</p>

<p>Find NXT Takeover and start it up. Stuttering and buffering would be an understatement. I let it ride. After about 10 minutes, I’ve seen 2 minutes of the event, doled out in 5 second bursts. Fuck.</p>

<p>Second drink is poured.</p>

<p>Ok, I’ll watch something else. Maybe it’s WWE. The tech behind their network is not very robust.</p>

<p>Hulu! I can catch up on the terrible superhero shows I like. Or Netflix! Can watch Walking Dead. Both require downloading an app and surely logging in. I’m done logging into things for the night.</p>

<p>Oh, I’m still in season 1 of Veronica Mars! And it’s only on Amazon Prime!</p>

<p>Amazingly, it remembers the last episode I watched (God knows I don’t). Start it up.</p>

<p>“Previously on Veronica Mars…” and then the screen turns solid green and does nothing but glitch.</p>

<p>Ok, maybe it’s this episode. I’ll skip it and not worry about missing too much. Start the next episode.</p>

<p>“Previously on Veronica Mars…” and then the screen turns solid green and does nothing but glitch.</p>

<p>I just want to watch TV and go to bed.</p>

<p>Ok, what else is there? The Wire season 1. Haven’t watched it in ages and could honestly settle for Idris Elba reading he phone book for 2 hours. You know what would be awesome? A sitcom around all the time Stringer Bell spent in community college. I mean, they had to have group projects so I can see hours of fun watching him and three 19 year olds try to make business plans for video stores or whatever.</p>

<p>Anyway, this finally works. I watch a couple episodes without incident. Finally. It’s bleaker than I remember.</p>

<p>It’s 11pm and I still want to watch wrestling. Flip back to WWE and now it’s working. But I’m tired. Fast forward to Baylee vs Asuka for the women’s title. Baylee loses. Fucking hell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's not Naming That's Hard—It's Types]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/03/15/its-not-naming-its-types.html"/>
    
    <updated>2016-03-15T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/03/15/its-not-naming-its-types</id>
    <content type="html"><![CDATA[<p>Katrina Owen wrote an interesting piece on SitePoint Ruby called <a href="http://www.sitepoint.com/whats-in-a-name-anti-patterns-to-a-hard-problem/">“What’s in a Name? Anti-Patterns to a Hard Problem”</a>.  She identifies a lot of pitfalls around naming and method design, but the solutions to the problems she’s identified aren’t as much about naming as they are about using data types effectively.</p>

<!-- more -->

<p>I’m having a hard time with this statement from her post:</p>

<blockquote>
  <p>Type information is just not that compelling.</p>
</blockquote>

<p>Type information is <em>everything</em>.  Every line of code is filled with types, and the correctness of code, as well as our ability to use it properly, relies
on knowing type information.  Just because Ruby has “duck typing” doesn’t mean it has <em>no</em> types.</p>

<p>And, types are a better way to solve the problems Katrina identifies in her post.</p>

<p>She starts with this routine, arguing that the names are bad since they encode type information:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">anagrams</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">string_array</span><span class="p">)</span>
  <span class="n">string_array</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
    <span class="n">str</span> <span class="o">!=</span> <span class="n">string</span> <span class="o">&amp;&amp;</span> <span class="n">same_alphagram?</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>For me, it’s plainly obvious how to properly use this method: I pass in a string and an array of strings.  Katrina’s improved version makes it harder to
know what I’m expected to pass in:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">anagrams</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">candidates</span><span class="p">)</span>
  <span class="n">candidates</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">candidate</span><span class="o">|</span>
    <span class="n">subject</span> <span class="o">!=</span> <span class="n">candidate</span> <span class="o">&amp;&amp;</span> <span class="n">same_alphagram?</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">candidate</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>What is a “subject”?  What is a “candidate”?  My first guess would be some sort of <code class="highlighter-rouge">Subject</code> or <code class="highlighter-rouge">Candidate</code> class.  The author of this code had <em>something</em>
in mind that I should be passing in, but it’s no longer clear.  With no guidance I would have to read the source to <code class="highlighter-rouge">same_alphagram?</code> (and whatever its dependencies are).</p>

<p>The real problem is that a string is not a word and an array of strings is not a set of words.  We shouldn’t be using strings to solve this problem, and no
efforts of naming will change that.  What the <code class="highlighter-rouge">anagrams</code> method is trying to do is tell us if one word has anagrams in a set of other words.  That says to me we might need a word class.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Word</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
    <span class="vi">@string</span> <span class="o">=</span> <span class="n">word</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="vi">@string</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This may seem superfluous, but we have now named the thing we are operating on.  We’ve also created a place for ourselves to put code about this type of
data.  For example, a word should only contain alphabetics and spaces.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Word</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
    <span class="k">unless</span> <span class="n">string</span> <span class="o">=~</span> <span class="sr">/^[\a\s]+$/</span>
      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2"> is not a word"</span> 
    <span class="k">end</span>
    <span class="vi">@string</span> <span class="o">=</span> <span class="n">word</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>We’ve now described—in code—what a word is.  We’ve written code that explains what the parameters to <code class="highlighter-rouge">anagrams</code> actually are supposed to be.  And we
communicate that by naming the parameters after the data type:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">anagrams</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">candidate_words</span><span class="p">)</span>
  <span class="n">candidate_words</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">candidate_word</span><span class="o">|</span>
    <span class="n">word</span> <span class="o">!=</span> <span class="n">candidate_word</span> <span class="o">&amp;&amp;</span> <span class="n">same_alphagram?</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">candidate_word</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>With an actual data type available to us—instead of a string—we can also get rid of that pesky <code class="highlighter-rouge">same_alphagram?</code> free-floating method.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Word</span>

  <span class="k">def</span> <span class="nf">letters</span>
    <span class="vi">@string</span><span class="p">.</span><span class="nf">chars</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">same_alphagram?</span><span class="p">(</span><span class="n">other_word</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">letters</span><span class="p">.</span><span class="nf">sort</span> <span class="o">==</span> <span class="n">other_word</span><span class="p">.</span><span class="nf">letters</span><span class="p">.</span><span class="nf">sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Now, our <code class="highlighter-rouge">anagrams</code> routine is a bit better:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">anagrams</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">candidate_words</span><span class="p">)</span>
  <span class="n">candidate_words</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">candidate_word</span><span class="o">|</span>
    <span class="n">word</span> <span class="o">!=</span> <span class="n">candidate_word</span> <span class="o">&amp;&amp;</span> <span class="n">word</span><span class="p">.</span><span class="nf">same_alphagram?</span><span class="p">(</span><span class="n">candidate_word</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>While the names in the original routine weren’t great, the solution wasn’t to mask the method’s intent and proper use by using different names.  The
solution is use code to describe the parameters.</p>

<p>But wait.  <code class="highlighter-rouge">letters</code> is returning an array of strings.  Shouldn’t it return a <code class="highlighter-rouge">Letter</code>?</p>

<p>Yup.  Let’s do that.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Letter</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
    <span class="k">unless</span> <span class="n">char</span> <span class="o">=~</span> <span class="sr">/^[\a\s]$/</span>
      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span><span class="s2">"'</span><span class="si">#{</span><span class="n">char</span><span class="si">}</span><span class="s2">' is not a letter"</span> 
    <span class="k">end</span>
    <span class="vi">@char</span> <span class="o">=</span> <span class="n">char</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="vi">@char</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other_letter</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">to_s</span> <span class="o">==</span> <span class="n">other_letter</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">&lt;</span><span class="o">=&gt;</span><span class="p">(</span><span class="n">other_letter</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">to_s</span> <span class="o">&lt;=&gt;</span> <span class="n">other_letter</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Before we re-implement <code class="highlighter-rouge">letters</code>, let’s take a moment.  We have duplicated code now in the initializers of these two classes.  Because we now have a
<code class="highlighter-rouge">Letter</code> class that describes a letter, and we know that a <code class="highlighter-rouge">Word</code> is an ordered list of <code class="highlighter-rouge">Letters</code>, we can change our implementation of <code class="highlighter-rouge">Word</code> to make that
abundandtly clear.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Word</span>

  <span class="kp">attr_reader</span> <span class="ss">:letters</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
    <span class="vi">@letters</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="nf">chars</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span>
      <span class="no">Letter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="k">rescue</span> <span class="n">ex</span> <span class="o">=&gt;</span> <span class="no">ArgumentError</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"'</span><span class="si">#{</span><span class="n">string</span><span class="si">}</span><span class="s2">' is not a word: </span><span class="si">#{</span><span class="n">ex</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="vi">@letters</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">same_alphagram?</span><span class="p">(</span><span class="n">other_word</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">letters</span><span class="p">.</span><span class="nf">sort</span> <span class="o">==</span> <span class="n">other_word</span><span class="p">.</span><span class="nf">letters</span><span class="p">.</span><span class="nf">sort</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This may seem like a lot of code, and possibly even ridiculous, but if we really <em>are</em> writing code that does anagrams, doesn’t it make sense to have classes to describe the building blocks of our domain?</p>

<p>Strings (and Hashes) are great for exploring your domain, but once you understand your domain, data types will make your code easier to
understand and easier to change. It also alleviates you from stressing about parameter names.  <a href="http://naildrivin5.com/blog/2014/06/30/thinking-in-types.html">Thinking in Types</a> will make your code better and make you a better programmer.  They also help <em>greatly</em> in naming things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Why You Need a JavaScript Framework” in March's PragPub]]></title>
    
    <link href="http://theprosegarden.com/store/"/>
    
    <updated>2016-03-03T11:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/03/03/why-you-need-a-javascript-framework</id>
    <content type="html"><![CDATA[<p>In March’s <a href="http://theprosegarden.com">PragPub</a>, I’ve got an article titled “Why You Need a JavaScript Framework”.</p>

<blockquote>
  <p>Remember that application you were working on that started out needing just a bit of JavaScript? And then it needed more? And then just a bit more? And then you had a complete mess on your hands?</p>

  <p>You can avoid that next time by using a front-end application framework right from the start.</p>
</blockquote>

<p>The issue is a couple bucks. Check out the other contents <a href="http://theprosegarden.com/contents-of-recent-issues/#03-16">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More on Leveling Up]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/03/02/more-on-levelling-up.html"/>
    
    <updated>2016-03-02T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/03/02/more-on-levelling-up</id>
    <content type="html"><![CDATA[<p>This interesting piece from Will Hughes titled <a href="https://medium.com/@willh/how-to-level-up-as-a-developer-87344584777c#.nxkkh5mz6">How to Level up as a Developer</a> was a great read, but it focuses too much on
<a href="http://naildrivin5.com/blog/2013/12/03/org-charts-and-diff-production.html">“developer-as-producer-of-diffs”</a> and not enough on “developer-as-solver-of-problems”.  Although I’ve written in detail in my book <a href="http://theseniorsoftwareengineer.com/">“The Senior
Software Engineer”</a> what I think you need to do to be a great developer, I’m going to augment and modify some of the specific points Will makes.</p>

<!-- more -->

<h2 id="level-1-reduce-unnecessary-distractions">Level 1: Reduce Unnecessary Distractions</h2>

<p>I totally agree with the advice here in spirit, however the guidance given isn’t quite right for me.  Chapter Ten in my book is titled “Be Responsive and Productive” and it
addresses this issue.  First, you have to understand that your job as a developer is not entirely about producing code.  As a developer, you have
expertise that no one else has, and you must often share that expertise in ways <em>other</em> than writing code.  This means emails, conversations, and, yes,
meetings.</p>

<p>If you push back on “all recurring meetings” as the developer quoted in Will’s piece maintains, you will limit your effectiveness and end up being a ticket-taker with no real agency or input into the work you are
doing.  Here are the regular meetings developers at Stitch Fix have:</p>

<ul>
  <li>1-1 with their manager (weekly or every-other-week)</li>
  <li>All-team tech meeting (every other week)</li>
  <li>All-hands engineering meeting (every other week)</li>
  <li>Team roadmap planning with business partners (every week)</li>
  <li>Sync with business partners on project (weekly)</li>
</ul>

<p>This may seem like a lot, but these meetings are crucial.  Having dedicated time with your manager every week is important.  So is having a
weekly time to talk with the people for whom you are building software about priorities.  And if you aren’t part of these discussions, they are still going
to happen, but they will lack your input.  That could go bad for you.</p>

<p>That said, some people <em>do</em> default to meetings instead of trying to use email.  In those cases, it’s fine to “push back” and try to solve the issue
asynchronously, but you also have to understand that not everyone is effective at written communication.  So, while you could lead such a person through a
multi-email exchange to get to the issue at hand, it might be easier to have a 10 minute conversation.</p>

<p>The rest of the stuff in “Level 1” is great.  As I’ve mentioned many times, using Test-driven development is a great way to save state when you need to get
interrupted.  It’s also worth spending time <a href="http://naildrivin5.com/blog/2013/07/23/agile-email-management.html">getting really good at email</a> so it’s never a distraction.</p>

<h2 id="level-2-write-better-diffs">Level 2: Write “Better” Diffs</h2>

<p>While I don’t disagree with the advice here, it misses the forest for the trees.  Your job as a developer is not to get your code changes “easily
accepted”.  Your job is to solve the problem in front of you, and sometimes it takes a larger diff to do that.  If you focus, instead, on breaking up your
work as a series of small “digestible” diffs, there will never be an occasion to review your <em>actual</em> change.  It might be possible to ship something
terribly designed—or just plain buggy—by obscuring the true nature of what you are doing as a bunch of small diffs.</p>

<p>Of course, spending weeks in a hole and producing an enormous diff is also not good.  You should strive to deliver a series of tiny solutions to tiny
problems, but at the end of the day, the size of your diff will be commensurate with the size of the problem you are solving (or bigger, depending on the quality of the codebase).  Do not optimize for getting a
thumbs-up.</p>

<p>In terms of getting feedback, it highly depends on the culture of your company, but there are three techniques I find useful:</p>

<ul>
  <li>Write clean code as much as possible.  Spend a bit of extra time <a href="http://naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop.html">making it right</a>.</li>
  <li>Write tests. Will calls this out, but couches it as optional.  Tests are not optional.  They are the way you know your code works as intended.</li>
  <li><a href="http://naildrivin5.com/blog/2012/04/02/a-protocol-for-code-reviews.html">Comment on your diff/pull request</a> before asking for feedback.  This allows you to attach plain language explanations of what’s going on without using code comments. It also allows you to ask pointed questions about specific bits of code, which helps reviewers know what to look for.</li>
</ul>

<p>The advice in “Communicate” is spot-on.  Throwing up a diff without context does no one any good.  Spend 10 minutes of your life making things easier for your team-mates.</p>

<p>Which leads to Will’s Level 3.</p>

<h2 id="level-3-being-a-team-player">Level 3: Being a Team Player</h2>

<p>This is all good, particularly, “Admit What you Don’t Know”.  You should become very comfortable with this, because a) you’ll learn things this way and b) it’s a good signal to a code’s author that maybe there code isn’t clear enough.</p>

<p>I would also not shy away from “nitpicky” code comments.  If a change is mostly pretty good and there are no major issues, nitpicky comments about
formatting and consistency are fair game.  Most developers want their code to be consistent like most writers want to be using proper grammar and spelling.
Point it out—politely—and most developers will fix.  If they disagree, don’t die on that hill, but most of the time it’s appreciated.  That said, if a pull request or diff has larger issues, do not waste time on
nitpicky stuff; let the author deal with the larger issues first.</p>

<h2 id="level-4-organize--hustle">Level 4: Organize &amp; Hustle</h2>

<p>This section is great, too.  I want to expand on “work/life balance”.  You need to establish early on what the expectation is of the hours you should be
online and responding to email or interacting with others.  Whenever that is, you absolutely <em>must</em> do your best to be present during those hours.
<em>Hopefully</em>, they are fewer than eight hours, so you can allocate the rest of your work time to whenever suits you best.</p>

<p>Beyond that, you have to set boundaries with your co-workers and manager about when you will and won’t be working.  Unless your manager is <em>very</em>
conscientious, they will not complain about you working “too many” hours.  You have to limit it.  You can do this by simply setting strict work hours.  Or,
if you tend to work at different or odd times of the day, be vocal about that.  Make sure everyone knows that e.g. just because you were working at
10:00pm, that didn’t mean you were working all day.</p>

<h2 id="parting-thoughts">Parting Thoughts</h2>

<p>I say this a lot, but the best thing you can do as a developer is to understand the problem you are trying to solve.  And be honest about it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dishonest Abstractions are Not Abstractions]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/02/22/dishonest-abstractions-are-not-abstractions.html"/>
    
    <updated>2016-02-22T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/02/22/dishonest-abstractions-are-not-abstractions</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/erniemiller">Ernie Miller</a> started a tweetstorm on Friday that really rang true to me, about how certain abstractions are “dishonest”.  In my mind, the dishonesty
is calling them abstractions in the first place.</p>

<!-- more -->

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I&#39;ve been thinking a lot about honesty in software development lately. Not just honesty from people, but from technology.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700705128484106240">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">I think this general sense of honesty is at the core of my feelings about, e.g., HAML/SASS/CoffeeScript vs ERB/SCSS/ES2015.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700706138581561345">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I had embraced them for their aesthetic appeal, but realized that I was really running from the technology I perceived them to replace.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700711070919426048">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr">But it was very surprising to me, then. I&#39;d get a stack trace listing JavaScript I hadn&#39;t written, or inspect an unexpected HTML element.</p>&mdash; Ernie Miller (@erniemiller) <a href="https://twitter.com/erniemiller/status/700712371606704128">February 19, 2016</a></blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>These tweets really spoke to me, but I don’t think abstractions are “lies” per se.  Rather, I feel that the technologies listed (and others like them) are
just really weak.  They don’t deliver complete solutions to the problems they are there to solve and are built on poor (or no) abstractions, such that they
require more of the user than they ultimately give.</p>

<p>CoffeeScript is the simplest example of this. It’s a programming language that produces stack traces in a different programming language.  It requires almost the same amount of code as JavaScript and it doesn’t obviate the need to completely understand JavaScript.  Why would I want this?</p>

<p>In a sense, HAML, SASS, CoffeeScript, etc. are nothing more than sophisticated <code class="highlighter-rouge">sed</code> scripts (or macro languages).  But this problem isn’t specific to
front-end technologies.  AREL and Rails Migrations are two back-end examples.  They profess to “save you” from SQL, but you really can’t use them without
understanding SQL, you can’t access the full power of your database with them, and you can’t debug what they are doing without knowing SQL.</p>

<p>Compare this to writing C.  Do you need to know assembly language to write C?  For almost all cases, the answer is “no”.  Sure, there may be cases where you have to dig into the assembly to figure out a problem, but these are vanishingly small.</p>

<p>Compare that to AREL or CoffeeScript where, as a matter of course, you must break through the “abstraction” to find out what’s going on.  You spend almost as much time in the “assembly language” (SQL, JavaScript), as you do in the “higher-level abstraction”.</p>

<p>The scare quotes are intentional: to call HAML, CoffeeScript, and friends “abstractions” is to almost render the term meaningless.  They don’t
abstract anything away from you on any real level.</p>

<p>In <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">my book</a>, I encourage the reader to use JavaScript and learn SQL, because the tools given to you by Rails aren’t abstractions—they are extra things
to learn that provide at best a marginal increase in productivity, and that productivity only applies during the least time-consuming part of software
development: typing in source code.</p>

<p>These tools don’t meet <a href="http://naildrivin5.com/blog/2016/01/13/hierarchy-of-software-needs.html">any higher-order need</a> a developer has.  They provide the ability to execute code only and when compared to the
technologies they replace, they appeal more to aesthetics than the ability to better deliver quality software.</p>

<p>Web front-end technologies seem woefully stuck in this quagmire.  React gives you the ability to type markup that looks like a higher-order abstraction, but
it’s still just a macro language for producing HTML that you must debug directly.  Yes, source maps and other browser extensions exist to make this less
painful, but your job at the end of the day is still trying to figure out what events are firing on what DOM elements, and how CSS is being applied to them.</p>

<p>I’m not sure what it will take to produce truly higher-level abstractions for powerful technologies like JavaScript and SQL.  If the tools we have now are
guilty of dishonesty, it’s mostly in overstating what problems they really solve.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There is no Happy Path in Programming]]></title>
    
    <link href="http://multithreaded.stitchfix.com/blog/2016/01/29/no-happy-path-in-programming/"/>
    
    <updated>2016-01-29T09:02:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/01/29/there-is-no-happy-path-in-programming</id>
    <content type="html"><![CDATA[<p>Writing on the Stitch Fix blog about how feature and product design <a href="http://multithreaded.stitchfix.com/blog/2016/01/29/no-happy-path-in-programming/">can’t just focus on the “happy path”</a>, but must account for, among other things, network
flakiness:</p>

<blockquote>
  <p>The other thing I’ve realized is that you cannot address these issues with entirely technical solutions. You have to account for these realities in the design of your product.</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
