<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2015-11-24T08:34:19-05:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Rails Validations vs Postgres Check Constraints]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/11/15/rails-validations-vs-postgres-check-constraints.html"/>
    
    <updated>2015-11-15T00:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/15/rails-validations-vs-postgres-check-constraints</id>
    <content type="html"><![CDATA[<p>Before using Postgres, I would have to rely heavily on Rails validations to ensure data integrity—MySQL simply doesn&#39;t provide the tools
to do this.  This always felt wrong.  Outside of rogue processes connecting to the database, there&#39;s also application bugs
and, well, the ActiveRecord API itself: <code>update_attribute</code> skips validation!  That means it&#39;s hard to rely on Rails validations for data
integrity, but there isn&#39;t a great alternative for creating a great user experience.</p>

<p>Postgres has the answer: <em>check constraints</em>.  As we&#39;ll see, check constraints are tool for <em>data integrity</em> and work much better than
Rails validations.  But Rails validations are still a great tool for <em>user experience</em>.</p>

<!-- more -->

<h2>Check Constraints for Data Integrity</h2>

<p>Suppose we have a table of users, and a user has a name and email:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">create</span> <span class="k">table</span> <span class="n">users</span><span class="p">(</span>
  <span class="n">id</span>    <span class="nb">int</span>  <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">name</span>  <span class="nb">text</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="n">email</span> <span class="nb">text</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>
</code></pre></div>
<p><a name="back-1">
</a>
Although we&#39;ve used <code>NOT NULL</code> to make sure there are values, we need more than that.  Although our domain doesn&#39;t care about first or last names, it <em>does</em> require that a user&#39;s name to be at least one letter, followed by a space, followed by at least one other letter<sup><a href="#fn_1">1</a></sup>.</p>

<p>We can do that by requiring that the <code>name</code> field match a regexp:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> 
  <span class="n">users</span> 
<span class="k">ADD</span> <span class="k">CONSTRAINT</span> 
  <span class="n">users_name_must_look_like_a_name</span> 
<span class="k">CHECK</span> <span class="p">(</span>
  <span class="n">name</span> <span class="o">~*</span> <span class="s1">&#39;^.*[a-z] [a-z].*$&#39;</span>
<span class="p">);</span>
</code></pre></div>
<p><a name="back-2">
</a>
This is saying that the <code>name</code> field must match the regular expression specified.  That regexp allows anything, as long as there is a
letter followed by a space, followed by another letter, somewhere in the string<sup><a href="#fn_2">2</a></sup>.</p>

<p>Now, when we insert an invalid value, it won&#39;t work:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; insert into users(id,name,email) values (1,&#39;&#39;,&#39;bob@blah.com&#39;);
ERROR:  new row for relation &quot;users&quot; violates 
        check constraint &quot;users_name_must_look_like_a_name&quot;
DETAIL:  Failing row contains (1, , bob@blah.com).

&gt; insert into users(id,name,email) values (1,&#39;Bob&#39;,&#39;bob@blah.com&#39;);
ERROR:  new row for relation &quot;users&quot; violates 
        check constraint &quot;users_name_must_look_like_a_name&quot;
DETAIL:  Failing row contains (1, Bob, bob@blah.com).

&gt; insert into users(id,name,email) values (1,&#39;Bob Jones&#39;,&#39;bob@blah.com&#39;);
INSERT 0 1
</code></pre></div>
<p>Nice!  This means that a) our data will always match our rules around what good data is, and b) our code can rely on this.</p>

<p>For example, suppose we have to integrate with a third party shipping system that, for whatever reason, requires a first and last name.
Our system is designed to allow users to enter whatever their name is, as long as there are at least two parts.</p>

<p>Because we know our data meets its needs, we can safely do:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">name_part1</span><span class="p">,</span><span class="n">rest_of_name</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="no">ShippingProvider</span><span class="o">.</span><span class="n">generate_label</span><span class="p">(</span><span class="ss">first_name</span><span class="p">:</span> <span class="n">name_part1</span><span class="p">,</span>
                                <span class="ss">last_name</span><span class="p">:</span> <span class="n">rest_of_name</span><span class="p">)</span>
</code></pre></div>
<p>Without the check constraints, we couldn&#39;t rely on the data being good, and so our use of <code>split</code> would have to have some sort of error
handling if the name didn&#39;t have a space in it.  Because that can never happen, our code is simpler!</p>

<p>OK, so what does this have to do with Rails validations?</p>

<h2>Rails Validations for User Experience</h2>

<p>The equivalent of our check constraint above, using Rails Validations, would be:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="sr">/\A.*[a-z] [a-z].*\z/i</span>
<span class="k">end</span>
</code></pre></div>
<p>Sure enough, this prevents us violating the validation:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; user = User.create(name: &quot;bob&quot;, email: &quot;bob@blah.com&quot;)
 =&gt; #&lt;User id: nil, name: &quot;bob&quot;, email: &quot;bob@blah.com&quot;&gt; 
&gt; user.valid?
 =&gt; false 
&gt; user.errors
 =&gt; #&lt;ActiveModel::Errors:0x007fcf817cc808 
      @base=#&lt;User id: nil, name: &quot;bob&quot;, email: &quot;bob@blah.com&quot;&gt;, 
      @messages={:name=&gt;[&quot;is invalid&quot;]}&gt; 
</code></pre></div>
<p>Of course, we can route around this with ActiveRecord&#39;s methods that allow it, or by calling <code>save(false)</code>, or by just going into the
database.</p>

<p><strong>This</strong> means that any code reading from this table must account for the bad data.</p>

<p>This presents us a few choices for how to deal with it:</p>

<ol>
<li>Don&#39;t worry about bad data getting in there</li>
<li>Just use the check constraints</li>
<li>Use both validations <em>and</em> check constraints</li>
</ol>

<p>Option 1 is unacceptable.  Our data is important and if our busines domain requires user names to have a letter, a space, and then
another letter, we can&#39;t simply hope for the best.  As developers, we have a duty to ensure our code meets its requirements.</p>

<p>Option 2 creates a poor user experience:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; User.create(name: &quot;Bob&quot;, email: &quot;bob@jones.com&quot;)
ActiveRecord::StatementInvalid: PG::CheckViolation: ERROR:  
  new row for relation &quot;users&quot; violates 
  check constraint &quot;user_name_must_look_like_a_name&quot;
DETAIL:  Failing row contains (22, Bob, bob@jones.com).
: INSERT INTO &quot;users&quot; (&quot;name&quot;, &quot;email&quot;, &quot;id&quot;) VALUES ($1, $2, $3)
</code></pre></div>
<p>Assuming a user is going to be entering in their name, we need to give them a better experience than an exception. We need to use both,
which will create some duplication.</p>

<h2>Be OK with Some Duplication</h2>

<p>If we use both the ActiveRecord validation <em>and</em> the check constraint, we achieve what we need: a good user experience, and ther
assurance of data integrity.  The <em>problem</em> is that this creates duplication.  We have the same regexp in two places and they both have
to be changed together.</p>

<p>While I could imagine a more sophisticated data layer handling this, we don&#39;t have one.  That means we have to live with the duplication
or sacrifice our system requirements.  For me, the job of a programmer is to make the system work properly, even if that means that the
resulting code has maintenance issues.</p>

<p>I am OK with this duplication.  If you think about most projects, the changes in requirements are often more about logic than data.  The
data you are storing and managing has a much more stable definition than the process that manage that data.  So, this duplication is less
likely to run afoul of bugs since it&#39;s not going to change as much as the logic around it.</p>

<p>That being said, you <em>do</em> have to have an understanding of what valid data is.  This means being clear about data integrity.</p>

<h2>What is Data Integrity?</h2>

<p>In the example above, my assumption is that the business owning this database of users absolutely requires that each user&#39;s name have a
letter, a space, and a letter in it.  This isn&#39;t something that&#39;s required <em>sometimes</em> or something a programmer invented, but an
<em>invariant of the domain</em>.  This is exactly what you want to encode in database constraints.</p>

<p>What you <em>don&#39;t</em> want to do is encode use-case-specific constraints that are not universal to your business domain.</p>

<p>Suppose that in some cases, we need to have a name that&#39;s more than just a couple characters.  We can blame a third party integration
again—we need to generate an invoice and it requires a first and last name that are each two characters or more.</p>

<p>Since that is not a requirement of <em>our</em> domain, we don&#39;t want this in our database.  This means we have to just deal with it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">name_part1</span><span class="p">,</span><span class="n">rest_of_name</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s/</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="k">if</span> <span class="n">name_part1</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rest_of_name</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
  <span class="no">InvoiceService</span><span class="o">.</span><span class="n">generate_invoice!</span><span class="p">(</span><span class="ss">first</span><span class="p">:</span> <span class="n">name_part1</span><span class="p">,</span> <span class="ss">last</span><span class="p">:</span> <span class="n">rest_of_name</span><span class="p">)</span>
<span class="k">else</span>
  <span class="c1"># ???</span>
<span class="k">end</span>
</code></pre></div>
<p>Depending on where this code is, you might handle the problem in a variety of ways.  You could create an ActiveModel that uses
validations to check for this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">InvoiceUser</span>
  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span>

  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span>

  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="sr">/\A.*[a-z][a-z] [a-z][a-z].*\z/i</span>

  <span class="k">def</span> <span class="nf">user</span>
    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This works as advertised:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&gt; i = InvoiceUser.new
 =&gt; #&lt;InvoiceUser:0x007ff604d80b60&gt; 
&gt; i.name = &#39;a b&#39;
 =&gt; &quot;a b&quot; 
&gt; i.valid?
 =&gt; false 
&gt; i.name = &#39;aa bb&#39;
 =&gt; &quot;aa bb&quot; 
&gt; i.valid?
 =&gt; true 
&gt; i.user.save!
 =&gt; #&lt;User:0x007fcf817cc808&gt;
</code></pre></div>
<p>We could even use this in Rails&#39; form helpers by bringing in more Active Model modules.  This way, a user who has to enter their name as
part of some use-case to create invoices will have a good experience, but our database won&#39;t need to grow extra constraints that aren&#39;t
universally needed.</p>

<h2>Conclusion</h2>

<p>Think about Rails validations as purely something for user experience.  Think about check constraints as just being about data integrity.
Often they are the same thing, but not always.  And don&#39;t fret about a bit of duplication.</p>

<p><em>Read more in my new book <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">“Rails, Angular, Postgres, and Bootstrap
Powerful, Effective, and Efficient Full-Stack Web Development”</a></em></p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='fn_1'></a>
<sup>1</sup>I realize this is not appropriate for a lot of people's names.  This isn't a post about that, so this example is quite
simplified to to illustrate the points.  When designing a system to store people's names, put a <strong>lot</strong> of thought into it,
especially if someone outside the United States might use it.
<a href='#back-1'>↩</a>
</li>
<li>
<a name='fn_2'></a>
<sup>2</sup>This is also not a post about regular expressions.  Please craft them carefully. 
<a href='#back-2'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace the Full Stack]]></title>
    
    <link href="http://theprosegarden.com/contents-of-recent-issues/#11-15"/>
    
    <updated>2015-11-05T00:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/05/embrace-the-stack</id>
    <content type="html"><![CDATA[<p>The latest edition of <a href="http://theprosegarden.com/store/">PragPub</a> is out, featuring an article I wrote on embracing the full stack.  This is more of a motivator for why
you should be more well-rounded as a developer (which then should motivate you to <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">buy my new book</a> :).  I cover things from grid-based design to database indexes.</p>

<blockquote>
<p>This may seem like an immense amount of learning and work, but it hopefully feels more achievable now.  You could get a cursory understanding of these topics in a week.  What happens when you do is that you start to take a more holistic view of your application and of how to build features.</p>
</blockquote>

<p>Pick up your copy <a href="http://theprosegarden.com/contents-of-recent-issues/#11-15">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Rails Apis With Stitches]]></title>
    
    <link href="http://multithreaded.stitchfix.com/blog/2015/11/04/simple-rails-apis-with-stitches/"/>
    
    <updated>2015-11-04T10:56:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/11/04/rails-apis-with-stitches</id>
    <content type="html"><![CDATA[<p>New post on the <a href="http://multithreaded.stitchfix.com/blog">Stitch Fix Tech Blog</a> about how we create Rails-based HTTP APIs using a simple gem called <a href="https://github.com/stitchfix/stitches">stitches</a>:</p>

<blockquote>
<p>With this set of conventions, it was important that developers not feel these were optional features they could leave out to cut corners, so it seemed logical to make it as painless as possible to follow them. The result is stitches, which works as a generator and backing library. It&#39;s not an engine or a DSL or anything complex. It&#39;s just a bit of Rails configuration, designed to be explicit and obvious.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Book]]></title>
    
    <link href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap"/>
    
    <updated>2015-07-29T10:56:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/07/29/my-new-book</id>
    <content type="html"><![CDATA[<p>My new Book, <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">Rails, Angular, Postgres, and Bootstrap: Powerful, Effective, and Efficient Full-Stack Web Development</a> is in beta:</p>

<blockquote>
<p>As a Rails developer, you care about user experience and performance, but you also want simple and maintainable code. Achieve all that by embracing the full stack of web development, from styling with Twitter Bootstrap, building an interactive user interface with AngularJS, to storing data quickly and reliably in PostgreSQL. Take a holistic view of full-stack development to create usable, high-performing applications, and learn to use these technologies effectively in a Ruby on Rails environment.</p>
</blockquote>

<p>I&#39;ve been working on this for quite a while, and pretty excited about it.  If you want to <em>really</em> level
up your abilities as a Rails developer, this is the book for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned interviewing with Instagram]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/07/21/what-I-learned-interviewing-at-Instagram.html"/>
    
    <updated>2015-07-21T14:49:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/07/21/what-I-learned-interviewing-at-Instagram</id>
    <content type="html"><![CDATA[<p>In September 2011, I interviewed at Instagram.
While I didn&#39;t ultimately get/take the job<a name="back-1"></a><sup><a href="#1">1</a></sup>, the experience had a pretty profound effect on me as a developer.  </p>

<p>What I learned during the interview process (which was really enjoyable, and became the basis for <a href="http://theseniorsoftwareengineer.com/interview_potential_co-workers_excerpt.html">my ideal technical interview process</a>) was just <em>how much</em> two engineers with relatively little experience could accomplish.</p>

<!-- more -->

<p>My notes on the interview:</p>

<blockquote>
<ul>
<li>a popular iPhone app</li>
<li>the back-end to serve millions and millions of users</li>
<li>an infrastructure that could be experimented with: attempt to run Mongo and see what happens</li>
<li>Implemented their data storage layer in Mongo, studied it, abandoned it</li>
<li>Enhanced their iPhone app with Open GL</li>
<li>Build, documented, and deployed an API and several clients</li>
<li>Created a demo using their API in Node</li>
<li>Have their entire infrastructure monitored; can identify any change in behavior of their system instantly</li>
<li>Have ready access to their data to support third-party hacking</li>
<li>Completely manage all of their servers</li>
</ul>
These are two guys with very little experience.
</blockquote>

<p>If you had looked at these developers&#39; résumés as of 2010, you would not find anything to indicate that they
could both design, build, launch, and maintain a hugely popular application used by millions of people
around the world..  And while I&#39;m sure the code
that powered Instagram back in 2011 wasn&#39;t the greatest, these two guys had basically done everything
from designing the UI to launching an API, to managing servers on AWS.</p>

<p>They did this without a QA team, a system “architect”, a product manager, a <em>project</em> manager, or a technical operations team.  </p>

<p>Before the interview, I didn&#39;t think such a thing would be possible.  I would&#39;ve assumed that such an
undertaking would require years and years of experience, with an army of specialists each laser-focused
on one part of a greater whole.</p>

<p>Nope.</p>

<p>To me, this is what I mean when I use the term <em>full stack</em>.  It&#39;s not just about working at any level of
the stack, but about <em>not being afraid to</em>.  When faced with any problem, these two guys didn&#39;t show
fear, and didn&#39;t shy away…they dug in.</p>

<p>I used to <em>hate</em> writing JavaScript.  Now, I have no fear and embrace it.  It turns out to be pretty darn
useful.  I used to immediately dismiss any solution that involved writing raw SQL.  I was above all that.
Now, I use it <em>a lot</em>, because it&#39;s the best way to solve a lot of thorny problems.</p>

<p>My current fear is around technical operations.  I&#39;m working on overcoming it.  It&#39;s going to make me a
better developer.</p>

<p>Examine your habits and patterns.  What do you <em>always</em> reach for?  What makes you feel uncomfortable.
What part of the software you build are you afraid of?</p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='1'></a>
<sup>1</sup>The process didn't get far enough along where they were deciding to make an offer or not.  We basically came to a point where I would need to be willing to move myself and my family out to SF so I could put in the blood, sweat, and tears necessary to help make them successful.  When I realized there was no way I could realistically do that, we split on good terms.  And then they got sold to Facebook for a billion dollars. Fortunately, I cannot stand Facebook and would <a href="http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html">never work there</a>.  At least, that's what I tell myself :)<a href='#back-1'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming and API Design]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/06/15/naming-and-api-design.html"/>
    
    <updated>2015-06-15T07:55:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/06/15/naming-and-api-design</id>
    <content type="html"><![CDATA[<p>A tenet of design is that things that are the same should be obviously the same, and things that are different should be obviously different.  This is the most basic way to create consonance and contrast, and is a great rule of thumb when designing <em>anything</em>.  While Rails diverges from this in an annoying way<a name="back-1"></a><sup><a href="#1">1</a></sup>, Angular diverges in a baffling way that makes explaining it to a newcomer head-scratchingly difficult.</p>

<!-- more -->

<h2>The World&#39;s Silliest Programming Language</h2>

<p>Imagine the following programming language.  To define a function, we name it using a <em>dasherized</em> scheme,
with square brackets to offset the arguments:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">define full-name[first-name,last-name]
  first-name + &quot; &quot; + last-name
end-define
</code></pre></div>
<p>Further imaging that in this programming language, to <em>invoke</em> the function you use a camel-cased version
of the function name, and use parenthesis to offset the arguments:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">print fullName(&quot;Dave&quot;,&quot;Copeland&quot;)
</code></pre></div>
<p>I don&#39;t think it&#39;s a stretch to call this language poorly designed.  Things that are the same—a
function—are handled differently depending upon the occasion.  The design of this language would benefit
greatly if you defined functions using the name symbol used to invoke them.</p>

<p>This example might seem pretty ridiculous, but this is <em>exactly</em> what Angular does.</p>

<h2>Dashes, Camels, and “ng”</h2>

<p>Angular uses <em>directives</em> in HTML to bind your code to the DOM or to DOM events.  The simplist one to
understand is <code>ng-click</code>:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;doit()&quot;</span><span class="nt">&gt;</span>Do It! Do It, Now!<span class="nt">&lt;/button&gt;</span>
</code></pre></div>
<p>This calls <code>doit</code>, whenever the button is clicked.</p>

<p>Are you curious about the documentation for <code>ng-click</code>?  It&#39;s filed under <code>ngClick</code>.  The text <code>ng-click</code>—the thing you must type into your application&#39;s source code to make it work—does not appear in Angular&#39;s
source code.  Everything talks about <code>ngClick</code>.  Why?  I have no idea.</p>

<p>It gets worse.</p>

<h2>Good Luck Finding That Thing You Downloaded</h2>

<p>I&#39;m writing a book on getting Angular, Rails, Bootstrap, and Postgres working together, and how these
four technologies in sum are greater than their parts.  It&#39;s going to be awesome.  Documenting Postgres
is easy (“check out this thing you didn&#39;t think a relational database could do!”), and for Bootstrap,
it&#39;s just as simple (“put this class on this element and…boom!”).</p>

<p>Angular has resulted in many passages like the following.  I&#39;m talking about Angular&#39;s router, which is a
separate component.  The first thing the user has to do, after downloading the module, is configure it in
their application.  Essentially, you need to say &quot;my app requires the router I just downloaded&quot;.</p>

<blockquote>
<p>That argument [when declaring the app] is our app&#39;s list of dependent modules.  It&#39;s currently empty, because we hadn&#39;t needed anything other than what&#39;s provided by Angular.  Now, we&#39;ll need to add <code>angular-route</code> to this array.</p>

<p>Unfortunately, it&#39;s not as simple as adding <code>&quot;angular-route&quot;</code> to the array.  In Angular, the module name for declaring dependencies doesn&#39;t have to be the same as the name of the module we downloaded. For official Angular-provided modules this is unfortunately the case.  </p>

<p>By convention, the name to use in code for an Angular module can be derived by replacing the <code>angular-</code> with <code>ng</code> and camel-casing the remaining module name.  That means that <code>angular-route</code> becomes <code>ngRoute</code> and so <code>&quot;ngRoute&quot;</code> is the string to add to our list of dependencies.</p>
</blockquote>

<p>The reader has had type one string—“angular-route”—into their application&#39;s source code already (so that Bower/NPM/Whatever.JS could download it) And now, I have to give the reader <em>an algorithm they must execute mentally</em> in order to know what string to type into another part of their application.</p>

<p>This is bad design.</p>

<p>When faced with bad design, there is often some sort of tradeoff, some reason the system was designed
this way.  While I can hazard a few guesses about the whole <code>ng-click</code>/<code>ncClick</code> issues<a name="back-2"></a><sup><a href="#2">2</a></sup>, I&#39;ve got <em>zero</em> clue why the name of a module in your dependencies shouldn&#39;t be the name of the module
you downloaded.</p>

<p>It&#39;s so confusing that I have to invent a new phrase just to explain the difference.  If I download
<code>angular-route</code> and use <code>ngRoute</code> in my code, which of those is the <em>module name</em>?  Who knows?</p>

<p>Imagine if the module name was the…well…module name?</p>

<blockquote>
<p>That argument [when declaring the app] is our app&#39;s list of dependent modules.  It&#39;s currently empty, because we hadn&#39;t needed anything other than what&#39;s provided by Angular.  Now, we&#39;ll need to add <code>angular-route</code> to this array.</p>
</blockquote>

<p>End of description!</p>

<p>Same things should be same.</p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='1'></a>
<sup>1</sup>Try explaining to someone new to Ruby and Rails how to find out what file should contain the class <code>SomeModule::SomeClass</code><a href='#back-1'>↩</a>
</li>
<li>
<a name='2'></a>
<sup>2</sup>All I can figure is that some fussy developer didn't want camel case in their markup, but you can't define a JavaScript function with dashes.  I'm not saying it's a <strong>good</strong> reason, but it is a reason<a href='#back-2'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Rails Service Object]]></title>
    
    <link href="http://technology.stitchfix.com/blog/2015/06/02/anatomy-of-service-objects-in-rails/"/>
    
    <updated>2015-06-02T09:14:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/06/02/anatomy-of-a-rails-service-object</id>
    <content type="html"><![CDATA[<p>I haven&#39;t been good at blogging for a while.  Most of my writing has been toward a new book (details
forthcoming), but I did manage to write up how I see designing service objects for Rails applications
over at <a href="http://technology.stitchfix.com/blog">Stitch Fix&#39;s Eng Blog</a>.</p>

<p><a href="http://technology.stitchfix.com/blog/2015/06/02/anatomy-of-service-objects-in-rails/">Anatomy of a Rails Service Object</a>:</p>

<blockquote>
<p>We&#39;ve given up on “fat models, skinny controllers” as a design style for our Rails apps—in fact we abandoned it before we started. Instead, we factor our code into special-purpose classes, commonly called service objects. </p>
</blockquote>

<p>The post goes over six rules of thumb that I&#39;ve found useful, including class design, method parameter,
and return values.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a Great Software Engineer in 2 Steps]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/02/21/how-to-be-a-great-software-engineer.html"/>
    
    <updated>2015-02-21T13:03:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/02/21/how-to-be-a-great-software-engineer</id>
    <content type="html"><![CDATA[<ol>
<li><strong>Understand what problem you are trying to solve.</strong>  <em>So</em> many skip this, or don&#39;t spend enough time on it or don&#39;t even <em>realize</em> that it&#39;s something to do.  The main failure of good <em>programmers</em> that I&#39;ve seen is in not knowing what problem they were trying to solve.</li>
<li><strong>Figure out what you need to do to solve the problem before you solve it.</strong>  This can be anything from skimming the code you&#39;re about to change to organizing your thoughts in a full-blown <a href="http://technology.stitchfix.com/blog/2014/12/02/some-design-up-front/">design document</a>.  You have to have a good idea of how you&#39;re going to go about solving the problem in the code.</li>
</ol>

<p>You can apply these steps to pretty much anything you need to do, from fixing bugs, to implementing features, to writing
emails, to holding meetings.  If you know what problem you&#39;re trying to solve, and have a good sense of how you&#39;re going to do
it, actually solving it becomes a lot simpler and a lot easier to get right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What You Don't Get With ActiveJob]]></title>
    
    <link href="http://www.sitepoint.com/dont-get-activejob/"/>
    
    <updated>2014-10-01T11:12:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/10/01/what-you-dont-get-with-activejob</id>
    <content type="html"><![CDATA[<p>Post by yours truly on <a href="http://www.sitepoint.com">Sitepoint</a>&#39;s Ruby section, &quot;<a href="http://www.sitepoint.com/dont-get-activejob/">What You Don&#39;t Get With ActiveJob</a>&quot;:</p>

<blockquote>
<p>ActiveJob provides simple solutions to two problems faced by Rails developers when writing background jobs: queueing jobs (via the ActiveJob API) and serialization of ActiveRecord objects (via GlobalID).</p>

<p>It doesn&#39;t, however, help with the third problem: writing resilient jobs that can survive in a production environment.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Scrum Should Basically Die in a Fire]]></title>
    
    <link href="http://gilesbowkett.blogspot.com/2014/09/why-scrum-should-basically-just-die-in.html"/>
    
    <updated>2014-09-18T19:42:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/09/18/why-scrum-should-basically-die-in-a-fire</id>
    <content type="html"><![CDATA[<p><a href="http://gilesbowkett.blogspot.com/">Giles Bowkett</a> posted <a href="http://gilesbowkett.blogspot.com/2014/09/why-scrum-should-basically-just-die-in.html">a great piece on the deep flaws of Agile processes like Scrum</a>.
It&#39;s spot-on with my experience.
There&#39;s so many choice quotes, it&#39;s hard to pull just one, but I&#39;ll try.
Toward the end of the article:</p>

<blockquote>
<p>I&#39;ve never seen Scrum-like frameworks for transmuting the work of designers, marketers, or accountants into cartoonish oversimplifications like story points. People are happy to treat these workers as adults and trust them to do their jobs.</p>

<p>I don&#39;t know why this same trust does not prevail in the culture of managing programmers.</p>
</blockquote>

<p>After a job converting JIRA Tickets into Story Points into diffs, I eventually realized that good developers <a href="http://naildrivin5.com/blog/2013/01/27/what-i-learned-working-at-livingsocial.html">deliver results</a>, not promises, points, or even features.
I even <a href="http://theseniorsoftwareengineer.com">wrote an entire book about it</a>.</p>

<p>Thankfully, the <a href="http://tech.stitchfix.com">team at Stitch Fix</a> has no sprints, story points,
velocity, or planning poker.  We just solve the most important problem at hand, and
move onto the next most important one.</p>
]]></content>
  </entry>
  
</feed>
