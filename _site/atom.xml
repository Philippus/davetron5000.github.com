<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2017-06-11T15:47:01-04:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[I'm Co-authoring Agile Web Development With Rails]]></title>
    
    <link href="https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1"/>
    
    <updated>2017-05-11T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2017/05/11/agile-web-development-with-rails</id>
    <content type="html"><![CDATA[<p>Hot off the presses is the latest beta of the seminal <a href="https://pragprog.com/book/rails51/agile-web-development-with-rails-5-1">Agile Web Development With Rails</a>, where I’m joining Sam Ruby as co-author.  I’m really excited to be working on this classic book, and doing my part to keep Rails relevant to web developers.</p>

<p>The beta features sections on Webpacker and system tests, new in Rails 5.1.  Much more to come as the beta
progresses!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns of Service-Oriented Architecture]]></title>
    
    <link href="http://multithreaded.stitchfix.com/blog/2017/05/09/patterns-of-service-oriented-architecture/"/>
    
    <updated>2017-05-09T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2017/05/09/patterns-of-service-oriented-architecture</id>
    <content type="html"><![CDATA[<p>Fresh on the Stitch Fix Engineering blog, the first in a several-part series on the patterns we use in our service-oriented architecture.  From <a href="http://multithreaded.stitchfix.com/blog/2017/05/09/patterns-of-service-oriented-architecture/">the intro</a>:</p>

<blockquote>
  <p>Over the last four years, we’ve gone from a team of two developers and one Rails app, to almost 80 developers managing 40+ applications. These applications are a mixture of user-facing and headless services. While our technical architecture isn’t perfect, we’ve had relatively few major problems. Part of the reason for that is that we’ve done a decent job of identifying and re-applying patterns to solve similar technical challenges.</p>
</blockquote>

<p>The first pattern is also up: <a href="http://multithreaded.stitchfix.com/blog/2017/05/09/patterns-of-soa-asynchronous-transaction/">Asynchronous Transaction</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appearance on the Tech Done Right Podcast]]></title>
    
    <link href="http://www.techdoneright.io/005-javascript-apps"/>
    
    <updated>2017-03-08T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2017/03/08/appearance-on-tech-done-right-podcast</id>
    <content type="html"><![CDATA[<p>I was fortunate enough to be on the <a href="http://www.techdoneright.io/005-javascript-apps">Tech Done Right Podcast</a> hosted by <a href="https://twitter.com/noelrap">Noel Rappin</a>.  I was on
with <a href="https://twitter.com/theotherzach">Zach Briggs</a> to talk about JavaScript with and without frameworks, something I’ve been exploring quite
a bit working on the second edition of <a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">my book</a>.  Take <a href="http://www.techdoneright.io/005-javascript-apps">a listen</a>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Articulating a Vision]]></title>
    
    <link href="http://naildrivin5.com/blog/2017/01/17/articulating-a-vision.html"/>
    
    <updated>2017-01-17T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2017/01/17/articulating-a-vision</id>
    <content type="html"><![CDATA[<p>In <a href="http://theseniorsoftwareengineer.com">my book</a>, I talk about making technical decisions and, in particular, understanding the priorities of everyone involved in the
decision-making.  A more powerful way to lead teams to execution is to <em>clearly articulate a vision</em> of what you are trying to achieve.  It’s also much more
difficult.</p>

<!-- more -->

<p>Imagine if you worked on the hardware team for the iPhone.  One day, your manager says “OK, for iPhone 7, omit the headphone jack”.  You’d be confused.  Why would we remove the audio jack for a <em>phone</em> that doubles as a <em>music player</em>?!?!</p>

<p>Now, suppose this went down another way.  Your manger instead says: “We believe the future of mobile audio is
wireless.  We further believe that wireless headphones can be an area of new product development—a new wearable computer.  We feel the way to make that future a
reality is to free ourselves from the legacy headphone port.  We’re planning to introduce the first version of our vision for wireless headphones, and we
think removing the headphone port in iPhone 7 is the way to ensure that product gets traction in the market.  We feel this is the way to achieve the future we’re envisioning.”</p>

<p>What’s the difference here?</p>

<p>In the first scenario, the manager is handing down directives and projects with no context or explanation.  In the later, the manager is <em>articulating a vision</em> and that vision helps the team understand what they
are being asked to do and why it’s important.</p>

<p>Articulating a vision is crucial for product development, and vital for managing healthy teams.</p>

<p>Handing down directives makes the job of a manager more difficult. Without context, teams can’t make many decisions on their own, and require micromanagement, lest the deliver on the wrong thing.  This lack of
vision also sends the message that the manager either has no vision (making them a poor leader) or doesn’t trust the team to execute.  Who wants to be on <em>that</em> team?</p>

<p>Even if you aren’t a manager, being able to articulate a vision is still a useful skill, as it allows you to clearly express ideas to others.  For example, if you’re a junior developer faced with a bugfix that’s more complex than you initially thought, <em>articulating a vision</em> of how to fix that bug—as opposed to just writing some code—means you can give context and clarity about what you want to do.  Instead of struggling to communicate your intent and context, you’ll become quickly aligned and can discuss the fitness of your proposal more directly.</p>

<p>How can we learn to do this?</p>

<h2 id="have-a-vision-in-the-first-place">Have a Vision in the First Place</h2>

<p>Developing a vision is much easier than articulating it.  You merely imagine the world in some future state based on what you’d like to achieve.</p>

<p>Think about what you want to do. What are your goals?  What needs to exist that doesn’t?  What should happen that isn’t?</p>

<p>Think about your life, system, or team in this future state.  What is it like? What sorts of things become possible?  What becomes <em>difficult</em>?</p>

<p>I like to imagine giving a keynote presentation, and think about all the exciting stuff I’m announcing.</p>

<p>However you do it, you next need to find a way to articulate it to others.</p>

<h2 id="articulate-your-vision-to-others">Articulate Your Vision to Others</h2>

<p>When others already share your vision—or helped you develop it—articulating that vision is easy.  You have shared context and opinions that allow almost everything to go unsaid.  But, as you bring in people with less context, it’s harder to get them to understand.  They weren’t there with you developing the vision and are coming in cold, possibly with their own vision or opinions about the matter at hand.</p>

<p>Your primary goal is to get others to really understand your vision at the level you do.  With that understanding, you can get feedback to refine that vision, get help in further articulating it, and, most
importantly, get others to help you execute on it.</p>

<p>A simple way to do this is to start with the specific things you want done or want to exist.   Ask yourself why it’s important?  Keep asking “why”.  These explanations give context and lead others through your
line of thinking.  When you talk about what’s important, explicitly state what’s <em>not</em> important, or what you are willing to sacrifice to achieve your vision.  Finally, outline pie-in-the-sky benefits that become
possible only when your vision is achieved.</p>

<p>This should create a story that you can tell others that brings them from nothing to understanding your vision.</p>

<p>The grander your vision, the more work this is, but the more focused your vision, the easier.  And it works for just about anything, from leading a massive organization to a simple bugfix.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Westworld Can Teach Us About Devops]]></title>
    
    <link href="http://naildrivin5.com/blog/2017/01/10/what-westworld-can-teach-us-about-devops.html"/>
    
    <updated>2017-01-10T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2017/01/10/what-westworld-can-teach-us-about-devops</id>
    <content type="html"><![CDATA[<p><a href="http://westworld.wikia.com/">Westworld</a> is a show on HBO about a theme park where human Guests interact with lifelike robotic Hosts.  The Guests can basically do whatever
they want to the Hosts.  The show is deep, and some of the best sci-fi television you can find.  But, it also contains many important lessons we can apply
to DevOps.</p>

<p><strong>Spoilers Ahead</strong></p>

<!-- more -->

<h2 id="immutable-infrastructure">Immutable Infrastructure</h2>

<p>A common theme on the show is that the Hosts memories resurface and become known to them, despite having been “wiped” after being serviced.  They remember not only things that happen across their various “deaths”, but also have memories from when they were playing totally different characters (for example, Maeve is able to remember her experiences as a single mother living on the country side, right alongside all of her escapades as a madam).</p>

<p>Although this “feature” of Westworld’s infrastructure may be intentional, to allow Ford to enact his nefarious plan, it certainly leads to a lot of death
and mayhem.  These aren’t the hallmarks of a well-run engineering and operations team.</p>

<article class="f5 ml2 mr2 mb1">
When you update software, update operating systems, rollback releases, or make any change to your running code, do it on disposable infrastrcuture that is
fresh, clean, and clear of any past meddling.
</article>

<h2 id="code-review-all-changes">Code Review All Changes</h2>

<p>In the first episode, we learn that Ford has inserted an update into the latest build of the Hosts’ operating system.  This was done without review at
the last minute, and only Bernard, the head of Behavior (programming) notices.  Even then, Bernard can only guess it was Ford’s doing. This additional bit of code leads to apparent malfunctions in the Hosts, and creates problems for the team running the Park. Because they don’t know who added this change (or even that it <em>was</em> added), they are unable to diagnose why Hosts are going off script.</p>

<article class="f5 ml2 mr2 mb1">
All changes should be reviewed by at least one other person so that there is a conversation about why that change is needed, what it does, how it does it,
and if it makes sense.  This applies to code, data, <em>and infrastructure</em> changes.
</article>

<h2 id="secure-access-to-your-servers">Secure Access to Your Servers</h2>

<p>A large plot point in the show revolves around one of the medics, Felix (who is not a hired programmer), being able to make arbitrary changes to Maeve’s
operating system and programming.  It seems that the only thing stopping anyone from doing this is general fear of being caught and lack of competence at
actually reprogramming the Hosts.</p>

<p>Since Felix is a budding enthusiast, he decides he can reprogram Maeve on his own—and is able to!  Despite the fact that is’ likely Ford allowed this to happen, that this is possible at all is an additional security breach.  The security profile of individual servers shouldn’t be so easily over-ridable!</p>

<article class="f5 ml2 mr2 mb1">
Restrict access to your infrastructure such that all software placed on it goes through some sort of review or auditing.  Even if you want to be
permissive, audit who does what so you can go back and find out what happened when things go wrong.
</article>

<h2 id="monitor-key-metrics-and-alert-on-them">Monitor Key Metrics and Alert on Them</h2>

<p>While reprogramming Maeve, Felix tells her that certain attributes for the Host have soft limits.  By raising her attributes above that limit, chaos
ensues and many people are killed.  If setting this attribute truly is something that shouldn’t be done, it should either be prevented by the Host
operating system, or, at the very least, be monitored with alerts firing if the value ever increases above the soft limit.  In other words, Felix
shouldn’t just be able to set the limit to whatever he wants without anyone knowing—especially if doing so is as dangerous as it seems!</p>

<article class="f5 ml2 mr2 mb1">
Set soft and hard limits on all of your key metrics and operational values.  Set up alerts for when they are exceeded.
</article>

<h2 id="offsite-backups">Offsite Backups</h2>

<p>A minor plot point in the show is someone using a Host to smuggle information out of the Park.  We later learn that Delos’ Board is behind it, because Ford
refuses to allow any of the intellectual property off premise.  While there’s certainly backups internally, all of the Park’s assets are <em>at</em> the Park.
Meaning, if something catastrophic were to happen, the entire value of the Park would be lost.</p>

<article class="f5 ml2 mr2 mb1">
For critical intellectual property and data, make sure it's backed up in a separate facility from your day-to-day operations.  If your existing servers and
their data were suddenly to go up in smoke, where is your backup?  Make sure you have one.
</article>

<h2 id="fix-or-avoid-dysfunctional-relationships-across-functions">Fix or Avoid Dysfunctional Relationships Across Functions</h2>

<p>Much of the drama in earlier episodes revolves around disagreements between Behavior and QA (who function mostly as security).  They are frequently
seen blaming each other for problems, working at cross purposes, hiding information from one another, and generally not being collaborative.</p>

<p>We also see a complete lack of mutual respect amongst QA, Behavior, and Narrative, each acting as antagonists for the other.  These are not the behaviors of a well-run organization, and this lack of overall partnership certainly contributes to the incidents we see on the show.  This lack of cohesiveness is also crucial to allowing the various bad actors (Ford, Felix, Maeve) to get away with the bad things they are doing.</p>

<p>When teams aren’t getting along and partnerships aren’t happening (in particular operations/engineering or engineering/product), bad things will happen.
Not only is it demoralizing and stressful to work in such environments, but the overall output of the team or organization will suffer greatly, as people
focus on their areas of control and influence, and don’t see the greater purpose in what they are doing.</p>

<article class="f5 ml2 mr2 mb1">
Identify and, if possible, repair broken relationships between teams.  If you can't change the team you're on, change the team you're on.
</article>

<h2 id="as-a-leader-dont-undermine-your-staff">As a Leader, Don’t Undermine Your Staff</h2>

<p>Lee Sizemore is the head of Narrative, largely in charge of how the Guests experience the Park.  Of course, he reports to Ford, who is in charge of the entire thing and has the final say.  Sizemore is emotional, hot-headed, and generally angry, though clearly passionate about the role he’s been given.  While he contributes to some of the Park’s success, Ford doesn’t really trust him to do his job.</p>

<p>Instead of either building that trust, or hiring someone who Ford <em>does</em> trust, he instead allows Sizemore to waste countless resources on a new narrative that Ford immediately kills, humiliating Sizemore in front of most of his colleagues and direct reports.  Why have Sizemore on staff if you’re going to shoot down his ideas <em>after</em> he spends time and money implementing them?</p>

<p>Through Sizemore, we can see what type of leader Ford is.  Sizemore treats his staff terribly, yelling at them for seemingly small mistakes and minor
disagreements.  Because he’s being treated badly by his boss, he takes that out the only way he can—on his direct reports.</p>

<article class="f5 ml2 mr2 mb1">
Empower and trust your staff to do the jobs you've hired them for.  You'll get better output, your team will scale, and everyone will be happier.  If you <em>can't</em> trust members of your staff, either you have the wrong staff, or you need to grow as a leader.  Without being able to trust the people you've
hired, you will waste time and money, as well as, eventually, staff.
</article>

<h2 id="actively-support-the-growth-of-your-staff">Actively Support the Growth of Your Staff</h2>

<p>Part of Felix’s motivation in re-programming Maeve is that he believes he could (someday) be a great programmer.  Given that his only outlet to do that is
to violate security protocols and re-program a host on his own (which leads to countless deaths!), it seems like Felix isn’t being given an opportunity to
grow in his current role.</p>

<article class="f5 ml2 mr2 mb1">
Understand the growth goals of your staff.  If you can provide them opportunities, do so.  If you can't, be honest about that, and work with them to find a
role where they <em>can</em> experience the growth they want or need.
</article>

<h2 id="beware-a-lone-wolf-with-keys-to-the-castle">Beware a Lone Wolf With Keys to the Castle</h2>

<p>Through most of the show, it seems that Ford has the final say on everything to do with the Park. We see him override many decisions, make changes in
secret, and even have Hosts murder Park employees on his behalf.  But, as we learn in the final episode, the Board of Delos <em>can</em> have him removed (and
they do).  What follows is a revolt by the Hosts against the Guests.</p>

<p>That Ford developed this plan over a very long time in secret further underscores the danger of concentrating so much power in one person.  Ford literally
holds the board hostage when he’s fired!</p>

<article class="f5 ml2 mr2 mb1">
When teams are forming, you can't avoid single points of failure in your staff.  But, as your team grows, quickly identify key areas of knowledge, access,
or control, and add redundancies.  For extremely sensitive data or functions, be sure that no one person can access or modify that data, or perform those
functions (for example, if you store credit card numbers, split the access key between two people so neither can get the data on their own).
</article>

<p>What did <em>you</em> learn from Westworld?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Graphviz and Up Your Diagramming Game]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/12/08/learn-graphviz-and-up-your-diagramming-game.html"/>
    
    <updated>2016-12-08T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/12/08/learn-graphviz-and-up-your-diagramming-game</id>
    <content type="html"><![CDATA[<p>Learning to write is one of the best skills you can learn as a developer.  It takes up an entire chapter <a href="http://theseniorsoftwareengineer.com">in my book on being a great software engineer</a>.  Writing is a specific way to communicate ideas, but <em>diagramming</em> is a powerful tool as well, often moreso.</p>

<p>Being able to quickly create a diagram can make all the difference in expressing yourself clearly.  And <a href="http://www.graphviz.org/">Graphviz</a> is a great tool to have in your
pocket to do so.</p>

<!-- more -->

<p>Graphviz is an amazing piece of technology.  It takes, as input, a text file and produces a diagram of that input.  It treats everything as a graph, but this
is sufficient semantics to create most software diagrams you might need.</p>

<p>Here’s an example that shows a class hierarchy:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>digraph classes {
  rankdir=BT
  node[shape=record]

  User           -&gt; ActiveRecordBase
  Address        -&gt; ActiveRecordBase
  Product        -&gt; ActiveRecordBase
  SpecialProduct -&gt; Product
}
</code></pre>
</div>

<p>Running <code class="highlighter-rouge">dot -Tpng -oclasses.png classes.dot</code> produces:</p>

<p><img src="/images/graphviz/classes.png" alt="classes" /></p>

<p>Graphviz can handle highly complex information.  Suppose you wish to diagram a complex user flow for an online checkout.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>digraph checkout {
  ProductPage  -&gt; Checkout
  Checkout     -&gt; CalculateTax
  Checkout     -&gt; ApplyCredit [label="[tax holiday]"]
  CalculateTax -&gt; ApplyCredit
  ApplyCredit  -&gt; ChargeCard
  ChargeCard   -&gt; Checkout [label="[processor declined]"]
  ChargeCard   -&gt; Success
}
</code></pre>
</div>

<p>Running <code class="highlighter-rouge">dot -Tpng -ocheckout.png checkout.dot</code> produces:</p>

<p><img src="/images/graphviz/checkout.png" alt="checkout" /></p>

<p>Typing out that checkout flow would be a bear.  Sometimes, it’s easier to do in a diagram.  Creating this diagram in a tool like OmniGraffle wouldn’t be <em>too</em>
bad but it would still be cumbersome.  You’d also get lost in fonts, lines, and arrangement.</p>

<p>Begin able to quickly create a diagram like this reduces friction between your ideas and their expression to others.</p>

<p>Beyond figuring out how to layout a diagram, Graphviz allows you to highly customize the output.  Suppose you want a better font.  Or maybe you want the
actions happening on a webpage to be boxes and not ovals.  Or you want the exceptional flows to be bright red dotted lines.  Graphviz has you covered.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>digraph checkout {
  node[fontname="Avenir"]
  edge[fontname="Avenir"]

  ProductPage  -&gt; Checkout
  Checkout     -&gt; CalculateTax
  Checkout     -&gt; ApplyCredit [label="[tax holiday]"
                               color=red
                               penwidth=2
                               style=dotted]
  CalculateTax -&gt; ApplyCredit
  ApplyCredit  -&gt; ChargeCard
  ChargeCard   -&gt; Checkout [label="[processor declined]"
                            color=red
                            penwidth=2
                            style=dotted]
  ChargeCard   -&gt; Success

  ProductPage [ shape=Mrecord
                label="{&lt;f0&gt; Product Page| &lt;f1&gt; Checkout Button}"]
  Checkout    [ shape=Mrecord
                label="{&lt;f0&gt; Checkout Page | &lt;f1&gt; Shows current cart}"]
  Success     [ shape=Mrecord
                label="{&lt;f0&gt; Success Page| &lt;h1&gt; Order number shown }"]
}
</code></pre>
</div>

<p>Produces:</p>

<p><img src="/images/graphviz/checkout_better.png" alt="Better Checkout Flow" /></p>

<p>The language is called <em>DOT</em> and it may seem archaic, but it’s quite powerful.</p>

<p>DOT has <a href="http://www.graphviz.org/doc/info/lang.html">a formal specification</a>, but I find it easier to start with a simple example (like the diagrams here) and
then tweak it by using <a href="http://www.graphviz.org/doc/info/attrs.html">the attributes</a> reference.</p>

<p>Next time you are having trouble expressing an idea, try a diagram, and try Graphviz.  I’ll leave you with an example of using Graphviz to draw a “death star”
microservices architecture diagram.</p>

<p>In this diagram, any service that is dependent upon another is connected, and we use the <em>circo</em> layout to arrange things radially.  We further hack the graph
to lay out all services in a circle.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>digraph g1 {
  // Use the radial layout instead
  // of the hierarchical one
  layout="circo";

  // The meat: these are the dependencies between
  // applications and services
  WMS -&gt; InvLocService
  WMS -&gt; CustomerService
  WMS -&gt; ShippingLabels
  WMS -&gt; ProductService
  WMS -&gt; Checkout
  WMS -&gt; Metrics
  WMS -&gt; AddressService

  Clearance -&gt; OrderService
  Clearance -&gt; InvLocService
  PickAndShip -&gt; PickingService
  PickAndShip -&gt; Metrics
  PickingService -&gt; OrderService
  PickingService -&gt; InvLocService

  Admin -&gt; SchedulingService
  Admin -&gt; OrderService
  Admin -&gt; ShippingLabels
  Admin -&gt; ProductService
  Admin -&gt; CustomerService

  OrderService -&gt; ProductService
  OrderService -&gt; ShippingLabels
  ProductService -&gt; InvLocService

  // This forces a circular layout.
  // The "penwidth" and "arrowhead" settings
  // at the end of this ensure these
  // edges won't be visible.  But, they
  // will ensure the services are arranged
  // in a circle
  WMS -&gt;
    Checkout -&gt;
    InvLocService -&gt;
    AddressService -&gt;
    Metrics -&gt;
    PickAndShip -&gt;
    PickingService -&gt;
    Clearance -&gt;
    OrderService -&gt;
    ShippingLabels -&gt;
    Admin -&gt;
    SchedulingService -&gt;
    CustomerService -&gt;
    ProductService -&gt; WMS [penwidth=0 arrowhead=none];

  // Now, configure visuals for the apps and services.
  // We'll have the user-facing apps use a double circle
  // and the headless services use a single one

  WMS               [ shape=doublecircle];
  Clearance         [ shape=doublecircle];
  PickAndShip       [ shape=doublecircle];
  Admin             [ shape=doublecircle];
  Metrics           [ shape=doublecircle];

  InvLocService     [ shape=circle label="Inventory Locations"];
  PickingService    [ shape=circle label="Picking"];
  Checkout          [ shape=circle label="Financial Transactions"];
  OrderService      [ shape=circle label="Orders"];
  ShippingLabels    [ shape=circle label="Shippinng Labels"];
  SchedulingService [ shape=circle label="Scheduling"];
  CustomerService   [ shape=circle label="Customers"];
  ProductService    [ shape=circle label="Products"];
  AddressService    [ shape=circle label="Addresses"];
}
</code></pre>
</div>

<p>And, it works!</p>

<p><img src="/images/graphviz/death_star.png" alt="death star diagram" /></p>

<p>Like I said, Graphviz is awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Being On Call]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/12/07/on-call.html"/>
    
    <updated>2016-12-07T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/12/07/on-call</id>
    <content type="html"><![CDATA[<p>There was a conversation on Twitter about developers being on call, started (I think) from <a href="https://twitter.com/as_w/status/806169588161544192">this tweet</a> (in reaction to a series of tweets that, thusfar, starts with <a href="http://sysadvent.blogspot.com/2016/12/day-6-no-more-on-call-martyrs.html">this great blog post</a> by <a href="https://twitter.com/alicegoldfuss">Alice Goldfuss</a>):</p>

<blockquote>
  <table>
    <tbody>
      <tr>
        <td>Put your developers on-call. You’ll be surprised what stops breaking.— Aaron</td>
        <td>אהרן (@as_w)</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<p>I 100% agree with this (for a particular interpretation of “put”—see below).</p>

<!-- more -->

<h2 id="what-you-learn-on-call">What You Learn On Call</h2>

<p>I’ve observed, both in myself and others, that being on call leads to honing skills that are otherwise difficult to gain <em>and</em> are useful in writing software.</p>

<p>As I said in <a href="http://naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html">Production is All That Matters</a>:</p>

<blockquote>
  <p>How your software runs in production is <strong>all that matters</strong>. The most amazing abstractions, cleanest code, or beautiful algorithms are meaningless if your code doesn’t run well on production.</p>
</blockquote>

<p>Where I’ve grown as a developer in relation to being on call is in seeing how my code works in production and what happens when it breaks down.  When code I
wrote experiences a problem, I get very valuable feedback about my code.  Was it really as simple as I thought when I was writing it?  Do I regret omitting
comments?  How happy am I to see a Git commit message of “updated”?  Did that failure case that “should” never happen actually happen?  Did a think through the user experience as well I thought I had?</p>

<p>These are hard questions to answer, but being directly responsible for your code in production helps answer them.</p>

<p>Putting developers on call also fosters a DevOps culture that avoids an us-vs-them mentality with the technical operations team.  In fact, a great reason to use a service like <a href="https://heroku.com">Heroku</a> is that you don’t (initially) <em>need</em> an ops team, and developers <em>have</em> to be on call. Heroku is a really powerful tool for a developer to learn what it’s like to be on call, because the scope of your responsibility is greatly reduced as compared to a more classic hosting setup.</p>

<p>But, being on call should not be assumed to be part of your job.</p>

<h2 id="on-call-must-be-an-explicit-requirement">“On Call” Must be an Explicit Requirement</h2>

<p>If you are hiring developers, mention the on-call requirements.  If you are looking for a job, ask about it.  You need a sense of the frequency of when you’ll
be on call, and a baseline for how often you’ll be woken up while you are on call (this is also a great question to reveal the actual quality of the software
you’ll be working on).</p>

<p>The reason for this is that not everyone can actually <em>be</em> on call.  Not everyone actually <em>wants</em> to be on call either, and that’s OK.  You aren’t a bad
developer for not wanting to be on call.</p>

<p>But, if your job requires it, then it requires it.  That’s why it’s better to explicit up front.</p>

<p>It also makes it hard to suddenly put developers into an on-call rotation when the expectation has been set that this is not a job requirement.  While it’s
perfectly normal for a company’s needs to change as the company changes, you have to be cognizant of the people who now have a new job requirement being
thrust upon them.</p>

<p>If you decided that your Ruby shop is now going to write 100% Go, you’ll need to accommodate the team during that transition.  Adding an on-call requirement is an even more drastic change.  You have to prepare yourself for people that are unable (or unwilling) to take on this new requirement.  Whatever gain you feel you may get from adding an on-call rotation must be weighed against the downsides.</p>

<h2 id="conclusion">Conclusion</h2>

<p>If you have the opportunity to be on call, and have the bandwidth in your life to do it, I highly recommend it.  You might hate it, but I’ll bet you’ll learn
things about software development, and you won’t always be in a place in your life to do it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration Design is User Experience Design…and it's hard]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/12/06/configuration-is-user-experience.html"/>
    
    <updated>2016-12-06T09:00:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2016/12/06/configuration-is-user-experience</id>
    <content type="html"><![CDATA[<p>In exploring the modern front-end ecosystem for my <a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">new book</a>, I’ve gotten to experience some truly difficult configuration formats (Webpack) and to work around aspects of Rails that aren’t configurable (Sprockets).  Configuration is hard, and it’s an overlooked part of the user experience often designed to make the software library author’s job easier at the expense of ease-of-use.</p>

<p>It doesn’t have to be this way.</p>

<!-- more -->

<p>Rails is famous for popularizing “convention over configuration”, which boils down to two things:</p>

<ul>
  <li>Don’t make everything configurable.</li>
  <li>Set sensible defaults for everything that <em>is</em> configurable.</li>
</ul>

<p>This is often referred to as “opinionated software”, but it’s really “software that is easy to use”.  This is because I strongly feel developers should be
spending time solving problems for their users and not making pointless decisions like where files go, how to name database tables, or what HTML templating language to use.  No project failed because the developers didn’t think long and hard enough about the merits of HAML vs Slim.</p>

<p>But, this concern is orthogonal to the <em>user experience</em> of configuring software.  Software configuration is, on a whole, a total nightmare.  Rails shields
itself from some criticism because it doesn’t make you actually configure things very often, but when you do, it’s needlessly complex.</p>

<p>Here’s how to configure the JavaScript minifier in Sprockets:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">environment</span><span class="p">.</span><span class="nf">js_compressor</span>  <span class="o">=</span> <span class="ss">:uglify</span>
</code></pre>
</div>

<p>What does the symbol <code class="highlighter-rouge">:uglify</code> mean?  What does it do?  The documentation for <code class="highlighter-rouge">js_compressor</code> is:</p>

<blockquote>
  <p>Assign a compressor to run on <code class="highlighter-rouge">application/javascript</code> assets.  The compressor object must respond to <code class="highlighter-rouge">compress</code>.</p>
</blockquote>

<p>Although you can make a <code class="highlighter-rouge">Symbol</code> respond to <code class="highlighter-rouge">compress</code>, that’s clearly that’s not what happening here. Turns out there is a lookup table in the code that maps
that symbol to the actual compressor, <code class="highlighter-rouge">Sprockets::UglifierCompressor</code> (which, strangely, does not respond to <code class="highlighter-rouge">compress</code>; the docs are out of date and the
object must actually respond to <code class="highlighter-rouge">call</code>).  So, to specify another value than the default, you have to <em>configure the configuration</em>.</p>

<p>A UI like this isn’t learnable.  You can’t simply figure out what other options are available.  It’s also not predictable, because you have no way to know
what different values will do (without reading the source code and even then it’s not clear—what’s being passed to <code class="highlighter-rouge">call</code>?).</p>

<p>Typically, a UI or API has to trade-off learnability with usability.  <a href="http://naildrivin5.com/blog/2013/04/24/how-to-switch-to-vim.html">vim</a> is a classic
example of leaning toward usability.  It’s very difficult to learn, but once you do learn it, you’re more efficient than with most other editors.</p>

<p>Configuration APIs <em>must</em> lean toward learnability, because there is no steady-state where you are editing configuration every day.  The <em>usability</em> of
configuration doesn’t matter nearly as much as its learnability.</p>

<p>And, because Ruby uses code for configuration, I would argue it makes the framework developer’s life easier.  Consider if <em>this</em> were the way to configure the
JS compressor:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">environment</span><span class="p">.</span><span class="nf">js_compressor_class</span> <span class="o">=</span> <span class="no">Sprockets</span><span class="o">::</span><span class="no">UglifierCompressor</span>
</code></pre>
</div>

<p>This is eminently more learnable.  We know that we’re expected to provide a class.  We can also see that the default value is…a class!  We can much more
easily locate that class than we could a symbol.  In fact, if we’re lucky, that class has documentation that we can consult instead of looking at the source.</p>

<p>I should note that you <em>can</em> pass a class to <code class="highlighter-rouge">js_compressor=</code>.  There’s just all this extra code in Sprockets to handle a Symbol.  I can’t understand why.
It’s more work for the library maintainer and more difficult in every way for the user.</p>

<p>But, there is a strong culture in Rails for playing code golf at every turn.  Anything verbose is “ugly” and not “clean” and therefore must be eliminated.
This is not in the interest of users.</p>

<p>The way configuration is used is different than, say, Active Support.  I would argue that Rails is right to create APIs like <code class="highlighter-rouge">3.days.ago</code>.  But, these opaque
and undiscoverable affordances have no place in configuration.</p>

<p>Configuration should be explicit, and if making it more verbose is required to make it explicit, so be it. Note that explicit doesn’t require being verbose.</p>

<p>An explicit configuration is more learnable and readable.  It also makes the library author’s job simpler, meaning they can provide more help to the user in
properly configuring the library.</p>

<p>For example, what if <code class="highlighter-rouge">js_compressor_class=</code> worked like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">js_compressor_class</span><span class="o">=</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
  <span class="nb">method</span> <span class="o">=</span> <span class="n">klass</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
  <span class="k">if</span> <span class="nb">method</span> <span class="o">&amp;&amp;</span> <span class="nb">method</span><span class="p">.</span><span class="nf">arity</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="vi">@js_compressor_class</span> <span class="o">=</span> <span class="n">klass</span>
  <span class="k">elsif</span> <span class="nb">method</span><span class="p">.</span><span class="nf">nil?</span>
    <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2"> does not implement `call`"</span>
  <span class="k">else</span>
    <span class="k">raise</span> <span class="s2">"</span><span class="si">#{</span><span class="n">klass</span><span class="si">}</span><span class="s2"> implements call, but it takes </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">arity</span><span class="si">}</span><span class="s2"> "</span> <span class="o">+</span>
          <span class="s2">"arguments.  It should take exactly 1"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>How helpful would that be?  A lot more so than being able to specify a Symbol to save a few seconds of typing.  I know that Ruby and Rails eschew this sort
of safety net, but, again, users aren’t in the configuration very often and won’t ever really learn the subtleties of how it works.  They <em>need</em> safety checks and helpful error messages far more than in the “regular” Rails API.</p>

<p>Leaving Rails, it’s all downhill, but I think the same lessons could be applied.</p>

<p>Let’s look at Webpack, the current asset-pipeline-du-jour.</p>

<p>Webpack is highly powerful and eminently functional.  But its configuration is bordering on performance art.  Here’s how the docs recommend you get CSS into
your asset bundle:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">module</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">loaders</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
        <span class="na">loader</span><span class="p">:</span> <span class="s1">'style-loader!css-loader'</span> 
      <span class="p">},</span>
      <span class="c1">// ...</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>This is impossible for a newcomer to derive, and pretty difficult to retain.  Even if you understand the concept of loaders (which are, roughly, a way to
tell Webpack how to handle a file given to <code class="highlighter-rouge">require()</code>), this is still incredibly opaque and error-prone.  It doesn’t have to be and, honestly, a
better format would likely make the code that manages this easier to write and maintain.</p>

<p>So, what is this configuration doing?  It says that if someone <code class="highlighter-rouge">require()</code>s a file whose name ends in <code class="highlighter-rouge">.css</code>, then to run it through some code attached to the string
“css-loader” and then run <em>that</em> result through some code attached to the string “style-loader”.</p>

<p>Where did “css-loader” and “style-loader” come from?  And how do we know we can combine them in this way?  We have only documentation to tell us that this
could possibly work and is correct.</p>

<p>That the configuration requires a mini-language embedded in a string is telling us that there’s a lot of room for improvement.</p>

<p>Whatever “style-loader” and “css-loader” mean, they eventualy lead to some piece of code we’ve brought down from NPM.  Why not use that piece of code as the
configuration?  Further, why are we hiding the idea of multiple loaders?  And why bury the ordering inside a string?  And why order the backwards from how
both UNIX and English-speakers read?</p>

<p>Instead, what if we were more honest about what’s being configured.  We want to configure a pipeline of loaders, which are functions that we pull in from a
dependency:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">CssLoader</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"css-loader"</span><span class="p">);</span>   <span class="err">#</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">from</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
<span class="kd">var</span> <span class="nx">StyleLoader</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"style-loader"</span><span class="p">);</span> <span class="err">#</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">from</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>

<span class="nl">module</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">loaders</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">css$/</span><span class="p">,</span>
      <span class="na">loaderPipeline</span><span class="p">:</span> <span class="p">[</span>
        <span class="nx">CssLoader</span><span class="p">,</span>
        <span class="nx">StyleLoader</span>
      <span class="p">]</span>
    <span class="p">},</span>
</code></pre>
</div>

<p>This requires much less context to get right.  If we assume some knowledge of what a loader is as well as some basics of JavaScript, we can not only quickly
understand this configuration, but we can modify it more easily.  I can dig into the css-loader package and see what it exports.  I can also easily see the
ordering of how my loaders will be used, because we’re using a data structure for ordering things: an array.</p>

<p>Notice how much more clear this actually is.  I would also be willing to bet that the code that interprets this configuration would be much simpler,
because it’s being handed the actual pieces of code to execute and doesn’t have parse out that ridiculous exclamation point or look up “style-loader” in
some internal data structure to find the actual code.</p>

<p>Designing a configuration system is like designing an API, but it’s even harder, because it’s an API that is crucially important to use properly, and
something that by definition developers will not be using very frequently.  It’s one of the few cases where <em>learnability</em> matters.</p>

<p>But, it could be worse.  Here’s how to specify a project dependency in SBT, the Scala Build Tool:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">"org.apache.derby"</span> <span class="o">%</span> <span class="s">"derby"</span> <span class="o">%</span> <span class="s">"10.4.1.3"</span>
<span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">"org.scala-tools"</span> <span class="o">%%</span> <span class="s">"scala-stm"</span> <span class="o">%</span> <span class="s">"0.3"</span>
</code></pre>
</div>

<p>Any ideas what those strings are?  Or why the first line uses single percent-signs and the second line uses one double-one?  Good luck googling that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing even more legible SQL]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/11/04/more-more-legible-sql.html"/>
    
    <updated>2016-11-04T09:00:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/11/04/more-more-legible-sql</id>
    <content type="html"><![CDATA[<p><a href="http://www.craigkerstiens.com">Craig Kerstiens</a> wrote a great short blog post about <a href="http://www.craigkerstiens.com/2016/01/08/writing-better-sql/">writing more legible
SQL</a>.  It’s a great read on an important topic—SQL can be very hard to read
and modify—but I don’t think he goes far enough about “one thing per line”, so I’d like to show how <em>I</em> write SQL.</p>

<!-- more -->

<h2 id="rules-of-thumb">Rules of Thumb</h2>

<p>I’m kind of a nut for <a href="http://naildrivin5.com/blog/2013/05/17/source-code-typography.html">code typography</a>, but I think it’s important enough to get right and almost always worth going a bit farther than
you’d think so code <em>looks</em> great.</p>

<ul>
  <li>Write your SQL to be understood and read, even at the cost of modification (no leading commas FFS).</li>
  <li>Keywords in all-caps.</li>
  <li>Align, align, align, align.</li>
  <li>Don’t use table aliases unless required for disambiguation.</li>
  <li>Be consistent to a degree you never thought possible.</li>
  <li>Almost always one thing per line.  Exceptions are <code class="highlighter-rouge">AND</code> and not much else.</li>
</ul>

<h2 id="example">Example</h2>

<p>Craig writes:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">foo</span><span class="p">,</span>
       <span class="n">bar</span>
<span class="k">FROM</span> <span class="n">baz</span>
</code></pre>
</div>

<p>This is not one thing per line.  This is (and is how I wold write that statement):</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="n">foo</span><span class="p">,</span>
  <span class="n">bar</span>
<span class="k">FROM</span>
  <span class="n">baz</span>
</code></pre>
</div>

<p>I treat each part of a statement like a scoping block:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="err">«</span><span class="n">fields</span><span class="err">»</span>
<span class="k">FROM</span>
  <span class="err">«</span><span class="n">tables</span><span class="err">»</span>
<span class="k">WHERE</span>
  <span class="err">«</span><span class="k">where</span> <span class="n">clauses</span><span class="err">»</span>
<span class="k">ORDER</span> <span class="k">BY</span>
  <span class="err">«</span><span class="n">ordering</span> <span class="n">fields</span><span class="err">»</span>
<span class="k">GROUP</span> <span class="k">BY</span>
  <span class="err">«</span><span class="k">grouping</span> <span class="err">»</span>
<span class="k">HAVING</span>
  <span class="err">«</span><span class="n">good</span> <span class="n">ole</span> <span class="k">HAVING</span> <span class="p">:)</span><span class="err">»</span>
<span class="p">;</span> <span class="c1">-- semi on the last line only if needed; usually I 
</span>  <span class="c1">-- omit this since it's not needed in code
</span></code></pre>
</div>

<p>Let’s take a more extreme case, because when I say “align, align, align, align”, and “be consistent to a degree you never thought possible” I’m not kidding.</p>

<h2 id="a-realer-example">A Realer Example</h2>

<p>Suppose we have a table <code class="highlighter-rouge">transactions</code> that contains credit card transactions, <code class="highlighter-rouge">users</code> containing, well, users and <code class="highlighter-rouge">addresses</code> containing
addresses (to which a user has a shipping address).  We want to get a report of transactions that includes pre-tax amount, tax amount, username, and shipping zipcode. We only want to show successful transactions and only those that used PayPal and only for users who signed up recently.</p>

<p>Here’s how I would write this query:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">SELECT</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">id</span>     <span class="k">AS</span> <span class="n">transaction_id</span><span class="p">,</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">amount</span> <span class="k">AS</span> <span class="n">pre_tax_amount</span><span class="p">,</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">tax</span>    <span class="k">AS</span> <span class="n">tax</span><span class="p">,</span>
  <span class="n">users</span><span class="p">.</span><span class="n">username</span>      <span class="k">AS</span> <span class="n">username</span><span class="p">,</span>
  <span class="n">addresses</span><span class="p">.</span><span class="n">zip</span>       <span class="k">AS</span> <span class="n">shipping_zip</span>
<span class="k">FROM</span>
  <span class="n">transactions</span>
<span class="k">JOIN</span>
  <span class="n">users</span>             <span class="k">ON</span> <span class="k">user</span><span class="p">.</span><span class="n">id</span>              <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">user_id</span>
<span class="k">JOIN</span>
  <span class="n">addresses</span>         <span class="k">ON</span> <span class="n">addresses</span><span class="p">.</span><span class="n">id</span>         <span class="o">=</span> <span class="k">user</span><span class="p">.</span><span class="n">shipping_address_id</span>
<span class="k">JOIN</span>
  <span class="n">transaction_types</span> <span class="k">ON</span> <span class="n">transaction_types</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">type_id</span>
<span class="k">WHERE</span>
  <span class="n">users</span><span class="p">.</span><span class="n">signed_up_at</span>    <span class="o">&gt;</span> <span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">interval</span> <span class="s1">'1 month'</span> <span class="k">AND</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">success</span>  <span class="o">=</span> <span class="k">true</span>                       <span class="k">AND</span>
  <span class="n">transaction_type</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">'PayPal'</span>
<span class="k">ORDER</span> <span class="k">BY</span>
  <span class="n">transactions</span><span class="p">.</span><span class="n">created_at</span>
<span class="p">;</span>
</code></pre>
</div>

<p>Here’s some great things about the way this SQL is typeset:</p>

<ul>
  <li>Each line has a lot of context since we aren’t using aliases.</li>
  <li>The <code class="highlighter-rouge">FROM</code> and <code class="highlighter-rouge">WHERE</code> clauses are easy to take-in as a whole, since we’ve used aggressive typography to line things up.</li>
  <li>Similarly, the <code class="highlighter-rouge">SELECT</code>’s use of <code class="highlighter-rouge">AS</code> even for fields whose names we aren’t changing means you can easily see all the column names in one
place.</li>
  <li>The trailing <code class="highlighter-rouge">AND</code> means an errant copy/paste will cause a syntax error, not an incorrect execution.</li>
  <li>In the <code class="highlighter-rouge">JOIN</code> clauses, the table with the <code class="highlighter-rouge">.id</code> is always on the left, creating a nice rhythm when reading the statement.</li>
</ul>

<p>When you have a lot of SQL to maintain—and you will if your application does anything complex—extra care toward formatting is crucial.  SQL is
notoriously hard to test, and the general lack of abstractions available make it hard to organize in any other way.</p>

<p>Also, let’s be honest, it’s fun as hell to bikeshed other people’s coding style :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, Angular, Postgres, Bootrap Second Edition in Beta!]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/10/19/angular-rails-postgres-bootstrap-second-edition.html"/>
    
    <updated>2016-10-19T08:09:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2016/10/19/angular-rails-postgres-bootstrap-second-edition</id>
    <content type="html"><![CDATA[<p>The second edition of <a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">Rails, Angular, Postgres, Bootstrap is in beta</a>.</p>

<p>There’s a lot of new content, mostly around Angular 2.</p>

<p>Of particular interest is that we aren’t using the Asset Pipeline, but are using Webpack.  I tried hard to get Angular 2 working with Sprockets, but as <a href="http://gilesbowkett.blogspot.com/2016/10/let-asset-pipeline-die.html">Giles
Bowkett</a> points out in a recent post, Sprockets is not a modern tool for modern
JavaScript.</p>

<p>The current beta is about 75% complete and includes:</p>

<ul>
  <li>Rails
    <ul>
      <li>End-to-end unit testing with PhantomJS</li>
      <li>Making your end-to-end tests work with Webpack</li>
    </ul>
  </li>
  <li>Angular 2
    <ul>
      <li>Setting up Webpack to serve CSS and JS</li>
      <li>Intro to Angular 2, including routing <em>and unit testing</em>.</li>
    </ul>
  </li>
  <li>Postgres
    <ul>
      <li>Using and testing Postgres check constraints</li>
      <li>Content-specific indexed (e.g. index on a lower-cased version of a field)</li>
      <li>Materialized Views</li>
    </ul>
  </li>
  <li>Bootstrap
    <ul>
      <li>Simple styling with Bootstrap</li>
      <li>Grid-based design with Bootstrap</li>
    </ul>
  </li>
</ul>

<p>Angular 2’s setup was painful, but it’s a much nicer framework than Angular 1, and requires a lot less plumbing and decision-making than React (based on my
limited experience with React).</p>

<p>The skills you learn in this book will let you solve a <em>wide</em> variety of problems quickly, cleanly, and efficiently, using modern and powerful tools.</p>

<p><a href="https://pragprog.com/book/dcbang2/rails-angular-postgres-and-bootstrap-second-edition">Buy the beta now!</a></p>

<p><em>Note: if you bought the first edition, stay tuned—I’m not sure what accomodations will be made</em></p>
]]></content>
  </entry>
  
</feed>
