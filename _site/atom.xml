<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2016-06-15T06:43:01-07:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: Doubling-down on Resource-based Design]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/15/imagined-rails-6-doubling-down-on-resource-based-design.html"/>
    
    <updated>2016-06-15T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/15/imagined-rails-6-doubling-down-on-resource-based-design</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended changes that encourage a more resource-based design.</p>

<!-- more -->

<h2 id="resourceful-design-is-cleaner">Resourceful Design is Cleaner</h2>

<p>I agree with DHH that <a href="http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/">if you firmly stick to a resource-based design, and avoid RPC-style routes, you will have cleaner code and cleaner controllers</a>.  Because of this, It’s surprising to me that Rails requires you to use <code class="highlighter-rouge">config/routes.rb</code> for basic, resourceful routing.</p>

<p>To my mind, creating a class named <code class="highlighter-rouge">WidgetsController</code> in <code class="highlighter-rouge">app/controllers</code> that inherits from <code class="highlighter-rouge">ApplicationController</code> and contains a method <code class="highlighter-rouge">index</code> is a pretty strong and unambiguous message from a developer that they want the route <code class="highlighter-rouge">/widgets</code> to respond to an HTTP <code class="highlighter-rouge">GET</code>.</p>

<p>The way I see a lot of developers deal with this (admittedly tiny) boilerplate is to declare that a resource responds to all verbs, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c1"># config/routes.rb</span>

<span class="n">resources</span> <span class="ss">:widgets</span>

<span class="c1"># app/controllers/widgets_controller.rb</span>
<span class="k">class</span> <span class="nc">WidgetsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>

  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@widget</span> <span class="o">=</span> <span class="no">Widgets</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="c1"># that's it</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This tells Rails that your application responds to all the magic seven routes for a widget, yet implements only one of them.  It makes <code class="highlighter-rouge">rake routes</code> confusing.  Developers do it because doing <code class="highlighter-rouge">resources :widgets, only: [ :show ]</code> is a pain in the ass.</p>

<p>I also see developers rush through their controller design and add RPC-style endpoints.  For example, if we wanted to
distinguish archiving a widget from deleting it, most developers would make an <code class="highlighter-rouge">archive</code> method.  If, instead, you created a
resource called <code class="highlighter-rouge">ArchivedWidgets</code> and accepted a POST, that would be more resourceful and likely much cleander design.</p>

<p>If resourceful routes were derived from controllers, it would also make it very easy to spot deviations and have conversations around them.  In an ideal Rails application, <code class="highlighter-rouge">config/routes.rb</code> wouldn’t change that often, so if it did, it’s a big red flag to talk about the design of the feature that changed it.</p>

<p>One hard part about doing this is if your resource isn’t an ActiveRecord, there is a bit of friction you have to fight through.</p>

<h2 id="encouraging-non-activerecord-resources">Encouraging Non-ActiveRecord Resources</h2>

<p>If it were just as easy to create non-ActiveRecord resources as it were ActiveRecord-based ones, this would further encourage resource-based design.  There are two problems to solve here.</p>

<p>The first is how to provide a non-ActiveRecord object all the needed functionality that Rails’ form and URL helpers expect.  This can be achieved with Active Model, though Active Model is a pretty large interface.</p>

<p>The second problem is how to properly assemble such a resource using possibly disparite bits of Active Records.  In my post, I listed an “Account” resource as an example.  In our hypothetical application, the account view shows some user information, such as their name and email, but also information about their most recent order.</p>

<p>This is typically solved via some sort of presenter framework, and there are a <strong>lot</strong> of them.  Their existence says to me that Rails developers want such a framework, and Rails could greatly help us by providing one that was easy to use and full-featured.</p>

<p>The “presenter” situation in real Rails apps isn’t good.  Where I work, across our Rails apps, we have:</p>

<ul>
  <li>Hand-created presenters just using <code class="highlighter-rouge">class</code></li>
  <li>Presenters using our <a href="http://github.com/stitchfix/immutable-struct">immutable-struct</a> library</li>
  <li>View Models created by hand</li>
  <li>Mixins that add view-specific methods to ActiveRecords</li>
  <li>Methods in ActiveRecords only for displaying derived or formatted data in a view</li>
  <li>Classes that mix in some of Active Model’s modules (these were created before Rails 4 added a single ActiveModel mixin)</li>
  <li>A base presenter that delegates to a wrapped ActiveRecord using <code class="highlighter-rouge">method_missing</code>.</li>
</ul>

<p>My team has done a good job of keeping things consistent in many other areas, but none of these solutions are great, which is probably why we have used so many.</p>

<p>My post postulated a DSL to create these resources.  I’m not hooked on that, but I think the general needs developers have are:</p>

<ul>
  <li>works with form and URL helpers</li>
  <li>allows delegation of methods directly to other objects</li>
  <li>easily use Rails helpers to implement methods for derived or formatted values</li>
</ul>

<p>I don’t think ActiveModel is this.  ActiveModel is both too much and not enough, and I think it fails at encouraging both
resource-based design as well as another Rails-ism that most people ignore: model-driven design.</p>

<p>Up until Rails 4.2, a model was a database table was a model.  With ActiveModel this isn’t the case, however Rails has totally
failed at helping developers adopt model-driven design.</p>

<p>But, encouraging resource-oriented design for controllers, and providing a simple framework for creating non-ActiveRecord
models, I think this could be saved.</p>

<p>Taking our account example, suppose that the account screen wants to allow users to modify some of those details.  Suppose further that we show a user’s subscription frequency on this page, too, and that it is modifiable.</p>

<p>Most Rails developers would solve this in one of these ways:</p>

<ul>
  <li>Put the update logic in the controller - call into the <code class="highlighter-rouge">User</code> and then the <code class="highlighter-rouge">Subscription</code>.</li>
  <li>Create a service object or command object that does the work</li>
  <li>Put it all into either <code class="highlighter-rouge">User</code> or <code class="highlighter-rouge">Subscription</code></li>
</ul>

<p>The Rails way is to put the logic on a model, and if we could create an <code class="highlighter-rouge">Account</code> model just as easily as we created our <code class="highlighter-rouge">User</code>
and <code class="highlighter-rouge">Subscription</code> models, we could do this the Rails way, but without bloating our ActiveRecords:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActionResource</span>
  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
    <span class="no">User</span><span class="p">.</span><span class="nf">transaction</span> <span class="k">do</span>
      <span class="n">user</span><span class="p">.</span><span class="nf">email</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:email</span><span class="p">]</span>
      <span class="n">subscription</span><span class="p">.</span><span class="nf">cadence</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:subscription_cadence</span><span class="p">]</span>
      <span class="k">if</span> <span class="n">valid?</span> <span class="c1"># provided by ActionResource</span>
        <span class="n">user</span><span class="p">.</span><span class="nf">save</span>
        <span class="n">subscription</span><span class="p">.</span><span class="nf">save</span>
      <span class="k">end</span>
    <span class="k">end</span>    
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This very much follows the Rails Way of “model-driven design” and/or Rails’ interpretation of what OO is.</p>

<p>To be clear, I don’t think this is necessarily the best way to write code in a Rails app, but this is <em>much</em> better than just throwing everything into your User model.  In fact, if a complex Rails app aggressively pursued this sort of design, it might result in fairly clean code, comprised of objects that don’t do all that much (which is what we’re all after by making services).</p>

<p>I can only assume this is the sort of thing DHH has in mind and why he tends to eschew any “blessing” of objects that aren’t models.  It’s too bad that there hasn’t been clearer instruction and explanation as to how it would work for non-trivial cases.  But, by encouraging a resource-based view of controllers and making it dead-simple to create non-ActiveRecord models, Rails might more naturally encourage the type of design it seems to favor.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: Out with JQuery, in With ES6]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6.html"/>
    
    <updated>2016-06-14T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended the removal of jQuery, and the change from CoffeeScript to ES6.</p>

<!-- more -->

<h2 id="es6-is-where-its-at">ES6 is Where It’s At</h2>

<p>I see the appeal of CoffeeScript.  I advocated hard for it on my team and we have a lot of code using it.  JavaScript ES5 is a very verbose language, wrought with easy-to-make errors.  CoffeeScript takes a lot of the pain away.  But, so does ES6.</p>

<p>ES6 has the virtue of being somewhat standard and supportable in modern browsers without compiling down to ES5, but it compiles down to ES5 just fine.  It’s the state of the art.  The reasons to use CoffeeScript all apply to ES6, but ES6 is more standard and has support for modules.  CoffeeScript (and the Rails asset pipeline) do not support modules in any direct way.</p>

<p>Modules in JavaScript are roughly equivalent to Ruby classes or perhaps gems, depending on how much you put in them.</p>

<p>Currently, Rails produces per-view CoffeeScript files similar to what it does with CSS.  So, for a widgets resource, we get <code class="highlighter-rouge">widgets.coffee</code>.  This does not create any artifact in JavaScript code related to widgets.  Similar to the sibling <code class="highlighter-rouge">.css</code> file, these files are compiled into one <code class="highlighter-rouge">application.js</code> at runtime and included <em>and executed</em> on every single page, not just the widgets pages.</p>

<p>Since it’s run on every page, you have to be careful that any code that’s executed and grabs DOM elements does so in a way that doesn’t inadvertenly grab slimilar DOM elements that might exist elsewhere in your application.  The bigger your app gets, the harder it is to be sure you’ve done this right.  The only way to be sure is to maintain extensive browser-based tests—something Rails provides no support for out of the box.</p>

<p>Where I work, we solve this by doing two things:</p>

<ul>
  <li>All code to be run on a controller action gets put into a shared namespace rather than executed, e.g. <code class="highlighter-rouge">window.StitchFix.widgets.show</code> is the function to run when the <code class="highlighter-rouge">show</code> page is rendered.</li>
  <li>We have boilerplate that sets up the necessary jQuery handlers to execute that function at the right time.</li>
</ul>

<p>But that’s not all!  Since the code gets wrapped in an immediately-invoked function, if you want to create library code to share, you have to put your code into <code class="highlighter-rouge">window</code>, which is global.  You have to be careful you don’t squash something else.  Typically, you create a namespace.  We use <code class="highlighter-rouge">window.StitchFix.lib</code> where I work.</p>

<p>ES6 modules would solve these problems much more cleanly, and are the way most front-enders are solving it.  Modules are the state-of-the-art, and ES6’s version is the standard.  Rails developers would benefit from this, and it would remove a source of bugs as well as several decisions to make about managing ap app’s JavaScript.</p>

<p>I’m also advocated removing jQuery and a new library to interact with the Rails back-end.</p>

<h2 id="jquery-out-railsjs-in">jQuery out, <code class="highlighter-rouge">rails.js</code> in</h2>

<p><strong>Note</strong>: Rails 5.1 will allegedly <a href="https://github.com/rails/rails/issues/25208">ship without jQuery</a>.  This is great news!  No word yet if the replacement will have user-facing features or will just implement Rails-provided features.</p>

<p>jQuery was great, and while it’s powerful, it is not very Rails-like, and requires developers to make a lot of unnecessary decisions when used in earnest.  It also encourages a style of coding where view logic is intermixed with DOM manipulation and event attachment.  It’s the equivalent of the “SQL statements in your <code class="highlighter-rouge">.php</code> files” that Rails got people away from.</p>

<p>It’s also hard to unit test jQuery code, because you must either do a full end-to-end browser test, or a <a href="http://naildrivin5.com/blog/2013/04/10/the-painful-world-of-javascript-testing.html">JavaScript unit test using duplicative markup fixtures</a>.  Rails provides no facilities for either of these types of tests.</p>

<p>With the removal of jQuery, Rails could reasonably ship a simple <code class="highlighter-rouge">rails.js</code> library to allow interacting with Rails endpoints in a Rails-like fashion.</p>

<p>Instead of requiring developers to use <code class="highlighter-rouge">$.ajax()</code>, <code class="highlighter-rouge">rails.js</code> could have a simple and straightforward mechanism to trigger Rails endpoints:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nx">Rails</span><span class="p">.</span><span class="nx">widgets</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="nx">widgetId</span><span class="p">,</span> <span class="p">(</span><span class="nx">widget</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do whatever with widget</span>
<span class="p">});</span>

<span class="nx">Rails</span><span class="p">.</span><span class="nx">frobnosticators</span><span class="p">.</span><span class="nx">destroy</span><span class="p">(</span><span class="nx">frobnosticatorId</span><span class="p">,</span> <span class="p">(</span><span class="nx">frobnosticator</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// whatever</span>
<span class="p">});</span>
</code></pre>
</div>

<p>This would have a lot of advantages.  First, it’s a better API to Rails than jQuery’s <code class="highlighter-rouge">$ajax</code> function.  Second, it would be lightweight and dependency free, thus easily usable with other front-end frameworks if that meets the developer’s needs.  It could work easily with React, Angular, or Ember, if a developer chose to use those frameworks.  Finally, it defines the AJAX interface to a Rails app the same way <code class="highlighter-rouge">config/routes.rb</code> defines the HTTP interface.</p>

<p>This would remove a decision developers have to make, and simplify a very common interaction.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imagined Rails 6: No More Per-View CSS]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/13/imagined-rails-6-no-more-per-view-css.html"/>
    
    <updated>2016-06-13T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/13/imagined-rails-6-no-more-per-view-css</id>
    <content type="html"><![CDATA[<p>This is a series of posts about <a href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html">why I recommended the changes I did for Rails 6</a>, in my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote
for Rails 6</a>.</p>

<p>In this one, we’ll explore why I recommended the removal of per-view CSS and the inclusion of an “OOCSS”-style framework.</p>

<!-- more -->

<p>When you create a new resource/controller/scaffold with Rails, say one called “widgets”, Rails creates a lot of files.  One of them is <code class="highlighter-rouge">widgets.css</code> and, because of how the asset pipeline works, this file is included in the CSS bundle.</p>

<p>This gives a very false sense of encapsulation.  In no way are the CSS classes in that file encapsulated and in no way are they applied only to “widgets”.  This is unlike the Ruby artifacts the generator produces, which <em>do</em> have encapsulation: the methods in <code class="highlighter-rouge">WidgetsControllers</code> are not global to all of your app, nor are the methods in <code class="highlighter-rouge">Widget</code>.  Even the stuff in <code class="highlighter-rouge">WidgetsHelper</code> isn’t global.</p>

<p>There are ways to do modular CSS.  They are nasty, but Rails could bake in support for them if it truly believed that modular CSS was the way developers should be working.</p>

<p>Modular CSS isn’t quite the state of the art, though perhaps it will be some day.  Instead, many front-end developers are using something called “Object-Oriented CSS” or OOCSS.  While the technique has nothing to do with objects and bears no resemblance to “object-oriented programming”, this is the term that’s been adopted.  And, it’s a vast depature from what many of us learned about how write CSS.</p>

<p>Instead of creating single classes per thing-you-want-to-style and then adding CSS to that class, you create single-purpose re-usable classes and apply them to your HTML.  Let me demonstrate.</p>

<p>Suppose we are styling the <code class="highlighter-rouge">widgets/show.html.erb</code> template.  We know that it will show the widget’s name as the most important thing on the page outside of the general application layout.  That’s enough to write some HTML.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>Since we’ll consider this content “self-contained”, we use <code class="highlighter-rouge">article</code>, and the correct tag for the most important header in an <code class="highlighter-rouge">article</code> is an <code class="highlighter-rouge">h1</code>, so we use that for the widget’s name.</p>

<p>Note that this completely describes the semantics of our content.  No additional markup is needed.</p>

<p>Now, suppose our designer (which is a role—we could be the designer, too) wants this displayed in bold, all uppercase, and using the second-biggest font in our <a href="http://alistapart.com/article/more-meaningful-typography">type scale</a>.</p>

<p>In “semantic” CSS (the type I’m discouraging in this post), we give our <code class="highlighter-rouge">h1</code> a single class, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"widget-name"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>We then use that class to attach our needed styles:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.widget-name</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span>     <span class="err">$</span><span class="n">font-size-2</span><span class="p">;</span>
  <span class="nl">font-weight</span><span class="p">:</span>    <span class="nb">bold</span><span class="p">;</span>
  <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>Note again that the addition of the <code class="highlighter-rouge">widget-name</code> class adds no semantics not already present in the original HTML.  It merely exists for us to use a hook for styling.  If we didn’t need to style it, we would have no reason to add that class.</p>

<p>In OOCSS, we work in the opposite direction.  We start from a set of small, re-usable classes that we can apply and use anywhere.  So, we’d have CSS like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nc">.f1</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-1</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.f2</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-2</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.f3</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="err">$</span><span class="n">font-size-3</span><span class="p">;</span> <span class="p">}</span>

<span class="nc">.fwb</span> <span class="p">{</span> <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span> <span class="p">}</span>

<span class="nc">.ttu</span> <span class="p">{</span> <span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span> <span class="p">}</span>
</code></pre>
</div>

<p>With these re-usable classes, we can then style our widget header like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;article&gt;</span>
  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"f2 fwb ttu"</span><span class="nt">&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@widget</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>

<p>Since our original HTML contains sufficient semantics for the content, these display-specific classes have no effect on the semantics of our markup.  Remember, we have no reason to add classes to this markup in order to clarify the semanatics.  The only reason we would ever have to add classes to this markup is to afford visual styling.</p>

<p>I know what you’re thinking.  This is weird.  It’s wrong!  We’re mixing presentation and content!  This will not stand!</p>

<p>I had the same reactions. But, this way of styling markup is better than the “semantic” way we’ve all learned.
I’ve been working this wawy for over three years and have <em>very</em> rarely had to actually write any CSS, and have very rarely become confused about why my pages were laying out the way they were.</p>

<p>You may think that in a sizeable app, you’d end up duplicating a lot of classes.  For example, what if all of our headers were to be bold, upper-case, and set in the second-largest font?  Wouldn’t we have <code class="highlighter-rouge">f2 fwb ttu</code> littered everywhere?</p>

<p>Don’t forget: Rails includes a powerful templating framework that supports partials.  You can easily remove duplication by ust using that.</p>

<p>Further, because this type of styling doesn’t use the cascade, it’s always very clear why an element is being rendered in the browser a certain way and what the application of these classes will do to an element. Once you learn the terse classnames, you can look at any element and see immediately what the intention is for how it is to be displayed.</p>

<p>This is a deep topic and you should read <a href="http://mrmrs.io/writing/2016/03/24/scalable-css/">this post by Adam Morse</a> and/or <a href="http://nicolasgallagher.com/about-html-semantics-front-end-architecture/">this post by Nicolas Gallagher</a>.  If you have any feelings or opinions about what I’ve written here, you need to read these posts first.  And then take your issue up with their authors.  I’m just the messenger.</p>

<p>And the message is this:  writing CSS this way is awesome.  It’s empowering.  It reduces the decisions you must make down to only those about your design and not how to structure your CSS.  It is very much the Rails Way.</p>

<p>I specified <a href="http://tachyons.io">Tachyons</a> as it is a small full-featured framework that allows you to work this way.  You could also use <a href="http://www.basscss.com/">BassCSS</a>.  If Rails should include CSS and have an opinion on how to write it, either of these frameworks would be great.</p>

<p>If, on the other hand, Rails doesn’t believe in having an opinion on CSS, it should not create blank <code class="highlighter-rouge">.css</code> files that imply encapsulation which doesn’t exist nor should it include SAAS.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why did I Recommend What I Did for Rails 6?]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6.html"/>
    
    <updated>2016-06-12T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/12/why-did-i-recommend-XX-for-rails-6</id>
    <content type="html"><![CDATA[<p>In my <a href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html">imagined keynote for Rails 6</a>, I imagined a lot of wacky new features for Rails.  My Rails 6 had lots of big changes, and I thought it might be interesting to dig into why I think those changes are useful for Rails.</p>

<!-- more -->

<p>First, I very much feel that Rails should continue to have opinions, and to embody those opinions in the framework.  It seems logical for me that as the shared body of knowledge around web development increases, Rails should bring the best of those practices to the framework.</p>

<p>I view Rails’ strength as removing decisions that aren’t relevant to getting your work done.  For example, I don’t care what the name of a primary key is, I just need it to be consistent in the system. Therefore, I shouldn’t have to make a decision about it.  Similarly, I don’t want to have to decide the names of the directories where code goes, I’m fine if there is a consistent, framework-enforced standard.</p>

<p>To my mind, then, it stands to reason that as more and more practices become common, Rails should incorporate them into the framework, each time removing a decision a future developer has to make that isn’t relevant to the task at hand.</p>

<p>A great, and simple example is presenters.  Developers have recognized that views often need to expose more data than is in an Active Record and that sometimes that data is view-specific.  There are myriad gems to address this.  They are all more or less the samed, and they all seem to indicate that developers are making pointless decisions—which presenter framework or pattern should I use?  If Rails adopted such as mechanism, it would remove that decision for most developers and be a win for the framework and its users.</p>

<p>So, let’s explore my imagined features/changes to Rails.  We’ll go in order of the keynote, and each bit will be its own blog post.</p>

<ul>
  <li><a href="/blog/2016/06/13/imagined-rails-6-no-more-per-view-css.html">No More Per-View CSS</a></li>
  <li><a href="/blog/2016/06/14/imagined-rails-6-removes-jquery-and-favors-es6.html">jQuery out, ES6 in + rails.js</a></li>
</ul>

<p>Check back for updates.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Use the UNIX Environment Directly]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/06/10/dont-use-ENV-directly.html"/>
    
    <updated>2016-06-10T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/06/10/dont-use-ENV-directly</id>
    <content type="html"><![CDATA[<p>Getting configuration from the UNIX environment is a hallmark of <a href="http://12factor.net/">12-factor application design</a>, and is a great practice.  Problems arise, however, when your code is littered with direct references to it.  This is because the UNIX environment is a very poor database, but we need to treat it as a better one.</p>

<!-- more -->

<p>Instead of having your code that needs configuration grab values directly from the environment, you should use a lightweight abstraction layer that your code depends on.  This has three advantages:</p>

<ul>
  <li>It allows you to deal with the fact that the UNIX environment is essentially typeless.</li>
  <li>It’s a centralized place for all default values needed for optional settings.</li>
  <li>It’s a single place for things that might need to be configurable, but aren’t yet.</li>
</ul>

<h2 id="environment-variables-are-strings">Environment Variables are Strings</h2>

<p>Most programming languages vend environment variables as strings.  This leads to errors like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">]</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>In Ruby, all non-nil, non-false values are “truthy”.  Since <code class="highlighter-rouge">ENV#[]</code> will only ever return either <code class="highlighter-rouge">nil</code> or a String, the “Flag disabled” path wil never execute:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=false ./test.rb
Flag enabled!
</code></pre>
</div>

<p>This means that you have to coerce your environment variables to a type you want.  Often, developers do this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"true"</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This is somewhat verbose, easy to mess up, and creates other problems when you have someone who prefers “0” and “1” instead of “true” and “false”:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=1 ./test.rb
Flag disabled.
</code></pre>
</div>

<p>If you have a layer between your code and the environment, you can handle that in a common way.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some_flag?</span>
    <span class="p">(</span><span class="s2">"1"</span><span class="p">,</span><span class="s2">"true"</span><span class="p">).</span><span class="nf">include?</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"SOME_FLAG"</span><span class="p">].</span><span class="nf">downcase</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># or maybe</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">some_flag?</span>
    <span class="n">boolean</span><span class="p">(</span><span class="s2">"SOME_FLAG"</span><span class="p">)</span>
  <span class="k">end</span>

<span class="kp">private</span>

  <span class="k">def</span> <span class="nf">boolean</span><span class="p">(</span><span class="n">env_var</span><span class="p">)</span>
    <span class="sx">%("1","true")</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="n">env_var</span><span class="p">].</span><span class="nf">downcase</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Your code then becomes much cleaner:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">if</span> <span class="no">Settings</span><span class="p">.</span><span class="nf">some_flag?</span>
  <span class="nb">puts</span> <span class="s2">"Flag enabled!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Flag disabled."</span>
<span class="k">end</span>
</code></pre>
</div>

<p>It also works :)</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; SOME_FLAG=1 ./test.rb
Flag enabled!
&gt; SOME_FLAG=True ./test.rb
Flag enabled!
&gt; SOME_FLAG=false ./test.rb
Flag disabled.
</code></pre>
</div>

<p>With an abstraction layer, we can also handle default values for optional environment variables.</p>

<h2 id="centralizing-defaults">Centralizing Defaults</h2>

<p>Suppose we want to allow the configuration of a timeout for talking to our payment processor.  We have an idea of what the right value is, but we may need to tweak it in production, so we don’t want to have to do a code change every time.  So, we’ll grab it from the environment, but set a reasonable default.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">payment_processor_timeout</span>
    <span class="no">ENV</span><span class="p">[</span><span class="s2">"PAYMENT_PROCESSOR_TIMEOUT"</span><span class="p">].</span><span class="nf">try</span><span class="p">(</span><span class="ss">:to_i</span><span class="p">)</span> <span class="o">||</span> <span class="mi">2000</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Not we have to use <code class="highlighter-rouge">try</code> because <code class="highlighter-rouge">nil.to_i</code> returns 0, not <code class="highlighter-rouge">nil</code>.  So, we’re saying “if a value has been set, coerce it to an integer, otherwise use 2000”.</p>

<p>With such a system set up, you can use this to centralize all your application’s configurable bits, even if you don’t need or want them overridden by the environment.</p>

<h2 id="centralizing-configuration">Centralizing Configuration</h2>

<p>For example, you might be using S3 to store files, and want all code that uses S3 to use the same bucket, but you have no real need to configure that bucket in the environment.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Settings</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">s3_bucket_name</span>
    <span class="s2">"my-app-files"</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This now means the code that needs the bucket name can just ask the settings for it, and if you later need it to be configurable, it can easily be extracted from the environment.</p>

<h2 id="isnt-this-a-solved-problem">Isn’t this a solved problem?</h2>

<p>We use the <a href="https://github.com/modcloth/mc-settings">mc-settings</a> gem, that uses an ERB-ized YAML file:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="s">some_flag</span><span class="pi">:</span> <span class="s">&lt;%= ("1","true",).include?(ENV["SOME_FLAG"].downcase) %&gt;</span>
<span class="s">payment_processor_timeout</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_TIMEOUT"].try(:to_i) || 2000 %&gt;</span>
<span class="s">s3_bucket_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">my-app-files"</span>
</code></pre>
</div>

<p>This allows us to write <code class="highlighter-rouge">Setting.some_flag</code>.  It even supports nested settings, like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="s">payment_processing</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">timeout</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_TIMEOUT"].try(:to_i) || 2000 %&gt;</span>
  <span class="pi">-</span> <span class="s">api_key</span><span class="pi">:</span> <span class="s">&lt;%= ENV["PAYMENT_PROCESSOR_API_KEY"] %&gt;</span>
</code></pre>
</div>

<p>We can then do <code class="highlighter-rouge">Setting.payment_processing(:timeout)</code> to access the configured value.</p>

<h2 id="conclusions">Conclusions</h2>

<p>Don’t litter your code with references to the environment.  It’s easy to create bugs because the environment is a somewhat degenerate settings database.  It also makes your code harder to follower because you are using <code class="highlighter-rouge">SCREAMING_SNAKE_CASE</code> instead of nice, readable methods.  It also makes it hard to centralize type coercions and default values.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My talk on scaling Rails from RailsConf 2016]]></title>
    
    <link href="http://confreaks.tv/videos/railsconf2016-can-time-travel-keep-you-from-blowing-up-the-enterprise"/>
    
    <updated>2016-05-31T00:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/31/scaling-rails-talk-from-railsconf</id>
    <content type="html"><![CDATA[<p>I gave a talk at <a href="http://railsconf.com/">RailsConf ‘16</a> called “Can Time-Travel Keep You From Blowing Up the Enterprise”.  The talk is really about scaling Rails on a growing team, and attempts to stop the discussion around “monolith vs microservices” by showing how a team can take hold of its destiny.</p>

<p>It’s also the exact way Stitch Fix engineering evolved, and while we have some large Rails apps, none are the monstrosities I’ve seen elsewhere.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/23NhP4x3AAE" frameborder="0" allowfullscreen=""></iframe>
<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Behavior, not Configuration]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/23/test-behavior-not-configuration.html"/>
    
    <updated>2016-05-23T08:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/23/test-behavior-not-configuration</id>
    <content type="html"><![CDATA[<p>I’ve become re-acquainted with the pattern of testing ActiveRecord classes using stuff like <code class="highlighter-rouge">expect(parent).to belong_to(:child)</code> and I just don’t understand why anyone would ever write a test like that.  It provides no value, and the implementation provided by <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda</a> isn’t actually testing the behavior.  It’s testing configuration.</p>

<!-- more -->

<p>In Rails, the following code is configuration:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Address</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:country</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</code></pre>
</div>

<p>There is literally no reason to write this test:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"belongs to a country"</span> <span class="k">do</span>
    <span class="n">expect</span><span class="p">(</span><span class="no">Address</span><span class="p">.</span><span class="nf">new</span><span class="p">).</span><span class="nf">to</span> <span class="n">belong_to</span><span class="p">(</span><span class="ss">:country</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Why?</p>

<p>First, it’s basically asserting the exact code that it’s testing.  It could just as well be:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"belongs to a country"</span> <span class="k">do</span>
    <span class="n">source_code</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span>
                              <span class="kp">__FILE__</span><span class="p">,</span>
                              <span class="s2">"../../app/models/address.rb"</span><span class="p">))</span>
    <span class="n">expect</span><span class="p">(</span><span class="n">source_code</span><span class="p">).</span><span class="nf">to</span> <span class="o">=~</span><span class="p">(</span><span class="sr">/^  belongs_to :country$/</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Second, it actually doesn’t test the configuration behavior.  It uses a <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matcher.rb">ridiculous</a> <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matchers/model_reflector.rb">amount of</a> <a href="https://github.com/thoughtbot/shoulda-matchers/blob/b58f0a1807a4346399aa3b9bb5b88923ab9aa2e5/lib/shoulda/matchers/active_record/association_matchers/model_reflection.rb">logic and meta-programming</a> to determine what Active Record methods appear in the class under test.</p>

<p>It does not assert any particular behavior.</p>

<p>This means that it actually doesn’t test the one thing that most people mess up with ActiveRecord, which is putting the <code class="highlighter-rouge">belongs_to</code> on the wrong class.</p>

<p>It’s also <em>highly</em> unlikely that this test would ever find a real bug, and I can’t imagine a TDD scenario in which this test takes our code from red to green.</p>

<p>But, since it <em>doesn’t test behavior</em> it makes refactoring difficult.</p>

<p>What if we tested the behavior instead?</p>

<p>Here’s one way to do that:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">describe</span> <span class="no">Address</span> <span class="k">do</span>
  <span class="n">it</span> <span class="s2">"has a country"</span> <span class="k">do</span>
    <span class="n">address</span> <span class="o">=</span> <span class="no">Address</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">country</span> <span class="o">=</span> <span class="no">Country</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">address</span><span class="p">.</span><span class="nf">country</span> <span class="o">=</span> <span class="n">country</span>

    <span class="n">expect</span><span class="p">(</span><span class="n">address</span><span class="p">.</span><span class="nf">country</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">country</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This is how we expect <code class="highlighter-rouge">Address</code> instances to behave.  We want to give them countries, and have them return them to us.  It’s almost certain that most uses of an address and a country will do it this way.</p>

<p>Now, suppose we’ve decided that storing countries in its own table is too difficult, becuase the geo-political situtation on our planet is chaotic.  Instead, we’ll store it as a string on <code class="highlighter-rouge">addresses</code> called <code class="highlighter-rouge">country_code</code>.  This way, when countries change, we don’t have to maintain our <code class="highlighter-rouge">countries</code> list.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Address</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>

  <span class="n">belongs_to</span> <span class="ss">:legacy_country</span><span class="p">,</span> <span class="n">foreign_key</span> <span class="ss">:country_id</span>

  <span class="k">def</span> <span class="nf">country</span>
    <span class="no">Country</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">code: </span><span class="nb">self</span><span class="p">.</span><span class="nf">country_code</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">country</span><span class="o">=</span><span class="p">(</span><span class="n">new_country</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">country_code</span> <span class="o">=</span> <span class="n">new_country</span><span class="p">.</span><span class="nf">code</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Country</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">other_country</span><span class="p">)</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">code</span> <span class="o">==</span> <span class="n">other_country</span><span class="p">.</span><span class="nf">code</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>With this change, the <em>behavior</em> of our <code class="highlighter-rouge">Address</code> stays the same, and our test still passes.  If we had asserted the configuration instead, our test would break, even though the behavior was the same.</p>

<p>Don’t test configuration.  Test behavior.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Rails 6: An Imagined Keynote]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap.html"/>
    
    <updated>2016-05-17T12:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/17/announcing-rails-6-an-imagined-roadmap</id>
    <content type="html"><![CDATA[<p>Just got back from RailsConf.  It was a great Ruby &amp; Rails conference, but I was struck by the dearth of talks about new features of Rails 5—because there just aren’t many.  I thought back to what excited me about Rails in the first place—the baked-in conventions, convenience, encouragement of good practices.</p>

<p>Justin Searls gave <a href="http://blog.testdouble.com/posts/2016-05-09-make-ruby-great-again.html">a talk</a> not about RSpec but about how Rails is losing mindshare, losing favor.  Is Rails losing relevance?  I hope not, but it’s easy to see how someone less emotionally invested than me might see it that way.</p>

<p>I’m trying to write about this without complaining.  This is my fifth attempt.  It’s hard not to just rant about Rails’ failings, so I’m going to try to be constructive by outline a fantasy roadmap for Rails 6.</p>

<p>I tried very much to think about this without going against the “<a href="http://rubyonrails.org/doctrine/">Rails Doctrine</a>”, and have written this as if it were an Apple-style keynote.  The theme is Progress.</p>

<!-- more -->

<hr />

<h2 id="rails-6-progress">Rails 6: Progress</h2>

<p>Good morning.  I’d like to share with you all the exciting changes we have in store for Rails 6.  Since Rails was first launched 11 years ago, a lot has changed in the world of web development.</p>

<p>Billion-dollar business are being run on Rails.  These business—along with countless others—have been able to use Rails to solve problems we never imagined.  Rails not only enables small teams to ship great software, but it works for big teams, too.</p>

<p>We’ve seen Rails move beyond its role as “the single application” to being a part of highly distributed systems.  The productivity gains developers get in the small, and in the simple, they get in the large and complex, too.</p>

<p>Meanwhile, there have been tremendous strides in what is possible in a web browser.  Rails was born of a love of the web, and the web has gotten so much better over the years.  The front-end has blossomed.  We can now deliver amazing things to our users, and the community of web developers both inside and outside Rails has produced amazing tools and techniques for doing so.</p>

<p>Finally, the community of Rails and Ruby developers have over a decade of experience using Rails.  A <em>decade</em>!  We’ve learned so much about what it’s like to maintain Rails applications over long periods, and how to best use developers of all levels of experience in working on Rails applications.</p>

<p>Rails 6 is the most revolutionary release of Rails ever, and we’ve rallied around seventh pillar of the Rails Doctrine: Progress.</p>

<p>Let’s start with the front-end.</p>

<h2 id="front-end-20">Front-End 2.0</h2>

<p>Sprockets was way ahead of its time.  Using <code class="highlighter-rouge">remote=true</code> was, too.  Rails was one of the first web frameworks to actually acknowledge the front-end and include powerful tools for managing your assets.</p>

<p>The rest of the industry has not embraced these tools or techniques, but has instead solved the problems of front-end development in other ways.  Although the tools used for front-end development are in constant flux, there are stable, mature techniques that have proven results.</p>

<p>Rails 6 will bake in the best of these techniques, and create an updated, modern set of front-end tools.</p>

<p>In Rails 6:</p>

<ul>
  <li>No more per-view CSS.  Rails 6 encourages OOCSS and ships with <a href="http://tachyons.io/">Tachyons</a>, allowing developers to style their views without any CSS from day 1.</li>
  <li>No more per-view JavaScript. Rails 6 supports ES6 and ES6 module syntax to allow developers to structure their front-end code however they see fit.</li>
  <li>Rails 6 no longer includes jQuery by default.  Instead, Rails includes a library called <code class="highlighter-rouge">rails.js</code> that provides a simple and standard way to access Rails resources via AJAX without using jQuery.  Rails.js can be used standalone, or in conjunction with existing front-end frameworks like React.</li>
  <li>Source maps will be generated for any front-end compiled assets or code, if the source language supports it.</li>
  <li>A new focus on simple plugability and transparent behavior.  The one constant in front-end tooling is change, and a full-stack web application framework like Rails should give you the ability to keep up.</li>
</ul>

<p>What Rails 6 doesn’t ship with is a front-end framework. There’s value in server-generated views, and a light sprinkling of JavaScript can get you a long way.</p>

<p>Next up, the controller layer.</p>

<h2 id="doubling-down-on-resource-based-design">Doubling-down on Resource-based Design.</h2>

<p>Rails strongly believes in resource-based design.  It’s been a part of Rails since Rails 2.  Too often, however, developers deviate from this design when without a strong reason.  We’ve realized this happens for two different reasons.</p>

<p>First, it’s largely the same amount of work in your routes and controller to use RPC-style routing as it is to use resourceful routing.  Second, it’s too difficult to create resources that work with Rails but that aren’t ActiveRecords.</p>

<p>In Rails 6, developers who embrace resource-based design no longer need to specify routes explicitly.  The “special 7” routes are configured automatically by declaring the needed methods in the controller.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span> <span class="c1"># automatically sets up GET /users</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">create</span> <span class="c1"># automatically sets up POST /users</span>
             <span class="c1"># also sets up GET /users/new</span>
  <span class="k">end</span>
  
  <span class="n">opt_out</span> <span class="ss">:new</span> <span class="c1"># remove GET /users/new</span>
  
  <span class="k">def</span> <span class="nf">destroy</span> <span class="c1"># configure DELETE /users/:I'd</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">deactivate</span> <span class="c1"># does not introduce any route</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Developers unnecessarily using RPC-based designs now have more work to do than if they stick with a resource-based design.  The old way of declaring routes still works, but we feel this method will be much simpler.</p>

<p>We also want to make it easier to describe resources that work with the Rails View layer but that aren’t Active Records.  We introduced helper modules in Rails 3, and an explicit Active Model in Rails 4, but we still see developers struggling to adopt these technologies.</p>

<p>Instead, developers use presenters, decorators, and view models either hand-rolled or from one or more third-party gems.</p>

<p>Rails 6 will build on ActiveModel by providing a base class called ActionResource.</p>

<p>An ActionResource makes it easy to totally describe your resource, with support for:</p>

<ul>
  <li>delegating to an underlying object.</li>
  <li>create derived fields.</li>
  <li>formatting values.</li>
  <li>interoperability with Rails form and URL helpers.</li>
</ul>

<p>Suppose we want to display a user’s name, signup date, email, and most recent order (a date and description).  We’ll call this an <em>account</em>.  We’ll implement it using ActionResource, which we can use in our controller like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AccountsController</span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@account</span> <span class="o">=</span> <span class="no">Account</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">customer: </span><span class="n">current_user</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>We create <code class="highlighter-rouge">Account</code> like so:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="no">ActionResource</span>
  <span class="n">from</span> <span class="ss">:customer</span><span class="p">,</span> <span class="ss">show: </span><span class="p">[</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:created_at</span> <span class="p">]</span>

  <span class="nb">format</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">with: :short</span>
  <span class="nb">format</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">with</span> <span class="ss">:downcase</span>
  
  <span class="k">def</span> <span class="nf">last_order_date</span>
    <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">last_order</span><span class="p">.</span><span class="nf">created_at</span><span class="p">)</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">last_order_description</span>
    <span class="n">last_order</span><span class="p">.</span><span class="nf">items</span><span class="p">.</span><span class="nf">count</span> <span class="o">+</span> <span class="s2">" items"</span>
  <span class="k">end</span>
  
  <span class="kp">private</span>
  
    <span class="k">def</span> <span class="nf">last_order</span>
      <span class="vi">@last_order</span> <span class="o">||=</span> <span class="n">customer</span><span class="p">.</span><span class="nf">orders</span><span class="p">.</span><span class="nf">last</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>As with much of Rails, how this works should be obvious by the API we’ve designed.</p>

<p>The resulting object can be used like any model object:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">customer</span> <span class="o">=</span> <span class="no">Customer</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">name: </span><span class="s2">"Bob Jones"</span><span class="p">,</span>
                        <span class="ss">email: </span><span class="s2">"Bob@JONES.net"</span><span class="p">)</span>
<span class="n">customer</span><span class="p">.</span><span class="nf">orders</span> <span class="o">&lt;&lt;</span> <span class="no">Order</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">created_at: </span><span class="mi">3</span><span class="p">.</span><span class="nf">days</span><span class="p">.</span><span class="nf">ago</span><span class="p">,</span>
                             <span class="ss">items: </span><span class="no">Item</span><span class="p">.</span><span class="nf">new</span><span class="p">)</span>

<span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">customer: </span><span class="n">customer</span><span class="p">)</span>

<span class="n">account</span><span class="p">.</span><span class="nf">email</span>                  <span class="c1"># bob@jones.net</span>
<span class="n">account</span><span class="p">.</span><span class="nf">name</span>                   <span class="c1"># Bob Jones</span>
<span class="n">account</span><span class="p">.</span><span class="nf">created_at</span>             <span class="c1"># May 13</span>
<span class="n">account</span><span class="p">.</span><span class="nf">last_order_date</span>        <span class="c1"># 3 days ago</span>
<span class="n">account</span><span class="p">.</span><span class="nf">last_order_description</span> <span class="c1"># 1 items</span>
</code></pre>
</div>

<p>We hope this will allow Rails developers to effectively use resourceful design without needing third-party gems, and to do so with minimal, beautiful code.</p>

<p>We’re also discouraging the use of helpers in Rails 6.  Helpers are still a fully supported feature, but when scaffolding or creating new resources with the Rails generator, you will no longer be given an empty helper file.  ActionResource can replace most need for helpers.</p>

<p>Next, let’s talk about the code that makes your app special: the business logic.</p>

<h2 id="the-business-of-logic">The Business of Logic</h2>

<p>Over the last ten years, it’s become clear that every Rails application needs to manage code that doesn’t belong to a controller, model, job, or mailer.  While there are many opinions on exactly <em>how much</em> code should go where, there’s no debate that sometimes code has to go somewhere else, and Rails hasn’t had an opinion.  Until now.</p>

<p>Rails 6 supports <em>services</em>, as we felt this was a good enough nudge regarding where code could go, but without being overly prescriptive, or requiring developers to opt-in to a complex DSL.</p>

<p>Make now mistake: this is a radical change in how Rails thinks about your application’s architecture.</p>

<p>By default, <code class="highlighter-rouge">app/services</code> will be created when you run <code class="highlighter-rouge">rails new</code> and any code you place there will be auto-loaded the same as for your controllers or models.  The code in your services can be anything.</p>

<p>However, when writing good services, it’s often required to bring together lower-level libraries, third-party code, and other services to get the job done.  Testing this code can be challenging.</p>

<p>To help organize your services, we’re also introducing <em>ActiveService</em>, which is a lightweight library that makes writing and testing services as easy as it can be.</p>

<p>Suppose you want a service for charging customers some money using your <code class="highlighter-rouge">Customer</code> and <code class="highlighter-rouge">Order</code> models.  To do this, we need to locate the customer’s credit card, charge it the amount of their order, and then email them a receipt (or a notification about failure).  To do this, we need access to our payment processor’s Ruby library as well as our <code class="highlighter-rouge">OrderMailer</code> Rails mailer.</p>

<p>While you could access these classes in the normal way of referencing their global symbols, we can use less code that’s easier to test by using Active Service.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Purchaser</span> <span class="o">&lt;</span> <span class="no">ActiveService</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">needs</span> <span class="ss">:payment_transaction</span>
  <span class="n">needs</span> <span class="ss">:credit_cards</span>
  <span class="n">needs</span> <span class="ss">:order_mailer</span>
  
  <span class="k">def</span> <span class="nf">purchase!</span><span class="p">(</span><span class="n">customer</span><span class="p">:,</span> <span class="n">order</span><span class="p">:)</span>
    <span class="n">card</span>        <span class="o">=</span> <span class="n">credit_cards</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">customer</span><span class="p">.</span><span class="nf">id</span><span class="p">)</span>
    <span class="n">transaction</span> <span class="o">=</span> <span class="n">payment_transaction</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">card</span><span class="p">,</span><span class="n">order</span><span class="p">.</span><span class="nf">amount</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">transaction</span><span class="p">.</span><span class="nf">success?</span>
      <span class="n">order_mailer</span><span class="p">.</span><span class="nf">receipt_email</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">).</span><span class="nf">deliver_later</span>
    <span class="k">else</span>
      <span class="n">order_mailer</span><span class="p">.</span><span class="nf">card_failed</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">,</span><span class="n">transaction</span><span class="p">).</span><span class="nf">deliver_later</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>As you can see, ActiveService provides a way to manage all your services at runtime.  This is especially useful for third-party libraries like our payment processor.  Instead of configuring a global constant like <code class="highlighter-rouge">BRAINTREE_TRANSACTION</code>, we can let ActiveService handle it:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="c1"># config/initializers/braintree.rb</span>
<span class="n">service</span> <span class="ss">:payment_transaction</span> <span class="k">do</span>
  <span class="no">Braintree</span><span class="o">::</span><span class="no">Transaction</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">api_key: </span><span class="no">ENV</span><span class="p">[</span><span class="s2">"BRAINTREE_API_KEY"</span><span class="p">])</span>
<span class="k">end</span>

<span class="n">service</span> <span class="ss">:credit_cards</span> <span class="k">do</span>
  <span class="no">Braintree</span><span class="o">::</span><span class="no">PaymentCard</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">api_key: </span><span class="no">ENV</span><span class="p">[</span><span class="s2">"BRAINTREE_API_KEY"</span><span class="p">])</span>
<span class="k">end</span>
</code></pre>
</div>

<p>This way, any other service that needs access to this can be sure to get the properly configured objects.  The real benefit, however, is in our tests.</p>

<p>Instead of mocking classes, or using code like <code class="highlighter-rouge">allow_any_instance_of</code>, Rails takes care of all that.  Since Rails now knows what your services needs to do its job, it can intelligently mock the behavior of
those objects and allow you to test your code in isolation.</p>

<p>For example, to test our <code class="highlighter-rouge">purchase!</code> method, we need to arrange for <code class="highlighter-rouge">payment_transaction</code> to return a successful result, and check that the right mailer method was called.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PurchaserTest</span> <span class="o">&lt;</span> <span class="no">ActiveService</span><span class="o">::</span><span class="no">Test</span><span class="o">::</span><span class="no">Base</span>
  
  <span class="k">def</span> <span class="nf">test_purchase_succeeded</span>
    <span class="n">successful_transaction</span> <span class="o">=</span> <span class="n">stub</span><span class="p">(</span><span class="n">success?</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>    

    <span class="n">order</span>    <span class="o">=</span> <span class="n">orders</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span>    <span class="c1"># we'll talk about these</span>
    <span class="n">customer</span> <span class="o">=</span> <span class="n">customers</span><span class="p">(</span><span class="ss">:any</span><span class="p">)</span> <span class="c1"># later on in the presentation</span>
    
    <span class="n">purchaser</span><span class="p">.</span><span class="nf">payment_transaction</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="ss">:new</span><span class="p">).</span><span class="nf">returns</span><span class="p">(</span><span class="n">successful_transaction</span><span class="p">)</span>

    <span class="n">purchaser</span><span class="p">.</span><span class="nf">purchase!</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    
    <span class="n">purchaser</span><span class="p">.</span><span class="nf">order_mailer</span><span class="p">.</span><span class="nf">verify</span><span class="p">(</span><span class="ss">:receipt_email</span><span class="p">).</span><span class="nf">with</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span><span class="n">order</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>No matter how much code you write as services, Rails 6 will make it easy to keep your code clean, simple, and tested.</p>

<p>We’d like to talk about the fixture-like code above, but first we need to learn about how Rails 6 treats your database.</p>

<h2 id="rails-and-databases-its-complicated">Rails and Databases: It’s Complicated</h2>

<p>One thing we’ve come to understand over the years is that Rails is just a piece of your technical architecture.  The days of one company having exactly one Rails app that controls one database are increasingly rare.  What we’ve also seen is that in most cases, the <em>data</em> is more important than code.  Many companies use Rails to create applications that, at their core, manage the data in a database.  This is very much what Rails was originally designed to do!</p>

<p>Rails 6 is now much more opinionated about how you should manage your data and interact with your database.  Instead of a “common denominator” approach, Rails 6 is designed to get the most out of your data
store—whichever brand it might be.</p>

<p>To state this another way, we want good database design to be easy but bad design to be possible.</p>

<p>In Rails 6, we’re making the following changes:</p>

<ul>
  <li>Columns are no longer nullable by default.</li>
  <li>Numeric-based enums are deprecated.  If your database supports enums, those are used, otherwise string-based enums are the default.</li>
  <li>Foreign keys have constraints by default, if your database supports it.</li>
  <li>Primary keys are UUIDs by default, if your database supports it.</li>
  <li>There is a new DSL for check constraints, if supported by your database, that also create equivalent ActiveRecord validations in the related model.</li>
</ul>

<p>These new defaults and features will keep the migrations DSL just as easy to use as it’s ever been, but result in a consistent, resilient, well-designed database that works great with Active Record.</p>

<p>Making this happen isn’t easy, and the biggest trickle-down affect it had is the way we manage test data.</p>

<h2 id="test-data">Test Data</h2>

<p>Test data comes in two flavors: reference data that is mostly immutable throughout an app’s lifetime (think: country codes), and transactional data, which is the data the app exists to manage (for example, orders).</p>

<p>Reference data can be managed with fixtures, however transactional data will now be managed with <em>factories</em>.</p>

<p>It’s too difficult to manage one single set of test data that works for every test case.  Instead, each use-case for your data will be described by a factory.  You can create a global repository of factories—similar to what you might do with FactoryGirl—or you can create factories directly in your test cases.</p>

<p>By default, however, objects created with factories won’t be written to the database.  This will make your tests run much faster, because you typically just need to test logic—not Active Record.</p>

<p>One problem with this approach, however, is that it’s possible to create use-case-based factories that could never happen in production.  This is why Rails 6 includes a standard linting task that will write all your factories to the database, to ensure that your scenarios actually could exist in the real world.</p>

<p>We also have a few more changes in how to write tests for Rails apps.</p>

<h2 id="testing-20">Testing 2.0</h2>

<p>In Rails 6, there will now be only three types of tests.</p>

<p><em>Unit Tests</em> do not use the database by default, and are where the majority of your tests should be written.  The code tested here would be any of your business logic in your models or services.  These are in <code class="highlighter-rouge">test/unit/{models,mailers,jobs,services}</code>.</p>

<p>For testing scopes, or other code that runs database queries, Rails 6 supports <em>active record tests</em>.  We expect these to be infrequent, but it’s difficult to test database queries without executing against real data.  These live in <code class="highlighter-rouge">test/active_records</code>.</p>

<p>Finally, Rails 6 integration test support will be based on end-to-end in-browser testing using PhantomJS.  You’ll never have confidence in your web application until you’ve used it in a real web browser.  We realize these types of tests can be slow, but we’ve rarely seen a Rails app that doesn’t need them.  They will live in <code class="highlighter-rouge">test/integrations</code>.</p>

<h2 id="thats-it">That’s It!</h2>

<p>We hope you’re as excited for Rails 6 as we are.  This is going to be the best release of Rails yet.</p>

<hr />

<h2 id="afterword">Afterword</h2>

<p>I know this is a fantasy.  I also know that the amount of work outlined here is massive.  But I strongly feel that features <em>like</em> the ones I’ve made up would address common things faced by all Rails developers.  Heck, these are issues faced by any web application developer, and Ruby is one of the few languages where solutions can be easily provided out of the box.</p>

<p>Maybe my particular solutions aren’t the best, and there are certainly many issues my hand-wavy features aren’t addressing that might make them really difficult to actually implement.</p>

<p>But, wouldn’t it be amazing if Rails 6 shipped with features kinda like this?  Wouldn’t it be awesome if Rails 6 acknowledged the community’s collected learnings over the last 10 years, and acknowledged that Rails is actually really awesome at things other than what a small team can accomplish?  Wouldn’t be great if Rails acknowledged advances made outside the Rails community?</p>

<p>I do wonder if this is even possible.  Can Rails make such fundamental changes any longer?  Even if we set aside the technical challenges—which are huge—could the culture of Rails (and its maintainers) allow these things to happen?  <em>Should</em> they?</p>

<p>Let’s say it <em>did</em>.  Let’s say Rails 6 was the revolutionary release I’m pretending it is.  Would that put Rails back in the spotlight?  Would that make Rails the go-to web framework for web development?  Would CTOs start thinking about Rails again?</p>

<p>I don’t know.</p>

<p>What I do know is that we all better prepare ourselves to write a lot more JavaScript if things don’t change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 'Type Wars' Are Far From Over]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/05/03/type-wars-are-far-from-over.html"/>
    
    <updated>2016-05-03T12:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/05/03/type-wars-are-far-from-over</id>
    <content type="html"><![CDATA[<p>Uncle Bob penned an <a href="http://blog.cleancoder.com/uncle-bob/2016/05/01/TypeWars.html">interesting piece called Type Wars</a>.  It’s ostensibly a history of the fashion around how types are handled in programming languages.  It, unfortunately, comes to the conclusion that “TDD and unit tests means you don’t need statically-enforced types”.  This is not true.</p>

<p>He initially describes how C had types, but they weren’t enforced at compile- or run-time.  This is bad (he says and I agree) and then talks about two ways to enforce type safety (i.e. require that the you are using the correct types).  In Java, the compiler requires it or the code won’t even run.  In Smalltalk, the runtime requires it only at runtime.  And, according to Uncle Bob, the latter is preferable because you have unit tests.  This is not true (he also overstates the burden required in having types enforced at compile time—just because Java is terrible doesn’t mean the concept is).</p>

<p>In particular, he creates a false equivalence between unit testing and static type checking:</p>

<blockquote>
  <p>You don’t need static type checking if you have 100% unit test coverage.</p>
</blockquote>

<p>Not true.</p>

<!-- more -->

<h2 id="its-not-true-but-suppose-it-is">It’s Not True, but Suppose It IS</h2>

<p>If this is true (it’s not), it doesn’t imply that 100% test coverage is a better method of ensuring program correctness than static type checking.  Consider a routine to format a name for a person in the US:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UsaNameFormatter</span>
  <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
    <span class="n">first_name</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="n">last_name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Here is a test that achieves 100% test coverage (I’m assuming Uncle Bob means “statement coverage” due to his assertion that “unit test coverage close to 100% can, and is, being achieved”; <a href="https://en.wikipedia.org/wiki/Code_coverage">other types of coverage</a> are very difficult to achieve at 100% and very difficult to measure.).</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_format</span>
  <span class="n">formatter</span> <span class="o">=</span> <span class="no">UsaNameFormatter</span><span class="p">.</span><span class="nf">new</span>
  <span class="n">assert_equals</span> <span class="s2">"Dave Copeland"</span><span class="p">,</span> <span class="n">formatter</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="s2">"Dave"</span><span class="p">,</span><span class="s2">"Copeland"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre>
</div>

<p>Despite 100% test coverage, our <code class="highlighter-rouge">format</code> call still feels buggy, especially around the types of data we pass in.  If we pass in <code class="highlighter-rouge">nil</code> for either value, it blows up.  If we pass in non-strings, it blows up (unless those values support <code class="highlighter-rouge">+</code> in all the ways it’s being used, in which case it returns a possibly unexpected value).</p>

<p>In order to ensure we aren’t making these type errors, it’s not sufficient to just test <code class="highlighter-rouge">UsaNameFormatter</code>, we must ensure that the unit tests of very single <em>use</em> of this class pass in the correct arguments. This means at least one test per callsite and those tests must be carefully written so that if future changes to the code pass in nil or non-Strings, those tests fail.</p>

<p>Now consider if we had static type-checking, particularly something like Swift that prevents nil values if you haven’t opted into them:</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">format</span><span class="p">(</span><span class="nv">firstName</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">lastName</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">lastName</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
</div>

<p>We still need a test that the name is formatted correct, but <em>that’s it</em>.  We never have to worry about this being called incorrectly, and we don’t have to test the <em>use</em> of this function, because it’s impossible to mis-use.</p>

<p>So, I would say that even <em>if</em> you could obviate the need for static type checking by having 100% unit test coverage, it’s not the best way to model correctness: it’s difficult and costly.</p>

<p>Of course, it’s not actually true that 100% unit test coverage obviates the need for static type checking.</p>

<h2 id="its-not-true">It’s Not True</h2>

<p>Consider <code class="highlighter-rouge">UsaNameFormatter</code> above.  Suppose that it’s part of a name-formatting library.  In that case, our existing unit test provides 100% test coverage for our library.  If the “you” is “the person that wrote the library” then, I guess you could say that we don’t need static type checks, because our hands are clean.  If you use the code the way we told you, it’s fine.</p>

<p>If “you” is “the user of the library” then things don’t look so good.  First, you don’t have any way to know what you are supposed to pass in.  You could look at the code or unit tests to see what you <em>can</em> pass in, but you can’t possibly know what the intention is of the routine or library.  The library author has to tell you, with words and text and prose and hopefully in a way that you can understand.  And even then, if you mess it up, you can get cryptic runtime errors.  It’s hard to think of this situation as “the program is correct”.</p>

<p>Our unit tests should not test the correctness of our third-party name-formatting library.  This is a common rule of thumb and I don’t know of any reasonable guidance that says the consumer of a third-party library should write unit tests for that library.  Instead, we tend to mock our use of said third-party library.</p>

<p>Suppose we used <code class="highlighter-rouge">UsaNameFormatter</code> in a presenter to format the name of our <code class="highlighter-rouge">Person</code> object.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Presenter</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
    <span class="vi">@person</span> <span class="o">=</span> <span class="n">person</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">display_name</span>
    <span class="no">UsaNameFormatter</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="nf">given_name</span><span class="p">,</span><span class="n">person</span><span class="p">.</span><span class="nf">sirname</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

<p>To test it, we mock <code class="highlighter-rouge">UsaNameFormatter</code>, because again, we don’t normally test our third-party code in <em>our</em> unit tests.</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="p">.</span><span class="nf">new</span>
<span class="n">presenter</span> <span class="o">=</span> <span class="no">Presenter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>

<span class="n">expect_any_instance_of</span><span class="p">(</span><span class="no">UsaNameFormatter</span><span class="p">).</span>
  <span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="n">first</span><span class="p">,</span><span class="n">last</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="s2">"Dave Copeland"</span><span class="p">)</span>

<span class="n">expect</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">display_name</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"Dave Copeland"</span><span class="p">)</span>
</code></pre>
</div>

<p>100% (passing) test coverage!  Unless the constructor of <code class="highlighter-rouge">Person</code> sets default names (and in almost all cases, it wouldn’t), we have a passing test where we pass in <code class="highlighter-rouge">nil</code> to <code class="highlighter-rouge">UsaNameFormatter#format</code>—a situation that would certainly cause a runtime error.  We have a bug.  How could this be?  Both our code and the third-party library have 100% unit test coverage.  What could static typing have done here that we have not already done?</p>

<p>Consider a Swift version of this.  The compiler would see that our Person’s <code class="highlighter-rouge">last_name</code> field is of type “nullable String”, and that our formatter requires the type “non-nullable String”.  It would refuse to compile or execute the code.  The bug would be impossible to write.</p>

<p>Therefore, it’s still possible to write bugs (bad ones!) that would be caught by static type-checking, despite having 100% unit test coverage.</p>

<p>But it gets worse.</p>

<h2 id="everything-is-a-string-right">Everything is A String, Right?</h2>

<p>When you write code with the notion that “you don’t need types because you have 100% unit test coverage” (a flawed, but not unreasonable, interpretation of what Uncle Bob is saying), you end up not using types, and instead making everything a String or a Hashtable.  And isn’t this the problem with our name-formatting in the first place?</p>

<p>Think of every possible <code class="highlighter-rouge">first_name</code> a person in the US could possible have.  Is this the <strong>exact same list</strong> as every possible string in the known universe?  No it’s not.  So why are we using Strings?!?!?  And if if that <em>were</em> true, the formatter code says that everyone must have a first name, so <code class="highlighter-rouge">nil</code> is not a valid first name, yet we have chosen types that allow it.</p>

<p>We do this all the time, because in dynamic languages, we don’t get the full benefits of static type checking, and thus there is less incentive to create custom data types.  In some static languages, like Java or C#, the type system is weak and verbose, so this, too, puts up a barrier to using custom data types.  Instead, we use Strings for everything.  This is terrible.</p>

<p>Static type checking <em>can</em> be a benefit.  It can identify bugs that are difficult or impossible to detect with 100% unit test coverage, and do so much more simply and easily.  The Type Wars are far from over.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology is Terrible]]></title>
    
    <link href="http://naildrivin5.com/blog/2016/04/10/technology-is-terrible.html"/>
    
    <updated>2016-04-10T09:00:00-07:00</updated>
    <id>http://naildrivin5.com/blog/2016/04/10/technology-is-terrible</id>
    <content type="html"><![CDATA[<p>I get into my hotel at around 8:30pm. I want to watch NXT Takeover on the WWE network and then go to bed. I unpack and then put my Amazon Fire Stick in the HDMI port on the TV.</p>

<p>I start looking for an outlet to plug it in. Nothing close. The armoire weighs a ton and both of the plugs behind it are used up anyway.</p>

<p>Ok, I can just watch on my laptop. Open it up. Keyboard and trackpad not responding. Reboot. No Mac Startup Chime. Keyboard still not working. Reboot. Same. Reboot and hold down Option. Nothin. Repeat with Shift. Repeat with Command Option P M. Wait. Reboot into recovery mode. Computer insists I turn on my Bluetooth keyboard and mouse. Which I don’t have. Fuck.</p>

<p>I just want to watch an hour of pro wrestling.</p>

<p>Pour myself a drink.</p>

<p>Plug the Amazon Fire Stick into my USB battery. Turn on Tv and it works.</p>

<p>Connect to hotel wi-fi. Amazon browser not compatible with the OMNI’s interstitial. Go into “cursor mode” and I’m literally surfing the web with up/down/left/right/submit.</p>

<p>Select premium Internet. Fuck it, I want this to work. Enter my name and room number. I’m in!</p>

<p>Navigate passed about 20 apps that I could download, but have not. WWE is at the end and it’s already downloaded.</p>

<p>OF COURSE I have to sign in! Otherwise, someone might have stolen my Fire stick and started watching 1990’s WCW repeats on my dime!</p>

<p>Open phone, launch 1Password to get my login details. Sometime in the past my phone rebooted so I can’t use TouchID to get in. Enter my very long and easy to mistype pass phrase. Thankfully I get it right the first time.</p>

<p>Back to the Fire stick, I log in to the WWE network. It’s really. really. slow.</p>

<p>Find NXT Takeover and start it up. Stuttering and buffering would be an understatement. I let it ride. After about 10 minutes, I’ve seen 2 minutes of the event, doled out in 5 second bursts. Fuck.</p>

<p>Second drink is poured.</p>

<p>Ok, I’ll watch something else. Maybe it’s WWE. The tech behind their network is not very robust.</p>

<p>Hulu! I can catch up on the terrible superhero shows I like. Or Netflix! Can watch Walking Dead. Both require downloading an app and surely logging in. I’m done logging into things for the night.</p>

<p>Oh, I’m still in season 1 of Veronica Mars! And it’s only on Amazon Prime!</p>

<p>Amazingly, it remembers the last episode I watched (God knows I don’t). Start it up.</p>

<p>“Previously on Veronica Mars…” and then the screen turns solid green and does nothing but glitch.</p>

<p>Ok, maybe it’s this episode. I’ll skip it and not worry about missing too much. Start the next episode.</p>

<p>“Previously on Veronica Mars…” and then the screen turns solid green and does nothing but glitch.</p>

<p>I just want to watch TV and go to bed.</p>

<p>Ok, what else is there? The Wire season 1. Haven’t watched it in ages and could honestly settle for Idris Elba reading he phone book for 2 hours. You know what would be awesome? A sitcom around all the time Stringer Bell spent in community college. I mean, they had to have group projects so I can see hours of fun watching him and three 19 year olds try to make business plans for video stores or whatever.</p>

<p>Anyway, this finally works. I watch a couple episodes without incident. Finally. It’s bleaker than I remember.</p>

<p>It’s 11pm and I still want to watch wrestling. Flip back to WWE and now it’s working. But I’m tired. Fast forward to Baylee vs Asuka for the women’s title. Baylee loses. Fucking hell.</p>
]]></content>
  </entry>
  
</feed>
