<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[naildrivin5.com - David Bryant Copeland's Website]]></title>
  <link href="http://naildrivin5.com/atom.xml" rel="self"/>
  <link href="http://naildrivin5.com/"/>
  <updated>2015-10-30T08:14:14-04:00</updated>
  <id>http://naildrivin5.com/</id>
  <author>
    <name><![CDATA[David Bryant Copeland]]></name>
    <email><![CDATA[davec@naildrivin5.com]]></email>
  </author>

  
  <entry>
    <title type="html"><![CDATA[My New Book]]></title>
    
    <link href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap"/>
    
    <updated>2015-07-29T10:56:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/07/29/my-new-book</id>
    <content type="html"><![CDATA[<p>My new Book, <a href="https://pragprog.com/book/dcbang/rails-angular-postgres-and-bootstrap">Rails, Angular, Postgres, and Bootstrap: Powerful, Effective, and Efficient Full-Stack Web Development</a> is in beta:</p>

<blockquote>
<p>As a Rails developer, you care about user experience and performance, but you also want simple and maintainable code. Achieve all that by embracing the full stack of web development, from styling with Twitter Bootstrap, building an interactive user interface with AngularJS, to storing data quickly and reliably in PostgreSQL. Take a holistic view of full-stack development to create usable, high-performing applications, and learn to use these technologies effectively in a Ruby on Rails environment.</p>
</blockquote>

<p>I&#39;ve been working on this for quite a while, and pretty excited about it.  If you want to <em>really</em> level
up your abilities as a Rails developer, this is the book for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I learned interviewing with Instagram]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/07/21/what-I-learned-interviewing-at-Instagram.html"/>
    
    <updated>2015-07-21T14:49:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/07/21/what-I-learned-interviewing-at-Instagram</id>
    <content type="html"><![CDATA[<p>In September 2011, I interviewed at Instagram.
While I didn&#39;t ultimately get/take the job<a name="back-1"></a><sup><a href="#1">1</a></sup>, the experience had a pretty profound effect on me as a developer.  </p>

<p>What I learned during the interview process (which was really enjoyable, and became the basis for <a href="http://theseniorsoftwareengineer.com/interview_potential_co-workers_excerpt.html">my ideal technical interview process</a>) was just <em>how much</em> two engineers with relatively little experience could accomplish.</p>

<!-- more -->

<p>My notes on the interview:</p>

<blockquote>
<ul>
<li>a popular iPhone app</li>
<li>the back-end to serve millions and millions of users</li>
<li>an infrastructure that could be experimented with: attempt to run Mongo and see what happens</li>
<li>Implemented their data storage layer in Mongo, studied it, abandoned it</li>
<li>Enhanced their iPhone app with Open GL</li>
<li>Build, documented, and deployed an API and several clients</li>
<li>Created a demo using their API in Node</li>
<li>Have their entire infrastructure monitored; can identify any change in behavior of their system instantly</li>
<li>Have ready access to their data to support third-party hacking</li>
<li>Completely manage all of their servers</li>
</ul>
These are two guys with very little experience.
</blockquote>

<p>If you had looked at these developers&#39; résumés as of 2010, you would not find anything to indicate that they
could both design, build, launch, and maintain a hugely popular application used by millions of people
around the world..  And while I&#39;m sure the code
that powered Instagram back in 2011 wasn&#39;t the greatest, these two guys had basically done everything
from designing the UI to launching an API, to managing servers on AWS.</p>

<p>They did this without a QA team, a system “architect”, a product manager, a <em>project</em> manager, or a technical operations team.  </p>

<p>Before the interview, I didn&#39;t think such a thing would be possible.  I would&#39;ve assumed that such an
undertaking would require years and years of experience, with an army of specialists each laser-focused
on one part of a greater whole.</p>

<p>Nope.</p>

<p>To me, this is what I mean when I use the term <em>full stack</em>.  It&#39;s not just about working at any level of
the stack, but about <em>not being afraid to</em>.  When faced with any problem, these two guys didn&#39;t show
fear, and didn&#39;t shy away…they dug in.</p>

<p>I used to <em>hate</em> writing JavaScript.  Now, I have no fear and embrace it.  It turns out to be pretty darn
useful.  I used to immediately dismiss any solution that involved writing raw SQL.  I was above all that.
Now, I use it <em>a lot</em>, because it&#39;s the best way to solve a lot of thorny problems.</p>

<p>My current fear is around technical operations.  I&#39;m working on overcoming it.  It&#39;s going to make me a
better developer.</p>

<p>Examine your habits and patterns.  What do you <em>always</em> reach for?  What makes you feel uncomfortable.
What part of the software you build are you afraid of?</p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='1'></a>
<sup>1</sup>The process didn't get far enough along where they were deciding to make an offer or not.  We basically came to a point where I would need to be willing to move myself and my family out to SF so I could put in the blood, sweat, and tears necessary to help make them successful.  When I realized there was no way I could realistically do that, we split on good terms.  And then they got sold to Facebook for a billion dollars. Fortunately, I cannot stand Facebook and would <a href="http://naildrivin5.com/blog/2011/08/01/why-i-wont-work-for-google-twitter-facebook.html">never work there</a>.  At least, that's what I tell myself :)<a href='#back-1'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming and API Design]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/06/15/naming-and-api-design.html"/>
    
    <updated>2015-06-15T07:55:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/06/15/naming-and-api-design</id>
    <content type="html"><![CDATA[<p>A tenet of design is that things that are the same should be obviously the same, and things that are different should be obviously different.  This is the most basic way to create consonance and contrast, and is a great rule of thumb when designing <em>anything</em>.  While Rails diverges from this in an annoying way<a name="back-1"></a><sup><a href="#1">1</a></sup>, Angular diverges in a baffling way that makes explaining it to a newcomer head-scratchingly difficult.</p>

<!-- more -->

<h2>The World&#39;s Silliest Programming Language</h2>

<p>Imagine the following programming language.  To define a function, we name it using a <em>dasherized</em> scheme,
with square brackets to offset the arguments:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">define full-name[first-name,last-name]
  first-name + &quot; &quot; + last-name
end-define
</code></pre></div>
<p>Further imaging that in this programming language, to <em>invoke</em> the function you use a camel-cased version
of the function name, and use parenthesis to offset the arguments:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">print fullName(&quot;Dave&quot;,&quot;Copeland&quot;)
</code></pre></div>
<p>I don&#39;t think it&#39;s a stretch to call this language poorly designed.  Things that are the same—a
function—are handled differently depending upon the occasion.  The design of this language would benefit
greatly if you defined functions using the name symbol used to invoke them.</p>

<p>This example might seem pretty ridiculous, but this is <em>exactly</em> what Angular does.</p>

<h2>Dashes, Camels, and “ng”</h2>

<p>Angular uses <em>directives</em> in HTML to bind your code to the DOM or to DOM events.  The simplist one to
understand is <code>ng-click</code>:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;doit()&quot;</span><span class="nt">&gt;</span>Do It! Do It, Now!<span class="nt">&lt;/button&gt;</span>
</code></pre></div>
<p>This calls <code>doit</code>, whenever the button is clicked.</p>

<p>Are you curious about the documentation for <code>ng-click</code>?  It&#39;s filed under <code>ngClick</code>.  The text <code>ng-click</code>—the thing you must type into your application&#39;s source code to make it work—does not appear in Angular&#39;s
source code.  Everything talks about <code>ngClick</code>.  Why?  I have no idea.</p>

<p>It gets worse.</p>

<h2>Good Luck Finding That Thing You Downloaded</h2>

<p>I&#39;m writing a book on getting Angular, Rails, Bootstrap, and Postgres working together, and how these
four technologies in sum are greater than their parts.  It&#39;s going to be awesome.  Documenting Postgres
is easy (“check out this thing you didn&#39;t think a relational database could do!”), and for Bootstrap,
it&#39;s just as simple (“put this class on this element and…boom!”).</p>

<p>Angular has resulted in many passages like the following.  I&#39;m talking about Angular&#39;s router, which is a
separate component.  The first thing the user has to do, after downloading the module, is configure it in
their application.  Essentially, you need to say &quot;my app requires the router I just downloaded&quot;.</p>

<blockquote>
<p>That argument [when declaring the app] is our app&#39;s list of dependent modules.  It&#39;s currently empty, because we hadn&#39;t needed anything other than what&#39;s provided by Angular.  Now, we&#39;ll need to add <code>angular-route</code> to this array.</p>

<p>Unfortunately, it&#39;s not as simple as adding <code>&quot;angular-route&quot;</code> to the array.  In Angular, the module name for declaring dependencies doesn&#39;t have to be the same as the name of the module we downloaded. For official Angular-provided modules this is unfortunately the case.  </p>

<p>By convention, the name to use in code for an Angular module can be derived by replacing the <code>angular-</code> with <code>ng</code> and camel-casing the remaining module name.  That means that <code>angular-route</code> becomes <code>ngRoute</code> and so <code>&quot;ngRoute&quot;</code> is the string to add to our list of dependencies.</p>
</blockquote>

<p>The reader has had type one string—“angular-route”—into their application&#39;s source code already (so that Bower/NPM/Whatever.JS could download it) And now, I have to give the reader <em>an algorithm they must execute mentally</em> in order to know what string to type into another part of their application.</p>

<p>This is bad design.</p>

<p>When faced with bad design, there is often some sort of tradeoff, some reason the system was designed
this way.  While I can hazard a few guesses about the whole <code>ng-click</code>/<code>ncClick</code> issues<a name="back-2"></a><sup><a href="#2">2</a></sup>, I&#39;ve got <em>zero</em> clue why the name of a module in your dependencies shouldn&#39;t be the name of the module
you downloaded.</p>

<p>It&#39;s so confusing that I have to invent a new phrase just to explain the difference.  If I download
<code>angular-route</code> and use <code>ngRoute</code> in my code, which of those is the <em>module name</em>?  Who knows?</p>

<p>Imagine if the module name was the…well…module name?</p>

<blockquote>
<p>That argument [when declaring the app] is our app&#39;s list of dependent modules.  It&#39;s currently empty, because we hadn&#39;t needed anything other than what&#39;s provided by Angular.  Now, we&#39;ll need to add <code>angular-route</code> to this array.</p>
</blockquote>

<p>End of description!</p>

<p>Same things should be same.</p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='1'></a>
<sup>1</sup>Try explaining to someone new to Ruby and Rails how to find out what file should contain the class <code>SomeModule::SomeClass</code><a href='#back-1'>↩</a>
</li>
<li>
<a name='2'></a>
<sup>2</sup>All I can figure is that some fussy developer didn't want camel case in their markup, but you can't define a JavaScript function with dashes.  I'm not saying it's a <strong>good</strong> reason, but it is a reason<a href='#back-2'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Rails Service Object]]></title>
    
    <link href="http://technology.stitchfix.com/blog/2015/06/02/anatomy-of-service-objects-in-rails/"/>
    
    <updated>2015-06-02T09:14:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2015/06/02/anatomy-of-a-rails-service-object</id>
    <content type="html"><![CDATA[<p>I haven&#39;t been good at blogging for a while.  Most of my writing has been toward a new book (details
forthcoming), but I did manage to write up how I see designing service objects for Rails applications
over at <a href="http://technology.stitchfix.com/blog">Stitch Fix&#39;s Eng Blog</a>.</p>

<p><a href="http://technology.stitchfix.com/blog/2015/06/02/anatomy-of-service-objects-in-rails/">Anatomy of a Rails Service Object</a>:</p>

<blockquote>
<p>We&#39;ve given up on “fat models, skinny controllers” as a design style for our Rails apps—in fact we abandoned it before we started. Instead, we factor our code into special-purpose classes, commonly called service objects. </p>
</blockquote>

<p>The post goes over six rules of thumb that I&#39;ve found useful, including class design, method parameter,
and return values.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be a Great Software Engineer in 2 Steps]]></title>
    
    <link href="http://naildrivin5.com/blog/2015/02/21/how-to-be-a-great-software-engineer.html"/>
    
    <updated>2015-02-21T13:03:00-05:00</updated>
    <id>http://naildrivin5.com/blog/2015/02/21/how-to-be-a-great-software-engineer</id>
    <content type="html"><![CDATA[<ol>
<li><strong>Understand what problem you are trying to solve.</strong>  <em>So</em> many skip this, or don&#39;t spend enough time on it or don&#39;t even <em>realize</em> that it&#39;s something to do.  The main failure of good <em>programmers</em> that I&#39;ve seen is in not knowing what problem they were trying to solve.</li>
<li><strong>Figure out what you need to do to solve the problem before you solve it.</strong>  This can be anything from skimming the code you&#39;re about to change to organizing your thoughts in a full-blown <a href="http://technology.stitchfix.com/blog/2014/12/02/some-design-up-front/">design document</a>.  You have to have a good idea of how you&#39;re going to go about solving the problem in the code.</li>
</ol>

<p>You can apply these steps to pretty much anything you need to do, from fixing bugs, to implementing features, to writing
emails, to holding meetings.  If you know what problem you&#39;re trying to solve, and have a good sense of how you&#39;re going to do
it, actually solving it becomes a lot simpler and a lot easier to get right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What You Don't Get With ActiveJob]]></title>
    
    <link href="http://www.sitepoint.com/dont-get-activejob/"/>
    
    <updated>2014-10-01T11:12:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/10/01/what-you-dont-get-with-activejob</id>
    <content type="html"><![CDATA[<p>Post by yours truly on <a href="http://www.sitepoint.com">Sitepoint</a>&#39;s Ruby section, &quot;<a href="http://www.sitepoint.com/dont-get-activejob/">What You Don&#39;t Get With ActiveJob</a>&quot;:</p>

<blockquote>
<p>ActiveJob provides simple solutions to two problems faced by Rails developers when writing background jobs: queueing jobs (via the ActiveJob API) and serialization of ActiveRecord objects (via GlobalID).</p>

<p>It doesn&#39;t, however, help with the third problem: writing resilient jobs that can survive in a production environment.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Scrum Should Basically Die in a Fire]]></title>
    
    <link href="http://gilesbowkett.blogspot.com/2014/09/why-scrum-should-basically-just-die-in.html"/>
    
    <updated>2014-09-18T19:42:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/09/18/why-scrum-should-basically-die-in-a-fire</id>
    <content type="html"><![CDATA[<p><a href="http://gilesbowkett.blogspot.com/">Giles Bowkett</a> posted <a href="http://gilesbowkett.blogspot.com/2014/09/why-scrum-should-basically-just-die-in.html">a great piece on the deep flaws of Agile processes like Scrum</a>.
It&#39;s spot-on with my experience.
There&#39;s so many choice quotes, it&#39;s hard to pull just one, but I&#39;ll try.
Toward the end of the article:</p>

<blockquote>
<p>I&#39;ve never seen Scrum-like frameworks for transmuting the work of designers, marketers, or accountants into cartoonish oversimplifications like story points. People are happy to treat these workers as adults and trust them to do their jobs.</p>

<p>I don&#39;t know why this same trust does not prevail in the culture of managing programmers.</p>
</blockquote>

<p>After a job converting JIRA Tickets into Story Points into diffs, I eventually realized that good developers <a href="http://naildrivin5.com/blog/2013/01/27/what-i-learned-working-at-livingsocial.html">deliver results</a>, not promises, points, or even features.
I even <a href="http://theseniorsoftwareengineer.com">wrote an entire book about it</a>.</p>

<p>Thankfully, the <a href="http://tech.stitchfix.com">team at Stitch Fix</a> has no sprints, story points,
velocity, or planning poker.  We just solve the most important problem at hand, and
move onto the next most important one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails' Degenerate Front-End Support]]></title>
    
    <link href="http://naildrivin5.com/blog/2014/08/07/rails-degenerate-front-end-support.html"/>
    
    <updated>2014-08-07T08:59:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/08/07/rails-degenerate-front-end-support</id>
    <content type="html"><![CDATA[<p>Rails front-end support is pretty degenerate and I don&#39;t understand why.  By &quot;degenerate&quot;, I mean the mathematical notion of
&quot;so simple as to belonging to another class&quot;.  And it seems that the Rails team isn&#39;t planning to do anything about
it any time soon, as DHH has doubled-down on &quot;server-generated JavaScript responses&quot;.</p>

<p>Why isn&#39;t Rails leading the way here?  Where is the Rails that shocked the world with its elegant API for creating server-side
web applications?  It seems that it&#39;s still peddling the same solutions for rich user-interfaces as it was over four years ago.</p>

<!-- more -->

<h2>What was the world like that gave birth to Rails?</h2>

<p>In 2005, to build a website, you either used a &quot;throw it all into the view&quot; technology (PHP), or a Model-View-Controller system
requiring a byzantine assemblage of configuration files (Java)<a name="back-1"></a><sup><a href="#1">1</a></sup>.
And it sucked.</p>

<p>But not for the reasons you think.  It wasn&#39;t so much that you had to create some configuration files in XML to
deploy a J2EE app, or that PHP is a terrible language.  It&#39;s because there were <em>so many ways</em> to do things.  I worked for years
on a Spring-MVC application and just in that framework alone, there were at least five ways to map a URL to code.  The framework
included at least three means of rendering HTML (ironicially, it contained zero ways to manage CSS).</p>

<p>Rails showed us that by <em>just deciding</em> on a few things, we can all be a lot more productive.  Rails showed us by
embracing a few conventions (or, really, <a href="http://gilesbowkett.blogspot.com/2013/02/the-lie-of-convention-over-configuration.html">curated idioms</a>), our applications can be simpler to understand, easier to maintain, easier to test, etc, etc.</p>

<p>That Rails used Ruby is almost inconsequential.  The point is that Rails wasn&#39;t the embodiment of industry-wide agreed-upon best
practices; it was the embodiment of a <em>carefully curated set of practices</em><a name="back-2"></a><sup><a href="#2">2</a></sup>.</p>

<p>And it was great.  As a lead engineer on a Spring-MVC project, I had to spend a lot of energy in code reviews making sure
everyone on the team stuck to our conventions, or the app would be an unmaintainable mess.  I had to make sure that new developers to the team knew how we did things (and why), so there was longer ramp-up than I would&#39;ve liked.</p>

<p>As a team lead for a Rails project, I spend zero time doing that.  I don&#39;t have to argue with someone about how to connect a URL
to code.  I don&#39;t have to explain why we use template system X and not Y<a name="back-3"></a><sup><a href="#3">3</a></sup>.  The team just <em>solves problems</em> instead of dealing
with the minutae of decisions that don&#39;t matter.</p>

<p>This is one of Rails&#39; biggest strengths.  But it is sorely lacking in the front-end.</p>

<h2>Back End 2007: Meet Front-End 2014</h2>

<p>Because computers and browsers are markedly more powerful than they were even 4 years ago, we have a lot more options to provide
solutions with our software.  We can create complex and highly-interactive UIs.  But there&#39;s a <em>ton</em> of ways to do it:</p>

<ul>
<li>JavaScript APIs</li>
<li>JQuery</li>
<li>Angular</li>
<li>React</li>
<li>Ember</li>
<li>ExtJS</li>
<li>Backbone</li>
<li>Etc</li>
</ul>

<p>There&#39;s a lot of great ideas in these frameworks, just as there were a lot of great ideas in the various web frameworks around in
2007.  And, just like web frameworks in 2007, they all have problems.</p>

<p>The difference from 2007 is that these front-end frameworks are all useless on their own.  Any web application needs a back-end.
And Rails is a terrific back-end.  Unfortunately, the Rails party-line is <em>still</em> to render HTML server-side and &quot;just use
JQuery&quot; if you want to do something other than render a template.  Try showing and hiding some <code>DIV</code>s in Rails with JQuery.  It
sucks.</p>

<p>And remember my snarky comment on Spring-MVC not supporting CSS management <em>at all</em>, yet calling itself a web framework?
The 2014 equivalent is the management of third-party front-end assets, for which Rails provides pretty much <em>no</em> direct support.
Rails just assumes you&#39;ll have a
RubyGem that…contains CSS and JavaScript.  That either you must maintain or hope someone else maintains.  That can only depend on
other front-end assets if they, too, are managed and distributed as RubyGem.  Yes, <a href="http://growingdevs.com/stop-using-rubygems-and-start-using-bower.html">you can (and should) use Bower</a>, but it&#39;s kludgy at best.</p>

<p>Could it be that we just don&#39;t know enough about building richer user interfaces for there to be the mythical &quot;RailsJS&quot;?</p>

<h2>Waiting for Best Practices?</h2>

<p>There are no &quot;best&quot; practices.  There are only practices which apply in certain situations.  Some apply in more situations than
others, but there is no &quot;one way to do it&quot; that, if we just wait long enough, will reveal itself.  We simply have to curate the
best set of practices we can, based on our current knowledge.</p>

<p>I see a few ways for Rails to address this:</p>

<ul>
<li><strong>Do nothing</strong>.  That&#39;s what its doing now, and this is going to make using Rails painful.</li>
<li><strong>Better client/server glue, but leave the specific front-end code to someone else</strong>.  Here, we acknowledge that
Rails developers need a lot more front-end third-party packages than we did four years ago, and make that experience a lot better
than it is now.  We acknowledge that we&#39;re going to be writing a lot more JavaScript and add some semblance of support for
testing, and a standardized way to test in-browser.</li>
<li><strong>End-to-end solution</strong>.  Here, Rails provides a framework for every aspect of the web application.  &quot;RailsJS&quot; would be to
JQuery what Rails was to Ruby+ERB+<code>mod_ruby</code>+MySQL Gem: a curated set of conventions, embodied in code that make the &quot;80% case&quot;
dead simple.</li>
</ul>

<p>The third option may be a unicorn.  While many server-centric web applications can be thought of as a &quot;CRUD app&quot; if you squint
hard enough, a rich user
interface doesn&#39;t quite fit any particular mold.  When you consider that such a user interface must also contend with the
assembler-like nature of CSS and HTML, a &quot;RailsJS&quot;, if not carefully designed, could be too special-purpose as to not be
generally useful.</p>

<p>But hiding our heads in the sand and pretending server-generated JavaScript will carry us through seems like the wrong bet.  Even
for &quot;non-ambitious&quot; applications.</p>

<h2>We&#39;ve All Got Some Ambition</h2>

<p>My ex-colleague <a href="https://twitter.com/therealadam">Adam Keys</a>, in his <a href="http://therealadam.com/2014/08/06/how-rails-fits-into-the-front-end/">recent blog post</a>, has some great points, but this one stood out:</p>

<blockquote>
<p>For the rare team building ambitious applications, an opinionated framework like Rails is probably the last thing you want. Ambitious applications, perhaps by definition, are going to cut against the grain in one or more places. An opinionated framework is only going to get in the way of the opinions that make the application ambitious in the first place.</p>
</blockquote>

<p>I think this creates a false dichotomy between &quot;Yet another CMS app&quot; and &quot;Gmail&quot;.  I work on line-of-business apps that are used
to run an e-commerce startup.  These apps are not what I&#39;d call &quot;ambitious&quot;, but they certainly benefit from being more
interactive.  Simple things like showing dialogs, revealing/hiding markup, and refreshing a view based on server updated state
seem like features that almost any app would want, not just &quot;ambitious&quot; ones.</p>

<p>Doing these in e.g. JQuery is painful.  It requires a <em>lot</em> of boilerplate, is hard to test, and there&#39;s a lot of ways to do it.
This means there&#39;s, at best, a ton of friction when implementing these features, and, more likely, we deliver crappier solutions
because making something nicer takes too long.</p>

<p>Using a framework like AngularJS makes all of this much simpler; a lot of the friction is gone.  But, the second you bring something like that into your Rails app you 
<a href="http://angular-rails.com/bootstrap.html#front-end-dependency-management-with-bower">start to realize that the core team hasn&#39;t even considered it</a>.</p>

<p>Maybe this is a long way of agreeing with Adam&#39;s last point:</p>

<blockquote>
<p>I think a lot of this comes down to Sprockets&#39; ability to gracefully grow to support front-end practice. It already does a pretty good job. Adding better support for browser components (e.g. Bower) would be good, as well as keeping up with SVG, web fonts and other somewhat special asset types.</p>
</blockquote>

<p>Just an acknowledgment that many apps will need more sophisticated front-ends whose needs can&#39;t be served by &quot;Server-Rendered
JavaScript&quot; and &quot;Just use JQuery&quot; might be a step in the right direction.</p>

<p>The thing is, developers will move on.  The front-end is only getting more relevant as more and more can be done there to provide
a great user experience.  It seems logical that Rails would want to continue to be leading the industry on how to build web apps,
  but it seems like right now, it&#39;s starting to lag.</p>

<hr>

<footer class='footnotes'>
<ol>
<li>
<a name='1'></a>
<sup>1</sup>I'm going to pretend tech like JSF, that attempted to abstract away the fact that you were creating a web app, never existed.  Ech.<a href='#back-1'>↩</a>
</li>
<li>
<a name='2'></a>
<sup>2</sup>Some of which aren't actually all that “best”, e.g. colored, timestamp-less, multi-line logging.<a href='#back-2'>↩</a>
</li>
<li>
<a name='3'></a>
<sup>3</sup>This isn't <strong>entirely</strong> true, as shit like HAML exists.  You all know we could've gotten to the moon five years earlier if we hadn't been arguing about HAML, right?<a href='#back-3'>↩</a>
</li>
</ol></footer>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes Code Hard to Understand?]]></title>
    
    <link href="http://arxiv.org/pdf/1304.5257.pdf"/>
    
    <updated>2014-07-13T14:33:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/07/13/what-makes-code-hard-to-understand</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/garybernhardt">@garybernhardt</a> linked to a short academic paper on code readability, called <a href="http://arxiv.org/pdf/1304.5257.pdf">&quot;What Makes Code Hard to Understand?&quot;</a>.  It&#39;s a quick read that details an experiment where researchers showed severals versions of the same program to a bunch of programmers and asked them to guess the output.  Each version had the same <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a> and lines of code, but differed only in formatting, variable naming, and use of types.</p>

<p>Choice quote:</p>

<blockquote>
<p>The physical aspects of notation, often considered superficial, can have a profound impact on performance [of programmers to understand what code will
do]</p>
</blockquote>

<p>In particular, in a program that relied on order of operations, two versions were given, one in which one space was used around operators (<code>zigzag</code>) and
another where the operators were all vertically aligned (<code>linedup</code>):</p>

<blockquote>
<p>Programmers were more likely to respect the order of mathematical operations in the <code>linedup</code> version of <code>whitespace</code>, showing how horizontal space can emphasize the common structure between related calculations.</p>
</blockquote>

<p>Also, they presented three versions of code to calculate the area of a rectangle, using free variables, tuples, and a <code>Rectangle</code> class:</p>

<blockquote>
<p>Programmers took longer to respond to the <code>tuples</code> version of <code>rectangle</code> despite it having fewer lines than the <code>class</code> version. It is not uncommon in Python to use tuples for (x, y) coordinates, but the syntactic &quot;noise&quot; that is present in the tuples version for variable names (e.g., <code>r1_xy_1</code>) and calculations (e.g., <code>width = xy_2[0] - xy_1[0]</code>) likely gave programmers pause when verifying the code&#39;s operation.</p>
</blockquote>

<p>This was not something that was initially obvious to me as I learned programming, but I have come to realize the importance of typography in writing
  code.  From <a href="http://www.naildrivin5.com/blog/2013/05/17/source-code-typography.html">my post</a> on the subject over a year ago:</p>

<blockquote>
<p>But, it&#39;s not just the content - the code itself - that affects readability. How it&#39;s presented matters and if we&#39;re going to talk about presentation, we have to talk about typography.</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Complexity of Object-Oriented Design]]></title>
    
    <link href="http://naildrivin5.com/blog/2014/07/11/the-complexity-of-object-oriented-design.html"/>
    
    <updated>2014-07-11T09:17:00-04:00</updated>
    <id>http://naildrivin5.com/blog/2014/07/11/the-complexity-of-object-oriented-design</id>
    <content type="html"><![CDATA[<p>I can&#39;t say what a codebase designed to Alan Kay&#39;s idea of &quot;object-oriented&quot; might look like.
I <em>can</em> say what your average developer (including myself) actually creates using object-oriented languages, tools, and techniques.
The result is a constant battle to tame complexity.
I&#39;m going to lay out one source of that complexity, because it&#39;s baked-in to object-orientation, and I debate that it provides any utility in making programs easy to understand or change.</p>

<!-- more -->

<p>Consider a procedural language in which no global symbols are possible:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">salutation</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
    <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">else</span>
    <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">salutation</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="s2">&quot;Copeland&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Hey Dave</span>
<span class="n">salutation</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span><span class="s2">&quot;Jones&quot;</span><span class="p">)</span>       <span class="c1"># =&gt; Hello, Jones</span>
</code></pre></div>
<p>Because there are no global symbols, we can easily (and totally) understand this routine.
Everything it requires to do its job is passed as parameter, and every affect it has is part of its return value.</p>

<p>Such a language would be unusable at any real complexity, because we could not decompose logic into smaller re-usable routines.
Consider if we are creating a message for someone:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create_message</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="n">message</span><span class="p">,</span><span class="n">from</span><span class="p">)</span>
  <span class="n">salutation</span> <span class="o">=</span> <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
                 <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
               <span class="k">else</span>
                 <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
               <span class="k">end</span>
  <span class="sx">%{</span>
<span class="si">#{</span><span class="n">salutation</span><span class="si">}</span><span class="sx">,</span>

<span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sx"></span>

<span class="sx">           Sincerely,</span>

<span class="sx">           </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="sx"></span>
<span class="sx">}</span>
<span class="k">end</span>
</code></pre></div>
<p>This routine, like <code>salutation</code>, is still simple to understand.
Everything it needs to do its job is passed as a parameter and its entire affect is described in its return value.</p>

<p>But, since we don&#39;t have global symbols (or any other obvious way to share logic), we&#39;ve had to duplicate <code>salutation</code>.
Although our hypothetical language encourages simple design, it&#39;s not usable in its current state.</p>

<p>If we could wrap up the salutation logic, along with the data it needed, into a single package, that could allow re-use.</p>

<h2>Objects: Data &amp; Functionality?</h2>

<p>In an object-oriented language, we have the ability to associate functionality with data, so we might logically have the <code>first_name</code> and <code>last_name</code> in some sort of object, and that object will implement the <code>salutation</code> method.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">salutation</span>
    <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
      <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
    <span class="k">else</span>
      <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Now, our <code>create_message</code> doesn&#39;t need to reproduce the <code>salutation</code> logic, but can use it from the new <code>person</code> object:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create_message</span><span class="p">(</span><span class="n">person</span><span class="p">,</span><span class="n">message</span><span class="p">,</span><span class="n">from</span><span class="p">)</span>
  <span class="sx">%{</span>
<span class="si">#{</span><span class="n">person</span><span class="o">.</span><span class="n">salutation</span><span class="si">}</span><span class="sx">,</span>

<span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sx"></span>

<span class="sx">           Sincerely,</span>

<span class="sx">           </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="sx"></span>
<span class="sx">}</span>
<span class="k">end</span>
</code></pre></div>
<p>This seems good, right?  We still don&#39;t need global symbols, and we&#39;ve found a way to encapsulate and re-use logic.</p>

<h2>Why are global symbols bad?</h2>

<p>Suppose that instead of creating objects, we had the ability to define a global symbol.
We could re-use <code>salutation</code> by making in global, meaning that <code>create_message</code> could be implemented as follows:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">create_message</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="n">message</span><span class="p">,</span><span class="n">from</span><span class="p">)</span>
  <span class="sx">%{</span>
<span class="si">#{</span><span class="n">salutation</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="si">}</span><span class="sx">,</span>

<span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sx"></span>

<span class="sx">           Sincerely,</span>

<span class="sx">           </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="sx"></span>
<span class="sx">}</span>
<span class="k">end</span>
</code></pre></div>
<p>We&#39;ve successfully re-used <code>salutation</code>, but look at how complex <code>create_message</code> has become!  Before, <strong>all</strong> input to <code>create_message</code> was in its parameter list.
<em>Now</em>, its inputs are the parameter list and <strong>every global symbol</strong>.</p>

<p>Consider how we might send a message:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">send_message</span><span class="p">(</span><span class="n">email_addresses</span><span class="p">,</span><span class="n">message</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">email_address</span> <span class="k">in</span> <span class="n">email_addresses</span>
    <span class="n">email</span><span class="p">(</span><span class="n">email_address</span><span class="p">,</span><span class="n">message</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>In addition to having all global state as its input, <code>send_message</code>&#39;s <em>output</em> is also anything available in global state.
<code>send_message</code> returns nothing, but has an affect on the outside world nontheless.</p>

<p>All this means that any routine that has access to a shared global state is going to be more complex than one that doesn&#39;t, and that, without discipline, a program making use of shared global state will be harder to understand, test, and modify.</p>

<p>This gives us a new insight into our object-oriented solution.  Although <code>send_message</code> retained its simplicity, we&#39;ve actually created a miniature global state in our <code>Person</code> class.</p>

<h2>Objects Are Their Own Shared Global State</h2>

<p>Our <code>Person</code> class from above omitted a few details, namely where <code>first_name</code> and <code>last_name</code> came from.
In most OO languages, you&#39;d assume they are instance variables, so let&#39;s add a bit more code to make this a Ruby class.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">)</span>
    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
    <span class="vi">@last_name</span>  <span class="o">=</span> <span class="n">last_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">salutation</span>
    <span class="k">if</span> <span class="vi">@first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
      <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="vi">@first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
    <span class="k">else</span>
      <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="vi">@last_name</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This is now a working Ruby implementation of our <code>Person</code> class.
Look again at <code>salutation</code>.
What are its inputs?
It takes no parameters, but is freely able to reference instance variables.
So, its inputs are <strong>every instance variable of the object</strong>.
Currently, there are only two, but it&#39;s entirely possible, and likely, that we&#39;ll have objects with many more instance variables, and more functionality.</p>

<p>Let&#39;s add the ability to change a person&#39;s name, which is a reasonable operation to provide (I&#39;m showing the entire class instead just of the changes):</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">)</span>
    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
    <span class="vi">@last_name</span>  <span class="o">=</span> <span class="n">last_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">salutation</span>
    <span class="k">if</span> <span class="vi">@first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
      <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="vi">@first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
    <span class="k">else</span>
      <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="vi">@last_name</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">first_name</span><span class="o">=</span><span class="p">(</span><span class="n">new_first_name</span><span class="p">)</span>
    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">new_first_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">last_name</span><span class="o">=</span><span class="p">(</span><span class="n">new_last_name</span><span class="p">)</span>
    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">new_last_name</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p><code>first_name=</code> and <code>last_name=</code> take a parameter, but they don&#39;t return a (useful) value.
The point of those methods is to change the internal state of the object, meaning that their affects are <em>not</em> part of their return value.</p>

<p>This is the same problem we had with global variables!
Certainly, instance variables, due to their natural proximity to the code that can access them, create <em>less</em> of a mess, but they still create the same type of complexity.</p>

<p>Now add inheritance and mixins to your toolbelt, and you have <em>even more</em> inputs and outputs to each routine.</p>

<p>This means that object-oriented designs encourage the creation of routines that have multiple, implicit inputs and have multiple, implicit outputs.
Object-oriented design, by its very nature, encourages writing complex routines.</p>

<p>To combat this complexity, we have had to develop a lot of &quot;rules&quot;, &quot;laws&quot;, and &quot;principles&quot;, and their application is a source of constant debate.
Even for someone with years of experience, it can be difficult to know how to best-factor an object-oriented codebase.</p>

<p>Let&#39;s go back to the problem we were originally trying to solve.</p>

<h2>Remove All Implicit State</h2>

<p>I&#39;ve been using &quot;global&quot; a lot, but what we really mean is &quot;implicit&quot;.
It&#39;s the ability of a routine to access symbols outside its scope that is the source of complexity here.
So let&#39;s go back to our original routines and see how else we could solve the problem of sharing code, but without introducing implicit state.</p>

<p>Here are the two routines again:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">salutation</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
    <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">else</span>
    <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">create_message</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="n">message</span><span class="p">,</span><span class="n">from</span><span class="p">)</span>
  <span class="n">salutation</span> <span class="o">=</span> <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
                 <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
               <span class="k">else</span>
                 <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
               <span class="k">end</span>
  <span class="sx">%{</span>
<span class="si">#{</span><span class="n">salutation</span><span class="si">}</span><span class="sx">,</span>

<span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sx"></span>

<span class="sx">           Sincerely,</span>

<span class="sx">           </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="sx"></span>
<span class="sx">}</span>
<span class="k">end</span>
</code></pre></div>
<p>Clearly, <code>create_message</code> needs to access the logic in <code>salutation</code>, so let&#39;s allow that.
I&#39;ll do this using valid Ruby syntax, where <code>&amp;foo</code> as a parameter denotes a passed function and <code>&amp;method(:foo)</code> turns a function into a passable function.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">salutation</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">first_name</span> <span class="o">!=</span> <span class="kp">nil</span>
    <span class="s2">&quot;Hey </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2">!&quot;</span>
  <span class="k">else</span>
    <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">create_message</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="p">,</span><span class="n">message</span><span class="p">,</span><span class="n">from</span><span class="p">,</span><span class="o">&amp;</span><span class="n">salutation</span><span class="p">)</span>
  <span class="sx">%{</span>
<span class="si">#{</span><span class="n">salutation</span><span class="o">.</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span><span class="n">last_name</span><span class="si">}</span><span class="sx">,</span>

<span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sx"></span>

<span class="sx">           Sincerely,</span>

<span class="sx">           </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="sx"></span>
<span class="sx">}</span>
<span class="k">end</span>

<span class="n">create_message</span><span class="p">(</span><span class="s2">&quot;Dave&quot;</span><span class="p">,</span><span class="s2">&quot;Copeland&quot;</span><span class="p">,</span><span class="s2">&quot;Nice blog post!&quot;</span><span class="p">,</span><span class="s2">&quot;Yourself&quot;</span><span class="p">,</span><span class="nb">method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">salutation</span><span class="p">))</span>
</code></pre></div>
<p>Now, we&#39;ve re-used our logic, and all the routines in question still maintain a single source of input and a single destination for output.
<code>create_message</code> has gotten slightly more complex, due to the additional parameter, but it&#39;s also lost complexity due to being able to re-use <code>salutation</code>.</p>

<p>Can we build an entire system like this?
The functional programmers say we can (and they have certainly proved this).
Might be something to think about.</p>
]]></content>
  </entry>
  
</feed>
